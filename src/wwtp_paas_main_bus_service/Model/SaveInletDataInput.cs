/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = wwtp_paas_main_bus_service.Client.OpenAPIDateConverter;

namespace wwtp_paas_main_bus_service.Model
{
    /// <summary>
    /// SaveInletDataInput
    /// </summary>
    [DataContract]
    public partial class SaveInletDataInput :  IEquatable<SaveInletDataInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveInletDataInput" /> class.
        /// </summary>
        /// <param name="scenarioId">方案ID scenario id.</param>
        /// <param name="inlet">进水点 inlet.</param>
        /// <param name="colNames">每一列的名称与单位 name and unit of each column.</param>
        /// <param name="times">所有的时刻 all time steps.</param>
        /// <param name="values">每一列每一时刻的数值 values of each column of each time step.</param>
        public SaveInletDataInput(Guid scenarioId = default(Guid), string inlet = default(string), List<CodeUnit> colNames = default(List<CodeUnit>), List<DateTime> times = default(List<DateTime>), List<List<double>> values = default(List<List<double>>))
        {
            this.ScenarioId = scenarioId;
            this.Inlet = inlet;
            this.ColNames = colNames;
            this.Times = times;
            this.Values = values;
        }
        
        /// <summary>
        /// 方案ID scenario id
        /// </summary>
        /// <value>方案ID scenario id</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=false)]
        public Guid ScenarioId { get; set; }

        /// <summary>
        /// 进水点 inlet
        /// </summary>
        /// <value>进水点 inlet</value>
        [DataMember(Name="inlet", EmitDefaultValue=true)]
        public string Inlet { get; set; }

        /// <summary>
        /// 每一列的名称与单位 name and unit of each column
        /// </summary>
        /// <value>每一列的名称与单位 name and unit of each column</value>
        [DataMember(Name="colNames", EmitDefaultValue=true)]
        public List<CodeUnit> ColNames { get; set; }

        /// <summary>
        /// 所有的时刻 all time steps
        /// </summary>
        /// <value>所有的时刻 all time steps</value>
        [DataMember(Name="times", EmitDefaultValue=true)]
        public List<DateTime> Times { get; set; }

        /// <summary>
        /// 每一列每一时刻的数值 values of each column of each time step
        /// </summary>
        /// <value>每一列每一时刻的数值 values of each column of each time step</value>
        [DataMember(Name="values", EmitDefaultValue=true)]
        public List<List<double>> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SaveInletDataInput {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  Inlet: ").Append(Inlet).Append("\n");
            sb.Append("  ColNames: ").Append(ColNames).Append("\n");
            sb.Append("  Times: ").Append(Times).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SaveInletDataInput);
        }

        /// <summary>
        /// Returns true if SaveInletDataInput instances are equal
        /// </summary>
        /// <param name="input">Instance of SaveInletDataInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SaveInletDataInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.Inlet == input.Inlet ||
                    (this.Inlet != null &&
                    this.Inlet.Equals(input.Inlet))
                ) && 
                (
                    this.ColNames == input.ColNames ||
                    this.ColNames != null &&
                    input.ColNames != null &&
                    this.ColNames.SequenceEqual(input.ColNames)
                ) && 
                (
                    this.Times == input.Times ||
                    this.Times != null &&
                    input.Times != null &&
                    this.Times.SequenceEqual(input.Times)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                if (this.Inlet != null)
                    hashCode = hashCode * 59 + this.Inlet.GetHashCode();
                if (this.ColNames != null)
                    hashCode = hashCode * 59 + this.ColNames.GetHashCode();
                if (this.Times != null)
                    hashCode = hashCode * 59 + this.Times.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
