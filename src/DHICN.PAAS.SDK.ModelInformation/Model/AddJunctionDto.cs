/* 
 * model-information-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelInformation.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelInformation.Model
{
    /// <summary>
    /// AddJunctionDto
    /// </summary>
    [DataContract]
    public partial class AddJunctionDto :  IEquatable<AddJunctionDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Operate
        /// </summary>
        [DataMember(Name="operate", EmitDefaultValue=false)]
        public OperateEnum? Operate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddJunctionDto" /> class.
        /// </summary>
        /// <param name="muid">模型中节点ID junction muid.</param>
        /// <param name="nodeType">节点类型 node type.</param>
        /// <param name="elevation">高程 elevation.</param>
        /// <param name="surfaceElevation">表面高程 surface elevation.</param>
        /// <param name="zoneID">分区ID zone id.</param>
        /// <param name="initChemicalConcentration">初始化学物质浓度 initial chemical concentration.</param>
        /// <param name="initSourcePercentage">初始水量占比 initial source percentage.</param>
        /// <param name="initWaterAge">初始水龄 initial water age.</param>
        /// <param name="description">描述 description.</param>
        /// <param name="dataSource">数据源 data source.</param>
        /// <param name="assetName">资产名称 asset name.</param>
        /// <param name="x">节点坐标X coordinate x.</param>
        /// <param name="y">节点坐标Y coordinate y.</param>
        /// <param name="operate">operate.</param>
        public AddJunctionDto(string muid = default(string), int nodeType = default(int), double elevation = default(double), double surfaceElevation = default(double), string zoneID = default(string), double initChemicalConcentration = default(double), double initSourcePercentage = default(double), double initWaterAge = default(double), string description = default(string), string dataSource = default(string), string assetName = default(string), double x = default(double), double y = default(double), OperateEnum? operate = default(OperateEnum?))
        {
            this.Muid = muid;
            this.NodeType = nodeType;
            this.Elevation = elevation;
            this.SurfaceElevation = surfaceElevation;
            this.ZoneID = zoneID;
            this.InitChemicalConcentration = initChemicalConcentration;
            this.InitSourcePercentage = initSourcePercentage;
            this.InitWaterAge = initWaterAge;
            this.Description = description;
            this.DataSource = dataSource;
            this.AssetName = assetName;
            this.X = x;
            this.Y = y;
            this.Operate = operate;
        }
        
        /// <summary>
        /// 模型中节点ID junction muid
        /// </summary>
        /// <value>模型中节点ID junction muid</value>
        [DataMember(Name="muid", EmitDefaultValue=true)]
        public string Muid { get; set; }

        /// <summary>
        /// 节点类型 node type
        /// </summary>
        /// <value>节点类型 node type</value>
        [DataMember(Name="nodeType", EmitDefaultValue=false)]
        public int NodeType { get; set; }

        /// <summary>
        /// 高程 elevation
        /// </summary>
        /// <value>高程 elevation</value>
        [DataMember(Name="elevation", EmitDefaultValue=false)]
        public double Elevation { get; set; }

        /// <summary>
        /// 表面高程 surface elevation
        /// </summary>
        /// <value>表面高程 surface elevation</value>
        [DataMember(Name="surfaceElevation", EmitDefaultValue=false)]
        public double SurfaceElevation { get; set; }

        /// <summary>
        /// 分区ID zone id
        /// </summary>
        /// <value>分区ID zone id</value>
        [DataMember(Name="zoneID", EmitDefaultValue=true)]
        public string ZoneID { get; set; }

        /// <summary>
        /// 初始化学物质浓度 initial chemical concentration
        /// </summary>
        /// <value>初始化学物质浓度 initial chemical concentration</value>
        [DataMember(Name="initChemicalConcentration", EmitDefaultValue=false)]
        public double InitChemicalConcentration { get; set; }

        /// <summary>
        /// 初始水量占比 initial source percentage
        /// </summary>
        /// <value>初始水量占比 initial source percentage</value>
        [DataMember(Name="initSourcePercentage", EmitDefaultValue=false)]
        public double InitSourcePercentage { get; set; }

        /// <summary>
        /// 初始水龄 initial water age
        /// </summary>
        /// <value>初始水龄 initial water age</value>
        [DataMember(Name="initWaterAge", EmitDefaultValue=false)]
        public double InitWaterAge { get; set; }

        /// <summary>
        /// 描述 description
        /// </summary>
        /// <value>描述 description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 数据源 data source
        /// </summary>
        /// <value>数据源 data source</value>
        [DataMember(Name="dataSource", EmitDefaultValue=true)]
        public string DataSource { get; set; }

        /// <summary>
        /// 资产名称 asset name
        /// </summary>
        /// <value>资产名称 asset name</value>
        [DataMember(Name="assetName", EmitDefaultValue=true)]
        public string AssetName { get; set; }

        /// <summary>
        /// 节点坐标X coordinate x
        /// </summary>
        /// <value>节点坐标X coordinate x</value>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public double X { get; set; }

        /// <summary>
        /// 节点坐标Y coordinate y
        /// </summary>
        /// <value>节点坐标Y coordinate y</value>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public double Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddJunctionDto {\n");
            sb.Append("  Muid: ").Append(Muid).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  Elevation: ").Append(Elevation).Append("\n");
            sb.Append("  SurfaceElevation: ").Append(SurfaceElevation).Append("\n");
            sb.Append("  ZoneID: ").Append(ZoneID).Append("\n");
            sb.Append("  InitChemicalConcentration: ").Append(InitChemicalConcentration).Append("\n");
            sb.Append("  InitSourcePercentage: ").Append(InitSourcePercentage).Append("\n");
            sb.Append("  InitWaterAge: ").Append(InitWaterAge).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Operate: ").Append(Operate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddJunctionDto);
        }

        /// <summary>
        /// Returns true if AddJunctionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AddJunctionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddJunctionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Muid == input.Muid ||
                    (this.Muid != null &&
                    this.Muid.Equals(input.Muid))
                ) && 
                (
                    this.NodeType == input.NodeType ||
                    this.NodeType.Equals(input.NodeType)
                ) && 
                (
                    this.Elevation == input.Elevation ||
                    this.Elevation.Equals(input.Elevation)
                ) && 
                (
                    this.SurfaceElevation == input.SurfaceElevation ||
                    this.SurfaceElevation.Equals(input.SurfaceElevation)
                ) && 
                (
                    this.ZoneID == input.ZoneID ||
                    (this.ZoneID != null &&
                    this.ZoneID.Equals(input.ZoneID))
                ) && 
                (
                    this.InitChemicalConcentration == input.InitChemicalConcentration ||
                    this.InitChemicalConcentration.Equals(input.InitChemicalConcentration)
                ) && 
                (
                    this.InitSourcePercentage == input.InitSourcePercentage ||
                    this.InitSourcePercentage.Equals(input.InitSourcePercentage)
                ) && 
                (
                    this.InitWaterAge == input.InitWaterAge ||
                    this.InitWaterAge.Equals(input.InitWaterAge)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) && 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.Y == input.Y ||
                    this.Y.Equals(input.Y)
                ) && 
                (
                    this.Operate == input.Operate ||
                    this.Operate.Equals(input.Operate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Muid != null)
                    hashCode = hashCode * 59 + this.Muid.GetHashCode();
                hashCode = hashCode * 59 + this.NodeType.GetHashCode();
                hashCode = hashCode * 59 + this.Elevation.GetHashCode();
                hashCode = hashCode * 59 + this.SurfaceElevation.GetHashCode();
                if (this.ZoneID != null)
                    hashCode = hashCode * 59 + this.ZoneID.GetHashCode();
                hashCode = hashCode * 59 + this.InitChemicalConcentration.GetHashCode();
                hashCode = hashCode * 59 + this.InitSourcePercentage.GetHashCode();
                hashCode = hashCode * 59 + this.InitWaterAge.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DataSource != null)
                    hashCode = hashCode * 59 + this.DataSource.GetHashCode();
                if (this.AssetName != null)
                    hashCode = hashCode * 59 + this.AssetName.GetHashCode();
                hashCode = hashCode * 59 + this.X.GetHashCode();
                hashCode = hashCode * 59 + this.Y.GetHashCode();
                hashCode = hashCode * 59 + this.Operate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
