/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHICN.PAAS.SDK.ResultAnalysis.Client;
using DHICN.PAAS.SDK.ResultAnalysis.Model;

namespace DHICN.PAAS.SDK.ResultAnalysis.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRainLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id
        /// </summary>
        /// <remarks>
        /// 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>QueryRainOutput</returns>
        Result<QueryRainOutput> ApiV1ResultRainGetGet (string rainId = default(string));

        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id
        /// </summary>
        /// <remarks>
        /// 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>ApiResponse of QueryRainOutput</returns>
        ApiResponse<Result<QueryRainOutput>> ApiV1ResultRainGetGetWithHttpInfo (string rainId = default(string));
        /// <summary>
        /// 查询降雨记录 Get rainfall record by time
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>List&lt;QueryRainOutput&gt;</returns>
        Result<List<QueryRainOutput>> ApiV1ResultRainListBySingleTimeGet (string rainTime);

        /// <summary>
        /// 查询降雨记录 Get rainfall record by time
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>ApiResponse of List&lt;QueryRainOutput&gt;</returns>
        ApiResponse<Result<List<QueryRainOutput>>> ApiV1ResultRainListBySingleTimeGetWithHttpInfo (string rainTime);
        /// <summary>
        /// 查询降雨的记录 Query rainfall records
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>List&lt;QueryRainOutput&gt;</returns>
        Result<List<QueryRainOutput>> ApiV1ResultRainListGet (string startTime, string endTime);

        /// <summary>
        /// 查询降雨的记录 Query rainfall records
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>ApiResponse of List&lt;QueryRainOutput&gt;</returns>
        ApiResponse<Result<List<QueryRainOutput>>> ApiV1ResultRainListGetWithHttpInfo (string startTime, string endTime);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRainLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id
        /// </summary>
        /// <remarks>
        /// 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>Task of QueryRainOutput</returns>
        System.Threading.Tasks.Task<Result<QueryRainOutput>> ApiV1ResultRainGetGetAsync (string rainId = default(string));

        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id
        /// </summary>
        /// <remarks>
        /// 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>Task of ApiResponse (QueryRainOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<QueryRainOutput>>> ApiV1ResultRainGetGetAsyncWithHttpInfo (string rainId = default(string));
        /// <summary>
        /// 查询降雨记录 Get rainfall record by time
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>Task of List&lt;QueryRainOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<QueryRainOutput>>> ApiV1ResultRainListBySingleTimeGetAsync (string rainTime);

        /// <summary>
        /// 查询降雨记录 Get rainfall record by time
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>Task of ApiResponse (List&lt;QueryRainOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<QueryRainOutput>>>> ApiV1ResultRainListBySingleTimeGetAsyncWithHttpInfo (string rainTime);
        /// <summary>
        /// 查询降雨的记录 Query rainfall records
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>Task of List&lt;QueryRainOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<QueryRainOutput>>> ApiV1ResultRainListGetAsync (string startTime, string endTime);

        /// <summary>
        /// 查询降雨的记录 Query rainfall records
        /// </summary>
        /// <remarks>
        /// 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>Task of ApiResponse (List&lt;QueryRainOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<QueryRainOutput>>>> ApiV1ResultRainListGetAsyncWithHttpInfo (string startTime, string endTime);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRainLogApi : IRainLogApiSync, IRainLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RainLogApi : IRainLogApi
    {
        private DHICN.PAAS.SDK.ResultAnalysis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RainLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RainLogApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RainLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RainLogApi(String basePath)
        {
            this.Configuration = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.ResultAnalysis.Client.GlobalConfiguration.Instance,
                new DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RainLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RainLogApi(DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.ResultAnalysis.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RainLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RainLogApi(DHICN.PAAS.SDK.ResultAnalysis.Client.ISynchronousClient client,DHICN.PAAS.SDK.ResultAnalysis.Client.IAsynchronousClient asyncClient, DHICN.PAAS.SDK.ResultAnalysis.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>QueryRainOutput</returns>
        public Result<QueryRainOutput> ApiV1ResultRainGetGet (string rainId = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<QueryRainOutput>> localVarResponse = ApiV1ResultRainGetGetWithHttpInfo(rainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>ApiResponse of QueryRainOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< QueryRainOutput >> ApiV1ResultRainGetGetWithHttpInfo (string rainId = default(string))
        {
            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (rainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "rainId", rainId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< QueryRainOutput >>("/api/v1/result/rain/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRainGetGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>Task of QueryRainOutput</returns>
        public async System.Threading.Tasks.Task<Result<QueryRainOutput>> ApiV1ResultRainGetGetAsync (string rainId = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<QueryRainOutput>> localVarResponse = await ApiV1ResultRainGetGetAsyncWithHttpInfo(rainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据ID查询降雨记录 Get rainfall log by id 根据ID查询降雨记录，每一场降雨记录都对应于若干个连续的自动预报方案 Query rainfall records by id. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainId"> (optional)</param>
        /// <returns>Task of ApiResponse (QueryRainOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<QueryRainOutput>>> ApiV1ResultRainGetGetAsyncWithHttpInfo (string rainId = default(string))
        {

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (rainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "rainId", rainId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<QueryRainOutput>>("/api/v1/result/rain/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRainGetGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询降雨记录 Get rainfall record by time 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>List&lt;QueryRainOutput&gt;</returns>
        public Result<List<QueryRainOutput>> ApiV1ResultRainListBySingleTimeGet (string rainTime)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<QueryRainOutput>>> localVarResponse = ApiV1ResultRainListBySingleTimeGetWithHttpInfo(rainTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询降雨记录 Get rainfall record by time 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>ApiResponse of List&lt;QueryRainOutput&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<QueryRainOutput> >> ApiV1ResultRainListBySingleTimeGetWithHttpInfo (string rainTime)
        {
            // verify the required parameter 'rainTime' is set
            if (rainTime == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'rainTime' when calling RainLogApi->ApiV1ResultRainListBySingleTimeGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RainTime", rainTime));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<QueryRainOutput> >>("/api/v1/result/rain/list-by-single-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRainListBySingleTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询降雨记录 Get rainfall record by time 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>Task of List&lt;QueryRainOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<QueryRainOutput>>> ApiV1ResultRainListBySingleTimeGetAsync (string rainTime)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<QueryRainOutput>>> localVarResponse = await ApiV1ResultRainListBySingleTimeGetAsyncWithHttpInfo(rainTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询降雨记录 Get rainfall record by time 按时间查询降雨记录，只有时间范围包含了查询时刻的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall record contain the query time will be returned, together with their associated scenario Ids.  Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rainTime">查询时刻 time</param>
        /// <returns>Task of ApiResponse (List&lt;QueryRainOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<QueryRainOutput>>>> ApiV1ResultRainListBySingleTimeGetAsyncWithHttpInfo (string rainTime)
        {
            // verify the required parameter 'rainTime' is set
            if (rainTime == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'rainTime' when calling RainLogApi->ApiV1ResultRainListBySingleTimeGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RainTime", rainTime));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<QueryRainOutput>>>("/api/v1/result/rain/list-by-single-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRainListBySingleTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询降雨的记录 Query rainfall records 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>List&lt;QueryRainOutput&gt;</returns>
        public Result<List<QueryRainOutput>> ApiV1ResultRainListGet (string startTime, string endTime)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<QueryRainOutput>>> localVarResponse = ApiV1ResultRainListGetWithHttpInfo(startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询降雨的记录 Query rainfall records 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>ApiResponse of List&lt;QueryRainOutput&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<QueryRainOutput> >> ApiV1ResultRainListGetWithHttpInfo (string startTime, string endTime)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'startTime' when calling RainLogApi->ApiV1ResultRainListGet");

            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'endTime' when calling RainLogApi->ApiV1ResultRainListGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<QueryRainOutput> >>("/api/v1/result/rain/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRainListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询降雨的记录 Query rainfall records 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>Task of List&lt;QueryRainOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<QueryRainOutput>>> ApiV1ResultRainListGetAsync (string startTime, string endTime)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<QueryRainOutput>>> localVarResponse = await ApiV1ResultRainListGetAsyncWithHttpInfo(startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询降雨的记录 Query rainfall records 按时间查询降雨记录，只有在StartTime和EndTime之间开始的降雨记录会被返回，同时也会返回每个降雨记录对应的方案ID列表（每一场降雨记录都对应于若干个连续的自动预报方案） Query rainfall records by time, only rainfall records start between StartTime and EndTime will be returned, together with their associated scenario Ids. Each rainfall record corresponds to several continuous auto forecast scenarios.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">查询的开始时刻 query start time</param>
        /// <param name="endTime">查询的结束时刻 query end time</param>
        /// <returns>Task of ApiResponse (List&lt;QueryRainOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<QueryRainOutput>>>> ApiV1ResultRainListGetAsyncWithHttpInfo (string startTime, string endTime)
        {
            // verify the required parameter 'startTime' is set
            if (startTime == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'startTime' when calling RainLogApi->ApiV1ResultRainListGet");

            // verify the required parameter 'endTime' is set
            if (endTime == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'endTime' when calling RainLogApi->ApiV1ResultRainListGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<QueryRainOutput>>>("/api/v1/result/rain/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRainListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
