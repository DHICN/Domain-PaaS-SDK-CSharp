/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// NetworkProfile
    /// </summary>
    [DataContract]
    public partial class NetworkProfile :  IEquatable<NetworkProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkProfile" /> class.
        /// </summary>
        /// <param name="pipeProfile">管道剖面数据 pipe profile data.</param>
        /// <param name="profileData">水位时间序列数据 water level time series.</param>
        public NetworkProfile(List<PipeProfileItem> pipeProfile = default(List<PipeProfileItem>), List<NodeProfileDataProfileDataItem> profileData = default(List<NodeProfileDataProfileDataItem>))
        {
            this.PipeProfile = pipeProfile;
            this.ProfileData = profileData;
        }
        
        /// <summary>
        /// 管道剖面数据 pipe profile data
        /// </summary>
        /// <value>管道剖面数据 pipe profile data</value>
        [DataMember(Name="pipeProfile", EmitDefaultValue=true)]
        public List<PipeProfileItem> PipeProfile { get; set; }

        /// <summary>
        /// 水位时间序列数据 water level time series
        /// </summary>
        /// <value>水位时间序列数据 water level time series</value>
        [DataMember(Name="profileData", EmitDefaultValue=true)]
        public List<NodeProfileDataProfileDataItem> ProfileData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkProfile {\n");
            sb.Append("  PipeProfile: ").Append(PipeProfile).Append("\n");
            sb.Append("  ProfileData: ").Append(ProfileData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkProfile);
        }

        /// <summary>
        /// Returns true if NetworkProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkProfile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PipeProfile == input.PipeProfile ||
                    this.PipeProfile != null &&
                    input.PipeProfile != null &&
                    this.PipeProfile.SequenceEqual(input.PipeProfile)
                ) && 
                (
                    this.ProfileData == input.ProfileData ||
                    this.ProfileData != null &&
                    input.ProfileData != null &&
                    this.ProfileData.SequenceEqual(input.ProfileData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PipeProfile != null)
                    hashCode = hashCode * 59 + this.PipeProfile.GetHashCode();
                if (this.ProfileData != null)
                    hashCode = hashCode * 59 + this.ProfileData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
