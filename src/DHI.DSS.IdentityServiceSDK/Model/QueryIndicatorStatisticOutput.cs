/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// QueryIndicatorStatisticOutput
    /// </summary>
    [DataContract]
    public partial class QueryIndicatorStatisticOutput :  IEquatable<QueryIndicatorStatisticOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryIndicatorStatisticOutput" /> class.
        /// </summary>
        /// <param name="code">指标代码 indicator code.</param>
        /// <param name="unit">单位 unit.</param>
        /// <param name="mean">平均值 average value.</param>
        /// <param name="min">最小值 minimum value.</param>
        /// <param name="max">最大值 maximum value.</param>
        /// <param name="median">中位数 median value.</param>
        /// <param name="upperPercent">上百分位 upper percentile.</param>
        /// <param name="lowerPercent">下百分位 lower percentile.</param>
        public QueryIndicatorStatisticOutput(string code = default(string), string unit = default(string), double mean = default(double), double min = default(double), double max = default(double), double median = default(double), double upperPercent = default(double), double lowerPercent = default(double))
        {
            this.Code = code;
            this.Unit = unit;
            this.Mean = mean;
            this.Min = min;
            this.Max = max;
            this.Median = median;
            this.UpperPercent = upperPercent;
            this.LowerPercent = lowerPercent;
        }
        
        /// <summary>
        /// 指标代码 indicator code
        /// </summary>
        /// <value>指标代码 indicator code</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// 单位 unit
        /// </summary>
        /// <value>单位 unit</value>
        [DataMember(Name="unit", EmitDefaultValue=true)]
        public string Unit { get; set; }

        /// <summary>
        /// 平均值 average value
        /// </summary>
        /// <value>平均值 average value</value>
        [DataMember(Name="mean", EmitDefaultValue=false)]
        public double Mean { get; set; }

        /// <summary>
        /// 最小值 minimum value
        /// </summary>
        /// <value>最小值 minimum value</value>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public double Min { get; set; }

        /// <summary>
        /// 最大值 maximum value
        /// </summary>
        /// <value>最大值 maximum value</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public double Max { get; set; }

        /// <summary>
        /// 中位数 median value
        /// </summary>
        /// <value>中位数 median value</value>
        [DataMember(Name="median", EmitDefaultValue=false)]
        public double Median { get; set; }

        /// <summary>
        /// 上百分位 upper percentile
        /// </summary>
        /// <value>上百分位 upper percentile</value>
        [DataMember(Name="upperPercent", EmitDefaultValue=false)]
        public double UpperPercent { get; set; }

        /// <summary>
        /// 下百分位 lower percentile
        /// </summary>
        /// <value>下百分位 lower percentile</value>
        [DataMember(Name="lowerPercent", EmitDefaultValue=false)]
        public double LowerPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryIndicatorStatisticOutput {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  UpperPercent: ").Append(UpperPercent).Append("\n");
            sb.Append("  LowerPercent: ").Append(LowerPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryIndicatorStatisticOutput);
        }

        /// <summary>
        /// Returns true if QueryIndicatorStatisticOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryIndicatorStatisticOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryIndicatorStatisticOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Mean == input.Mean ||
                    this.Mean.Equals(input.Mean)
                ) && 
                (
                    this.Min == input.Min ||
                    this.Min.Equals(input.Min)
                ) && 
                (
                    this.Max == input.Max ||
                    this.Max.Equals(input.Max)
                ) && 
                (
                    this.Median == input.Median ||
                    this.Median.Equals(input.Median)
                ) && 
                (
                    this.UpperPercent == input.UpperPercent ||
                    this.UpperPercent.Equals(input.UpperPercent)
                ) && 
                (
                    this.LowerPercent == input.LowerPercent ||
                    this.LowerPercent.Equals(input.LowerPercent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                hashCode = hashCode * 59 + this.Mean.GetHashCode();
                hashCode = hashCode * 59 + this.Min.GetHashCode();
                hashCode = hashCode * 59 + this.Max.GetHashCode();
                hashCode = hashCode * 59 + this.Median.GetHashCode();
                hashCode = hashCode * 59 + this.UpperPercent.GetHashCode();
                hashCode = hashCode * 59 + this.LowerPercent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
