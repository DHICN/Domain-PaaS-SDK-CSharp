/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHICN.PAAS.SDK.WWTP.MainBus.Client;
using DHICN.PAAS.SDK.WWTP.MainBus.Model;

namespace DHICN.PAAS.SDK.WWTP.MainBus.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToxicityMonitorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 首页预警信息 Get toxicity alarm data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>List&lt;ToxicAlarmsOutput&gt;</returns>
        Result<List<ToxicAlarmsOutput>> ApiV2OutputToxicAlarmsGet (string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 首页预警信息 Get toxicity alarm data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>ApiResponse of List&lt;ToxicAlarmsOutput&gt;</returns>
        ApiResponse<Result<List<ToxicAlarmsOutput>>> ApiV2OutputToxicAlarmsGetWithHttpInfo (string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ToxicityOutput</returns>
        Result<ToxicityOutput> ApiV2ToxicityMonitorAlarmHistoryPost (ToxicityInput toxicityInput = default(ToxicityInput));

        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ApiResponse of ToxicityOutput</returns>
        ApiResponse<Result<ToxicityOutput>> ApiV2ToxicityMonitorAlarmHistoryPostWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput));
        /// <summary>
        /// 获取质控记录 Get historical quality control records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ToxicityOutput</returns>
        Result<ToxicityOutput> ApiV2ToxicityMonitorControlHistoryPost (ToxicityInput toxicityInput = default(ToxicityInput));

        /// <summary>
        /// 获取质控记录 Get historical quality control records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ApiResponse of ToxicityOutput</returns>
        ApiResponse<Result<ToxicityOutput>> ApiV2ToxicityMonitorControlHistoryPostWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput));
        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ToxicityOutput</returns>
        Result<ToxicityOutput> ApiV2ToxicityMonitorMonitorHistoryPost (ToxicityInput toxicityInput = default(ToxicityInput));

        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ApiResponse of ToxicityOutput</returns>
        ApiResponse<Result<ToxicityOutput>> ApiV2ToxicityMonitorMonitorHistoryPostWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput));
        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RealTimeOutput&gt;</returns>
        Result<List<RealTimeOutput>> ApiV2ToxicityMonitorRealTimeGet ();

        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RealTimeOutput&gt;</returns>
        ApiResponse<Result<List<RealTimeOutput>>> ApiV2ToxicityMonitorRealTimeGetWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToxicityMonitorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 首页预警信息 Get toxicity alarm data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of List&lt;ToxicAlarmsOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<ToxicAlarmsOutput>>> ApiV2OutputToxicAlarmsGetAsync (string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 首页预警信息 Get toxicity alarm data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ToxicAlarmsOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<ToxicAlarmsOutput>>>> ApiV2OutputToxicAlarmsGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ToxicityOutput</returns>
        System.Threading.Tasks.Task<Result<ToxicityOutput>> ApiV2ToxicityMonitorAlarmHistoryPostAsync (ToxicityInput toxicityInput = default(ToxicityInput));

        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ApiResponse (ToxicityOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<ToxicityOutput>>> ApiV2ToxicityMonitorAlarmHistoryPostAsyncWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput));
        /// <summary>
        /// 获取质控记录 Get historical quality control records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ToxicityOutput</returns>
        System.Threading.Tasks.Task<Result<ToxicityOutput>> ApiV2ToxicityMonitorControlHistoryPostAsync (ToxicityInput toxicityInput = default(ToxicityInput));

        /// <summary>
        /// 获取质控记录 Get historical quality control records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ApiResponse (ToxicityOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<ToxicityOutput>>> ApiV2ToxicityMonitorControlHistoryPostAsyncWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput));
        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ToxicityOutput</returns>
        System.Threading.Tasks.Task<Result<ToxicityOutput>> ApiV2ToxicityMonitorMonitorHistoryPostAsync (ToxicityInput toxicityInput = default(ToxicityInput));

        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ApiResponse (ToxicityOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<ToxicityOutput>>> ApiV2ToxicityMonitorMonitorHistoryPostAsyncWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput));
        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RealTimeOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<RealTimeOutput>>> ApiV2ToxicityMonitorRealTimeGetAsync ();

        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RealTimeOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<RealTimeOutput>>>> ApiV2ToxicityMonitorRealTimeGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToxicityMonitorApi : IToxicityMonitorApiSync, IToxicityMonitorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToxicityMonitorApi : IToxicityMonitorApi
    {
        private DHICN.PAAS.SDK.WWTP.MainBus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToxicityMonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToxicityMonitorApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToxicityMonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToxicityMonitorApi(String basePath)
        {
            this.Configuration = DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.WWTP.MainBus.Client.GlobalConfiguration.Instance,
                new DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToxicityMonitorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToxicityMonitorApi(DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.WWTP.MainBus.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToxicityMonitorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToxicityMonitorApi(DHICN.PAAS.SDK.WWTP.MainBus.Client.ISynchronousClient client,DHICN.PAAS.SDK.WWTP.MainBus.Client.IAsynchronousClient asyncClient, DHICN.PAAS.SDK.WWTP.MainBus.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHICN.PAAS.SDK.WWTP.MainBus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 首页预警信息 Get toxicity alarm data 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>List&lt;ToxicAlarmsOutput&gt;</returns>
        public Result<List<ToxicAlarmsOutput>> ApiV2OutputToxicAlarmsGet (string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<List<ToxicAlarmsOutput>>> localVarResponse = ApiV2OutputToxicAlarmsGetWithHttpInfo(startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 首页预警信息 Get toxicity alarm data 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>ApiResponse of List&lt;ToxicAlarmsOutput&gt;</returns>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result< List<ToxicAlarmsOutput> >> ApiV2OutputToxicAlarmsGetWithHttpInfo (string startTime = default(string), string endTime = default(string))
        {
            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<ToxicAlarmsOutput> >>("/api/v2/output/toxic-alarms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputToxicAlarmsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 首页预警信息 Get toxicity alarm data 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of List&lt;ToxicAlarmsOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<ToxicAlarmsOutput>>> ApiV2OutputToxicAlarmsGetAsync (string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<List<ToxicAlarmsOutput>>> localVarResponse = await ApiV2OutputToxicAlarmsGetAsyncWithHttpInfo(startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 首页预警信息 Get toxicity alarm data 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ToxicAlarmsOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<List<ToxicAlarmsOutput>>>> ApiV2OutputToxicAlarmsGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string))
        {

            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<ToxicAlarmsOutput>>>("/api/v2/output/toxic-alarms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputToxicAlarmsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ToxicityOutput</returns>
        public Result<ToxicityOutput> ApiV2ToxicityMonitorAlarmHistoryPost (ToxicityInput toxicityInput = default(ToxicityInput))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>> localVarResponse = ApiV2ToxicityMonitorAlarmHistoryPostWithHttpInfo(toxicityInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ApiResponse of ToxicityOutput</returns>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result< ToxicityOutput >> ApiV2ToxicityMonitorAlarmHistoryPostWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput))
        {
            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = toxicityInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< ToxicityOutput >>("/api/v2/toxicity-monitor/alarm-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorAlarmHistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ToxicityOutput</returns>
        public async System.Threading.Tasks.Task<Result<ToxicityOutput>> ApiV2ToxicityMonitorAlarmHistoryPostAsync (ToxicityInput toxicityInput = default(ToxicityInput))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>> localVarResponse = await ApiV2ToxicityMonitorAlarmHistoryPostAsyncWithHttpInfo(toxicityInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取预警记录 Get historical toxicity alarm records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ApiResponse (ToxicityOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>>> ApiV2ToxicityMonitorAlarmHistoryPostAsyncWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput))
        {

            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = toxicityInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<ToxicityOutput>>("/api/v2/toxicity-monitor/alarm-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorAlarmHistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取质控记录 Get historical quality control records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ToxicityOutput</returns>
        public Result<ToxicityOutput> ApiV2ToxicityMonitorControlHistoryPost (ToxicityInput toxicityInput = default(ToxicityInput))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>> localVarResponse = ApiV2ToxicityMonitorControlHistoryPostWithHttpInfo(toxicityInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取质控记录 Get historical quality control records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ApiResponse of ToxicityOutput</returns>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result< ToxicityOutput >> ApiV2ToxicityMonitorControlHistoryPostWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput))
        {
            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = toxicityInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< ToxicityOutput >>("/api/v2/toxicity-monitor/control-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorControlHistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取质控记录 Get historical quality control records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ToxicityOutput</returns>
        public async System.Threading.Tasks.Task<Result<ToxicityOutput>> ApiV2ToxicityMonitorControlHistoryPostAsync (ToxicityInput toxicityInput = default(ToxicityInput))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>> localVarResponse = await ApiV2ToxicityMonitorControlHistoryPostAsyncWithHttpInfo(toxicityInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取质控记录 Get historical quality control records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ApiResponse (ToxicityOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>>> ApiV2ToxicityMonitorControlHistoryPostAsyncWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput))
        {

            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = toxicityInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<ToxicityOutput>>("/api/v2/toxicity-monitor/control-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorControlHistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ToxicityOutput</returns>
        public Result<ToxicityOutput> ApiV2ToxicityMonitorMonitorHistoryPost (ToxicityInput toxicityInput = default(ToxicityInput))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>> localVarResponse = ApiV2ToxicityMonitorMonitorHistoryPostWithHttpInfo(toxicityInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>ApiResponse of ToxicityOutput</returns>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result< ToxicityOutput >> ApiV2ToxicityMonitorMonitorHistoryPostWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput))
        {
            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = toxicityInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< ToxicityOutput >>("/api/v2/toxicity-monitor/monitor-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorMonitorHistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ToxicityOutput</returns>
        public async System.Threading.Tasks.Task<Result<ToxicityOutput>> ApiV2ToxicityMonitorMonitorHistoryPostAsync (ToxicityInput toxicityInput = default(ToxicityInput))
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>> localVarResponse = await ApiV2ToxicityMonitorMonitorHistoryPostAsyncWithHttpInfo(toxicityInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取毒性监测记录 Get historical toxicity monitoring records 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toxicityInput"> (optional)</param>
        /// <returns>Task of ApiResponse (ToxicityOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<ToxicityOutput>>> ApiV2ToxicityMonitorMonitorHistoryPostAsyncWithHttpInfo (ToxicityInput toxicityInput = default(ToxicityInput))
        {

            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = toxicityInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<ToxicityOutput>>("/api/v2/toxicity-monitor/monitor-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorMonitorHistoryPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RealTimeOutput&gt;</returns>
        public Result<List<RealTimeOutput>> ApiV2ToxicityMonitorRealTimeGet ()
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<List<RealTimeOutput>>> localVarResponse = ApiV2ToxicityMonitorRealTimeGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RealTimeOutput&gt;</returns>
        public DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result< List<RealTimeOutput> >> ApiV2ToxicityMonitorRealTimeGetWithHttpInfo ()
        {
            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.WWTP.MainBus.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<RealTimeOutput> >>("/api/v2/toxicity-monitor/real-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorRealTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RealTimeOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<RealTimeOutput>>> ApiV2ToxicityMonitorRealTimeGetAsync ()
        {
             DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<List<RealTimeOutput>>> localVarResponse = await ApiV2ToxicityMonitorRealTimeGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// 实时水质毒性和实时生物抑制率 Get real time water toxicity and biological inhibition rate 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RealTimeOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.WWTP.MainBus.Client.ApiResponse<Result<List<RealTimeOutput>>>> ApiV2ToxicityMonitorRealTimeGetAsyncWithHttpInfo ()
        {

            DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.WWTP.MainBus.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<RealTimeOutput>>>("/api/v2/toxicity-monitor/real-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ToxicityMonitorRealTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
