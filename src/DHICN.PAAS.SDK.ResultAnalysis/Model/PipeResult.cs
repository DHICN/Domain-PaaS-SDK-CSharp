/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// PipeResult
    /// </summary>
    [DataContract]
    public partial class PipeResult :  IEquatable<PipeResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipeResult" /> class.
        /// </summary>
        /// <param name="pipeID">pipeID.</param>
        /// <param name="diameter">diameter.</param>
        /// <param name="length">length.</param>
        /// <param name="absFlow">absFlow.</param>
        /// <param name="headloss">headloss.</param>
        /// <param name="velocityMax">velocityMax.</param>
        /// <param name="velocityChange">velocityChange.</param>
        /// <param name="shearStress">shearStress.</param>
        /// <param name="criteriaType">criteriaType.</param>
        /// <param name="criteriaValue">criteriaValue.</param>
        /// <param name="criteriaPct">criteriaPct.</param>
        /// <param name="flushingTime">flushingTime.</param>
        /// <param name="flushingPct">flushingPct.</param>
        /// <param name="comment">comment.</param>
        public PipeResult(string pipeID = default(string), double diameter = default(double), double length = default(double), double absFlow = default(double), double headloss = default(double), double velocityMax = default(double), double velocityChange = default(double), double shearStress = default(double), string criteriaType = default(string), double criteriaValue = default(double), string criteriaPct = default(string), double flushingTime = default(double), double flushingPct = default(double), string comment = default(string))
        {
            this.PipeID = pipeID;
            this.Diameter = diameter;
            this.Length = length;
            this.AbsFlow = absFlow;
            this.Headloss = headloss;
            this.VelocityMax = velocityMax;
            this.VelocityChange = velocityChange;
            this.ShearStress = shearStress;
            this.CriteriaType = criteriaType;
            this.CriteriaValue = criteriaValue;
            this.CriteriaPct = criteriaPct;
            this.FlushingTime = flushingTime;
            this.FlushingPct = flushingPct;
            this.Comment = comment;
        }
        
        /// <summary>
        /// Gets or Sets PipeID
        /// </summary>
        [DataMember(Name="pipeID", EmitDefaultValue=true)]
        public string PipeID { get; set; }

        /// <summary>
        /// Gets or Sets Diameter
        /// </summary>
        [DataMember(Name="diameter", EmitDefaultValue=false)]
        public double Diameter { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public double Length { get; set; }

        /// <summary>
        /// Gets or Sets AbsFlow
        /// </summary>
        [DataMember(Name="absFlow", EmitDefaultValue=false)]
        public double AbsFlow { get; set; }

        /// <summary>
        /// Gets or Sets Headloss
        /// </summary>
        [DataMember(Name="headloss", EmitDefaultValue=false)]
        public double Headloss { get; set; }

        /// <summary>
        /// Gets or Sets VelocityMax
        /// </summary>
        [DataMember(Name="velocityMax", EmitDefaultValue=false)]
        public double VelocityMax { get; set; }

        /// <summary>
        /// Gets or Sets VelocityChange
        /// </summary>
        [DataMember(Name="velocityChange", EmitDefaultValue=false)]
        public double VelocityChange { get; set; }

        /// <summary>
        /// Gets or Sets ShearStress
        /// </summary>
        [DataMember(Name="shearStress", EmitDefaultValue=false)]
        public double ShearStress { get; set; }

        /// <summary>
        /// Gets or Sets CriteriaType
        /// </summary>
        [DataMember(Name="criteriaType", EmitDefaultValue=true)]
        public string CriteriaType { get; set; }

        /// <summary>
        /// Gets or Sets CriteriaValue
        /// </summary>
        [DataMember(Name="criteriaValue", EmitDefaultValue=false)]
        public double CriteriaValue { get; set; }

        /// <summary>
        /// Gets or Sets CriteriaPct
        /// </summary>
        [DataMember(Name="criteriaPct", EmitDefaultValue=true)]
        public string CriteriaPct { get; set; }

        /// <summary>
        /// Gets or Sets FlushingTime
        /// </summary>
        [DataMember(Name="flushingTime", EmitDefaultValue=false)]
        public double FlushingTime { get; set; }

        /// <summary>
        /// Gets or Sets FlushingPct
        /// </summary>
        [DataMember(Name="flushingPct", EmitDefaultValue=false)]
        public double FlushingPct { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipeResult {\n");
            sb.Append("  PipeID: ").Append(PipeID).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  AbsFlow: ").Append(AbsFlow).Append("\n");
            sb.Append("  Headloss: ").Append(Headloss).Append("\n");
            sb.Append("  VelocityMax: ").Append(VelocityMax).Append("\n");
            sb.Append("  VelocityChange: ").Append(VelocityChange).Append("\n");
            sb.Append("  ShearStress: ").Append(ShearStress).Append("\n");
            sb.Append("  CriteriaType: ").Append(CriteriaType).Append("\n");
            sb.Append("  CriteriaValue: ").Append(CriteriaValue).Append("\n");
            sb.Append("  CriteriaPct: ").Append(CriteriaPct).Append("\n");
            sb.Append("  FlushingTime: ").Append(FlushingTime).Append("\n");
            sb.Append("  FlushingPct: ").Append(FlushingPct).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipeResult);
        }

        /// <summary>
        /// Returns true if PipeResult instances are equal
        /// </summary>
        /// <param name="input">Instance of PipeResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipeResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PipeID == input.PipeID ||
                    (this.PipeID != null &&
                    this.PipeID.Equals(input.PipeID))
                ) && 
                (
                    this.Diameter == input.Diameter ||
                    this.Diameter.Equals(input.Diameter)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.AbsFlow == input.AbsFlow ||
                    this.AbsFlow.Equals(input.AbsFlow)
                ) && 
                (
                    this.Headloss == input.Headloss ||
                    this.Headloss.Equals(input.Headloss)
                ) && 
                (
                    this.VelocityMax == input.VelocityMax ||
                    this.VelocityMax.Equals(input.VelocityMax)
                ) && 
                (
                    this.VelocityChange == input.VelocityChange ||
                    this.VelocityChange.Equals(input.VelocityChange)
                ) && 
                (
                    this.ShearStress == input.ShearStress ||
                    this.ShearStress.Equals(input.ShearStress)
                ) && 
                (
                    this.CriteriaType == input.CriteriaType ||
                    (this.CriteriaType != null &&
                    this.CriteriaType.Equals(input.CriteriaType))
                ) && 
                (
                    this.CriteriaValue == input.CriteriaValue ||
                    this.CriteriaValue.Equals(input.CriteriaValue)
                ) && 
                (
                    this.CriteriaPct == input.CriteriaPct ||
                    (this.CriteriaPct != null &&
                    this.CriteriaPct.Equals(input.CriteriaPct))
                ) && 
                (
                    this.FlushingTime == input.FlushingTime ||
                    this.FlushingTime.Equals(input.FlushingTime)
                ) && 
                (
                    this.FlushingPct == input.FlushingPct ||
                    this.FlushingPct.Equals(input.FlushingPct)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PipeID != null)
                    hashCode = hashCode * 59 + this.PipeID.GetHashCode();
                hashCode = hashCode * 59 + this.Diameter.GetHashCode();
                hashCode = hashCode * 59 + this.Length.GetHashCode();
                hashCode = hashCode * 59 + this.AbsFlow.GetHashCode();
                hashCode = hashCode * 59 + this.Headloss.GetHashCode();
                hashCode = hashCode * 59 + this.VelocityMax.GetHashCode();
                hashCode = hashCode * 59 + this.VelocityChange.GetHashCode();
                hashCode = hashCode * 59 + this.ShearStress.GetHashCode();
                if (this.CriteriaType != null)
                    hashCode = hashCode * 59 + this.CriteriaType.GetHashCode();
                hashCode = hashCode * 59 + this.CriteriaValue.GetHashCode();
                if (this.CriteriaPct != null)
                    hashCode = hashCode * 59 + this.CriteriaPct.GetHashCode();
                hashCode = hashCode * 59 + this.FlushingTime.GetHashCode();
                hashCode = hashCode * 59 + this.FlushingPct.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
