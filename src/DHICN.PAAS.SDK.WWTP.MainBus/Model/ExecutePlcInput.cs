/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.MainBus.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.MainBus.Model
{
    /// <summary>
    /// ExecutePlcInput
    /// </summary>
    [DataContract]
    public partial class ExecutePlcInput :  IEquatable<ExecutePlcInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecutePlcInput" /> class.
        /// </summary>
        /// <param name="executeTime">执行PLC时间.</param>
        /// <param name="dosingParamSettingDtos">加药参数.</param>
        public ExecutePlcInput(DateTime executeTime = default(DateTime), List<DosingParamSettingDto> dosingParamSettingDtos = default(List<DosingParamSettingDto>))
        {
            this.ExecuteTime = executeTime;
            this.DosingParamSettingDtos = dosingParamSettingDtos;
        }
        
        /// <summary>
        /// 执行PLC时间
        /// </summary>
        /// <value>执行PLC时间</value>
        [DataMember(Name="executeTime", EmitDefaultValue=false)]
        public DateTime ExecuteTime { get; set; }

        /// <summary>
        /// 加药参数
        /// </summary>
        /// <value>加药参数</value>
        [DataMember(Name="dosingParamSettingDtos", EmitDefaultValue=true)]
        public List<DosingParamSettingDto> DosingParamSettingDtos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecutePlcInput {\n");
            sb.Append("  ExecuteTime: ").Append(ExecuteTime).Append("\n");
            sb.Append("  DosingParamSettingDtos: ").Append(DosingParamSettingDtos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecutePlcInput);
        }

        /// <summary>
        /// Returns true if ExecutePlcInput instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecutePlcInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecutePlcInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecuteTime == input.ExecuteTime ||
                    (this.ExecuteTime != null &&
                    this.ExecuteTime.Equals(input.ExecuteTime))
                ) && 
                (
                    this.DosingParamSettingDtos == input.DosingParamSettingDtos ||
                    this.DosingParamSettingDtos != null &&
                    input.DosingParamSettingDtos != null &&
                    this.DosingParamSettingDtos.SequenceEqual(input.DosingParamSettingDtos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecuteTime != null)
                    hashCode = hashCode * 59 + this.ExecuteTime.GetHashCode();
                if (this.DosingParamSettingDtos != null)
                    hashCode = hashCode * 59 + this.DosingParamSettingDtos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
