/* 
 * message-center-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Message.Center.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Message.Center.Model
{
    /// <summary>
    /// CountByLevel
    /// </summary>
    [DataContract]
    public partial class CountByLevel :  IEquatable<CountByLevel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountByLevel" /> class.
        /// </summary>
        /// <param name="level">消息等级.</param>
        /// <param name="unreadCount">未读数量.</param>
        /// <param name="markCount">已读数量.</param>
        public CountByLevel(int level = default(int), int unreadCount = default(int), int markCount = default(int))
        {
            this.Level = level;
            this.UnreadCount = unreadCount;
            this.MarkCount = markCount;
        }
        
        /// <summary>
        /// 消息等级
        /// </summary>
        /// <value>消息等级</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int Level { get; set; }

        /// <summary>
        /// 未读数量
        /// </summary>
        /// <value>未读数量</value>
        [DataMember(Name="unreadCount", EmitDefaultValue=false)]
        public int UnreadCount { get; set; }

        /// <summary>
        /// 已读数量
        /// </summary>
        /// <value>已读数量</value>
        [DataMember(Name="markCount", EmitDefaultValue=false)]
        public int MarkCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountByLevel {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  UnreadCount: ").Append(UnreadCount).Append("\n");
            sb.Append("  MarkCount: ").Append(MarkCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CountByLevel);
        }

        /// <summary>
        /// Returns true if CountByLevel instances are equal
        /// </summary>
        /// <param name="input">Instance of CountByLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountByLevel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.UnreadCount == input.UnreadCount ||
                    this.UnreadCount.Equals(input.UnreadCount)
                ) && 
                (
                    this.MarkCount == input.MarkCount ||
                    this.MarkCount.Equals(input.MarkCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                hashCode = hashCode * 59 + this.UnreadCount.GetHashCode();
                hashCode = hashCode * 59 + this.MarkCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
