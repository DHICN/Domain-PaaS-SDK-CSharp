/* 
 * message-center-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Message.Center.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Message.Center.Model
{
    /// <summary>
    /// 用户消息输出  &lt;br&gt;add user&#39;s new message
    /// </summary>
    [DataContract]
    public partial class UserMsgOutput :  IEquatable<UserMsgOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserMsgOutput" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="senderUserId">发送人ID.</param>
        /// <param name="senderOrganName">发送人组织名称.</param>
        /// <param name="senderRealName">发送人真实姓名.</param>
        /// <param name="receiverUserId">接收人ID.</param>
        /// <param name="receiverOrganName">接收人组织名称.</param>
        /// <param name="receiverRealName">接收人真实姓名.</param>
        /// <param name="level">消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急..</param>
        /// <param name="msgType">消息类型.</param>
        /// <param name="message">message.</param>
        /// <param name="isRead">是否已读.</param>
        /// <param name="isMark">是否标记.</param>
        /// <param name="creationTime">创建时间.</param>
        /// <param name="lastModificationTime">lastModificationTime.</param>
        public UserMsgOutput(Guid id = default(Guid), Guid senderUserId = default(Guid), string senderOrganName = default(string), string senderRealName = default(string), Guid receiverUserId = default(Guid), string receiverOrganName = default(string), string receiverRealName = default(string), int level = default(int), string msgType = default(string), UserMessageObject message = default(UserMessageObject), bool isRead = default(bool), bool isMark = default(bool), DateTime creationTime = default(DateTime), DateTime? lastModificationTime = default(DateTime?))
        {
            this.Id = id;
            this.SenderUserId = senderUserId;
            this.SenderOrganName = senderOrganName;
            this.SenderRealName = senderRealName;
            this.ReceiverUserId = receiverUserId;
            this.ReceiverOrganName = receiverOrganName;
            this.ReceiverRealName = receiverRealName;
            this.Level = level;
            this.MsgType = msgType;
            this.Message = message;
            this.IsRead = isRead;
            this.IsMark = isMark;
            this.CreationTime = creationTime;
            this.LastModificationTime = lastModificationTime;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 发送人ID
        /// </summary>
        /// <value>发送人ID</value>
        [DataMember(Name="senderUserId", EmitDefaultValue=false)]
        public Guid SenderUserId { get; set; }

        /// <summary>
        /// 发送人组织名称
        /// </summary>
        /// <value>发送人组织名称</value>
        [DataMember(Name="senderOrganName", EmitDefaultValue=true)]
        public string SenderOrganName { get; set; }

        /// <summary>
        /// 发送人真实姓名
        /// </summary>
        /// <value>发送人真实姓名</value>
        [DataMember(Name="senderRealName", EmitDefaultValue=true)]
        public string SenderRealName { get; set; }

        /// <summary>
        /// 接收人ID
        /// </summary>
        /// <value>接收人ID</value>
        [DataMember(Name="receiverUserId", EmitDefaultValue=false)]
        public Guid ReceiverUserId { get; set; }

        /// <summary>
        /// 接收人组织名称
        /// </summary>
        /// <value>接收人组织名称</value>
        [DataMember(Name="receiverOrganName", EmitDefaultValue=true)]
        public string ReceiverOrganName { get; set; }

        /// <summary>
        /// 接收人真实姓名
        /// </summary>
        /// <value>接收人真实姓名</value>
        [DataMember(Name="receiverRealName", EmitDefaultValue=true)]
        public string ReceiverRealName { get; set; }

        /// <summary>
        /// 消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急.
        /// </summary>
        /// <value>消息等级,默认为0.  针对套子湾项目约定:1:重要;2:紧急;3:十万火急.</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int Level { get; set; }

        /// <summary>
        /// 消息类型
        /// </summary>
        /// <value>消息类型</value>
        [DataMember(Name="msgType", EmitDefaultValue=true)]
        public string MsgType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public UserMessageObject Message { get; set; }

        /// <summary>
        /// 是否已读
        /// </summary>
        /// <value>是否已读</value>
        [DataMember(Name="isRead", EmitDefaultValue=false)]
        public bool IsRead { get; set; }

        /// <summary>
        /// 是否标记
        /// </summary>
        /// <value>是否标记</value>
        [DataMember(Name="isMark", EmitDefaultValue=false)]
        public bool IsMark { get; set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        /// <value>创建时间</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModificationTime
        /// </summary>
        [DataMember(Name="lastModificationTime", EmitDefaultValue=true)]
        public DateTime? LastModificationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserMsgOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SenderUserId: ").Append(SenderUserId).Append("\n");
            sb.Append("  SenderOrganName: ").Append(SenderOrganName).Append("\n");
            sb.Append("  SenderRealName: ").Append(SenderRealName).Append("\n");
            sb.Append("  ReceiverUserId: ").Append(ReceiverUserId).Append("\n");
            sb.Append("  ReceiverOrganName: ").Append(ReceiverOrganName).Append("\n");
            sb.Append("  ReceiverRealName: ").Append(ReceiverRealName).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  MsgType: ").Append(MsgType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("  IsMark: ").Append(IsMark).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModificationTime: ").Append(LastModificationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserMsgOutput);
        }

        /// <summary>
        /// Returns true if UserMsgOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of UserMsgOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserMsgOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SenderUserId == input.SenderUserId ||
                    (this.SenderUserId != null &&
                    this.SenderUserId.Equals(input.SenderUserId))
                ) && 
                (
                    this.SenderOrganName == input.SenderOrganName ||
                    (this.SenderOrganName != null &&
                    this.SenderOrganName.Equals(input.SenderOrganName))
                ) && 
                (
                    this.SenderRealName == input.SenderRealName ||
                    (this.SenderRealName != null &&
                    this.SenderRealName.Equals(input.SenderRealName))
                ) && 
                (
                    this.ReceiverUserId == input.ReceiverUserId ||
                    (this.ReceiverUserId != null &&
                    this.ReceiverUserId.Equals(input.ReceiverUserId))
                ) && 
                (
                    this.ReceiverOrganName == input.ReceiverOrganName ||
                    (this.ReceiverOrganName != null &&
                    this.ReceiverOrganName.Equals(input.ReceiverOrganName))
                ) && 
                (
                    this.ReceiverRealName == input.ReceiverRealName ||
                    (this.ReceiverRealName != null &&
                    this.ReceiverRealName.Equals(input.ReceiverRealName))
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.MsgType == input.MsgType ||
                    (this.MsgType != null &&
                    this.MsgType.Equals(input.MsgType))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.IsRead == input.IsRead ||
                    this.IsRead.Equals(input.IsRead)
                ) && 
                (
                    this.IsMark == input.IsMark ||
                    this.IsMark.Equals(input.IsMark)
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModificationTime == input.LastModificationTime ||
                    (this.LastModificationTime != null &&
                    this.LastModificationTime.Equals(input.LastModificationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SenderUserId != null)
                    hashCode = hashCode * 59 + this.SenderUserId.GetHashCode();
                if (this.SenderOrganName != null)
                    hashCode = hashCode * 59 + this.SenderOrganName.GetHashCode();
                if (this.SenderRealName != null)
                    hashCode = hashCode * 59 + this.SenderRealName.GetHashCode();
                if (this.ReceiverUserId != null)
                    hashCode = hashCode * 59 + this.ReceiverUserId.GetHashCode();
                if (this.ReceiverOrganName != null)
                    hashCode = hashCode * 59 + this.ReceiverOrganName.GetHashCode();
                if (this.ReceiverRealName != null)
                    hashCode = hashCode * 59 + this.ReceiverRealName.GetHashCode();
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.MsgType != null)
                    hashCode = hashCode * 59 + this.MsgType.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                hashCode = hashCode * 59 + this.IsRead.GetHashCode();
                hashCode = hashCode * 59 + this.IsMark.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModificationTime != null)
                    hashCode = hashCode * 59 + this.LastModificationTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
