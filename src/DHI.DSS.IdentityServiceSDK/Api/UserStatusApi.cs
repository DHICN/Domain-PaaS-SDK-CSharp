/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.IdentityServiceSDK.Client;
using DHI.DSS.IdentityServiceSDK.Model;

namespace DHI.DSS.IdentityServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserStatusApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// /api/app/usersMnanger/status/get-all
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OrganizationWithUserStatusInfo&gt;</returns>
        Result<List<OrganizationWithUserStatusInfo>> ApiAppUsersMnangerStatusGetAllGet ();

        /// <summary>
        /// /api/app/usersMnanger/status/get-all
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OrganizationWithUserStatusInfo&gt;</returns>
        ApiResponse<Result<List<OrganizationWithUserStatusInfo>>> ApiAppUsersMnangerStatusGetAllGetWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserStatusApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// /api/app/usersMnanger/status/get-all
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OrganizationWithUserStatusInfo&gt;</returns>
        System.Threading.Tasks.Task<Result<List<OrganizationWithUserStatusInfo>>> ApiAppUsersMnangerStatusGetAllGetAsync ();

        /// <summary>
        /// /api/app/usersMnanger/status/get-all
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OrganizationWithUserStatusInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<OrganizationWithUserStatusInfo>>>> ApiAppUsersMnangerStatusGetAllGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserStatusApi : IUserStatusApiSync, IUserStatusApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserStatusApi : IUserStatusApi
    {
        private DHI.DSS.IdentityServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserStatusApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserStatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserStatusApi(String basePath)
        {
            this.Configuration = DHI.DSS.IdentityServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.IdentityServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.IdentityServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserStatusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserStatusApi(DHI.DSS.IdentityServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.IdentityServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.IdentityServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserStatusApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserStatusApi(DHI.DSS.IdentityServiceSDK.Client.ISynchronousClient client,DHI.DSS.IdentityServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.IdentityServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.IdentityServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// /api/app/usersMnanger/status/get-all 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OrganizationWithUserStatusInfo&gt;</returns>
        public Result<List<OrganizationWithUserStatusInfo>> ApiAppUsersMnangerStatusGetAllGet ()
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<OrganizationWithUserStatusInfo>>> localVarResponse = ApiAppUsersMnangerStatusGetAllGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// /api/app/usersMnanger/status/get-all 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OrganizationWithUserStatusInfo&gt;</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< List<OrganizationWithUserStatusInfo> >> ApiAppUsersMnangerStatusGetAllGetWithHttpInfo ()
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<OrganizationWithUserStatusInfo> >>("/api/app/usersMnanger/status/get-all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerStatusGetAllGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// /api/app/usersMnanger/status/get-all 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OrganizationWithUserStatusInfo&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<OrganizationWithUserStatusInfo>>> ApiAppUsersMnangerStatusGetAllGetAsync ()
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<OrganizationWithUserStatusInfo>>> localVarResponse = await ApiAppUsersMnangerStatusGetAllGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// /api/app/usersMnanger/status/get-all 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OrganizationWithUserStatusInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<OrganizationWithUserStatusInfo>>>> ApiAppUsersMnangerStatusGetAllGetAsyncWithHttpInfo ()
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<OrganizationWithUserStatusInfo>>>("/api/app/usersMnanger/status/get-all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerStatusGetAllGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
