/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client;
using DHI.DSS.WWTPPaasInfrastructureServiceSDK.Model;

namespace DHI.DSS.WWTPPaasInfrastructureServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImportExportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 导出配置文件Excel / Export config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiV2CodeConfigExportConfigExcelGet ();

        /// <summary>
        /// 导出配置文件Excel / Export config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Result<Object>> ApiV2CodeConfigExportConfigExcelGetWithHttpInfo ();
        /// <summary>
        /// 导入配置文件Excel / Import config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>StringListResult</returns>
        Result<StringListResult> ApiV2CodeConfigImportConfigExcelPost (System.IO.Stream excelFile = default(System.IO.Stream));

        /// <summary>
        /// 导入配置文件Excel / Import config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>ApiResponse of StringListResult</returns>
        ApiResponse<Result<StringListResult>> ApiV2CodeConfigImportConfigExcelPostWithHttpInfo (System.IO.Stream excelFile = default(System.IO.Stream));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImportExportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 导出配置文件Excel / Export config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV2CodeConfigExportConfigExcelGetAsync ();

        /// <summary>
        /// 导出配置文件Excel / Export config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiV2CodeConfigExportConfigExcelGetAsyncWithHttpInfo ();
        /// <summary>
        /// 导入配置文件Excel / Import config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>Task of StringListResult</returns>
        System.Threading.Tasks.Task<Result<StringListResult>> ApiV2CodeConfigImportConfigExcelPostAsync (System.IO.Stream excelFile = default(System.IO.Stream));

        /// <summary>
        /// 导入配置文件Excel / Import config Excel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>Task of ApiResponse (StringListResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<StringListResult>>> ApiV2CodeConfigImportConfigExcelPostAsyncWithHttpInfo (System.IO.Stream excelFile = default(System.IO.Stream));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImportExportApi : IImportExportApiSync, IImportExportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImportExportApi : IImportExportApi
    {
        private DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImportExportApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImportExportApi(String basePath)
        {
            this.Configuration = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportExportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImportExportApi(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImportExportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ImportExportApi(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ISynchronousClient client,DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 导出配置文件Excel / Export config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiV2CodeConfigExportConfigExcelGet ()
        {
             ApiV2CodeConfigExportConfigExcelGetWithHttpInfo();
        }

        /// <summary>
        /// 导出配置文件Excel / Export config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> ApiV2CodeConfigExportConfigExcelGetWithHttpInfo ()
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Result<Object>>("/api/v2/code-config/export-config-excel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2CodeConfigExportConfigExcelGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 导出配置文件Excel / Export config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV2CodeConfigExportConfigExcelGetAsync ()
        {
             await ApiV2CodeConfigExportConfigExcelGetAsyncWithHttpInfo();

        }

        /// <summary>
        /// 导出配置文件Excel / Export config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>>> ApiV2CodeConfigExportConfigExcelGetAsyncWithHttpInfo ()
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<Object>>("/api/v2/code-config/export-config-excel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2CodeConfigExportConfigExcelGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 导入配置文件Excel / Import config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>StringListResult</returns>
        public Result<StringListResult> ApiV2CodeConfigImportConfigExcelPost (System.IO.Stream excelFile = default(System.IO.Stream))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<StringListResult>> localVarResponse = ApiV2CodeConfigImportConfigExcelPostWithHttpInfo(excelFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 导入配置文件Excel / Import config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>ApiResponse of StringListResult</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< StringListResult >> ApiV2CodeConfigImportConfigExcelPostWithHttpInfo (System.IO.Stream excelFile = default(System.IO.Stream))
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (excelFile != null)
            {
                localVarRequestOptions.FileParameters.Add("excelFile", excelFile);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< StringListResult >>("/api/v2/code-config/import-config-excel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2CodeConfigImportConfigExcelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 导入配置文件Excel / Import config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>Task of StringListResult</returns>
        public async System.Threading.Tasks.Task<Result<StringListResult>> ApiV2CodeConfigImportConfigExcelPostAsync (System.IO.Stream excelFile = default(System.IO.Stream))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<StringListResult>> localVarResponse = await ApiV2CodeConfigImportConfigExcelPostAsyncWithHttpInfo(excelFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 导入配置文件Excel / Import config Excel 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excelFile"> (optional)</param>
        /// <returns>Task of ApiResponse (StringListResult)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<StringListResult>>> ApiV2CodeConfigImportConfigExcelPostAsyncWithHttpInfo (System.IO.Stream excelFile = default(System.IO.Stream))
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (excelFile != null)
            {
                localVarRequestOptions.FileParameters.Add("excelFile", excelFile);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<StringListResult>>("/api/v2/code-config/import-config-excel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2CodeConfigImportConfigExcelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
