/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.WWTPPaasMainBusServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.WWTPPaasMainBusServiceSDK.Model
{
    /// <summary>
    /// DosingStatisticDailysInOut
    /// </summary>
    [DataContract]
    public partial class DosingStatisticDailysInOut :  IEquatable<DosingStatisticDailysInOut>, IValidatableObject
    {
        /// <summary>
        /// 药剂投加类别
        /// </summary>
        /// <value>药剂投加类别</value>
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4

        }

        /// <summary>
        /// 药剂投加类别
        /// </summary>
        /// <value>药剂投加类别</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DosingStatisticDailysInOut" /> class.
        /// </summary>
        /// <param name="id">统计数据ID data id.</param>
        /// <param name="statisticCode">统计编码 statistic code.</param>
        /// <param name="time">时间 time.</param>
        /// <param name="value">实际投加值 actual dosage.</param>
        /// <param name="costValue">药耗值 actual dosage cost.</param>
        /// <param name="calValue">计算投加值 calculated dosage.</param>
        /// <param name="category">药剂投加类别.</param>
        /// <param name="productLine">生产线代码 product line code.</param>
        /// <param name="tenantId">租户ID tenant id.</param>
        public DosingStatisticDailysInOut(Guid id = default(Guid), string statisticCode = default(string), DateTime time = default(DateTime), double value = default(double), double costValue = default(double), double calValue = default(double), CategoryEnum? category = default(CategoryEnum?), string productLine = default(string), Guid tenantId = default(Guid))
        {
            this.Id = id;
            this.StatisticCode = statisticCode;
            this.Time = time;
            this.Value = value;
            this.CostValue = costValue;
            this.CalValue = calValue;
            this.Category = category;
            this.ProductLine = productLine;
            this.TenantId = tenantId;
        }
        
        /// <summary>
        /// 统计数据ID data id
        /// </summary>
        /// <value>统计数据ID data id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 统计编码 statistic code
        /// </summary>
        /// <value>统计编码 statistic code</value>
        [DataMember(Name="statisticCode", EmitDefaultValue=true)]
        public string StatisticCode { get; set; }

        /// <summary>
        /// 时间 time
        /// </summary>
        /// <value>时间 time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// 实际投加值 actual dosage
        /// </summary>
        /// <value>实际投加值 actual dosage</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double Value { get; set; }

        /// <summary>
        /// 药耗值 actual dosage cost
        /// </summary>
        /// <value>药耗值 actual dosage cost</value>
        [DataMember(Name="costValue", EmitDefaultValue=false)]
        public double CostValue { get; set; }

        /// <summary>
        /// 计算投加值 calculated dosage
        /// </summary>
        /// <value>计算投加值 calculated dosage</value>
        [DataMember(Name="calValue", EmitDefaultValue=false)]
        public double CalValue { get; set; }

        /// <summary>
        /// 生产线代码 product line code
        /// </summary>
        /// <value>生产线代码 product line code</value>
        [DataMember(Name="productLine", EmitDefaultValue=true)]
        public string ProductLine { get; set; }

        /// <summary>
        /// 租户ID tenant id
        /// </summary>
        /// <value>租户ID tenant id</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public Guid TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DosingStatisticDailysInOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StatisticCode: ").Append(StatisticCode).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CostValue: ").Append(CostValue).Append("\n");
            sb.Append("  CalValue: ").Append(CalValue).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ProductLine: ").Append(ProductLine).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DosingStatisticDailysInOut);
        }

        /// <summary>
        /// Returns true if DosingStatisticDailysInOut instances are equal
        /// </summary>
        /// <param name="input">Instance of DosingStatisticDailysInOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DosingStatisticDailysInOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StatisticCode == input.StatisticCode ||
                    (this.StatisticCode != null &&
                    this.StatisticCode.Equals(input.StatisticCode))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.CostValue == input.CostValue ||
                    this.CostValue.Equals(input.CostValue)
                ) && 
                (
                    this.CalValue == input.CalValue ||
                    this.CalValue.Equals(input.CalValue)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.ProductLine == input.ProductLine ||
                    (this.ProductLine != null &&
                    this.ProductLine.Equals(input.ProductLine))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StatisticCode != null)
                    hashCode = hashCode * 59 + this.StatisticCode.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.CostValue.GetHashCode();
                hashCode = hashCode * 59 + this.CalValue.GetHashCode();
                hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.ProductLine != null)
                    hashCode = hashCode * 59 + this.ProductLine.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
