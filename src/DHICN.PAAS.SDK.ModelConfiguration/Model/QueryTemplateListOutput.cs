/* 
 * model-configuration-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelConfiguration.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelConfiguration.Model
{
    /// <summary>
    /// QueryTemplateListOutput
    /// </summary>
    [DataContract]
    public partial class QueryTemplateListOutput :  IEquatable<QueryTemplateListOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryTemplateListOutput" /> class.
        /// </summary>
        /// <param name="id">模板文件ID template file Id.</param>
        /// <param name="fileName">模板文件名称 template file name.</param>
        /// <param name="enable">是否可用于创建模板方案 if it can be used to create template scenario.</param>
        /// <param name="remark">模板文件备注 template file remark.</param>
        /// <param name="version">模板文件版本 template file version.</param>
        /// <param name="libraryType">库类型.</param>
        /// <param name="businessType">业务类型.</param>
        /// <param name="modelType">模型类型.</param>
        public QueryTemplateListOutput(Guid id = default(Guid), string fileName = default(string), bool enable = default(bool), string remark = default(string), int version = default(int), string libraryType = default(string), string businessType = default(string), string modelType = default(string))
        {
            this.Id = id;
            this.FileName = fileName;
            this.Enable = enable;
            this.Remark = remark;
            this.Version = version;
            this.LibraryType = libraryType;
            this.BusinessType = businessType;
            this.ModelType = modelType;
        }
        
        /// <summary>
        /// 模板文件ID template file Id
        /// </summary>
        /// <value>模板文件ID template file Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 模板文件名称 template file name
        /// </summary>
        /// <value>模板文件名称 template file name</value>
        [DataMember(Name="fileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// 是否可用于创建模板方案 if it can be used to create template scenario
        /// </summary>
        /// <value>是否可用于创建模板方案 if it can be used to create template scenario</value>
        [DataMember(Name="enable", EmitDefaultValue=false)]
        public bool Enable { get; set; }

        /// <summary>
        /// 模板文件备注 template file remark
        /// </summary>
        /// <value>模板文件备注 template file remark</value>
        [DataMember(Name="remark", EmitDefaultValue=true)]
        public string Remark { get; set; }

        /// <summary>
        /// 模板文件版本 template file version
        /// </summary>
        /// <value>模板文件版本 template file version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int Version { get; set; }

        /// <summary>
        /// 库类型
        /// </summary>
        /// <value>库类型</value>
        [DataMember(Name="libraryType", EmitDefaultValue=true)]
        public string LibraryType { get; set; }

        /// <summary>
        /// 业务类型
        /// </summary>
        /// <value>业务类型</value>
        [DataMember(Name="businessType", EmitDefaultValue=true)]
        public string BusinessType { get; set; }

        /// <summary>
        /// 模型类型
        /// </summary>
        /// <value>模型类型</value>
        [DataMember(Name="modelType", EmitDefaultValue=true)]
        public string ModelType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryTemplateListOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  LibraryType: ").Append(LibraryType).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryTemplateListOutput);
        }

        /// <summary>
        /// Returns true if QueryTemplateListOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryTemplateListOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryTemplateListOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                ) && 
                (
                    this.Version == input.Version ||
                    this.Version.Equals(input.Version)
                ) && 
                (
                    this.LibraryType == input.LibraryType ||
                    (this.LibraryType != null &&
                    this.LibraryType.Equals(input.LibraryType))
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    (this.BusinessType != null &&
                    this.BusinessType.Equals(input.BusinessType))
                ) && 
                (
                    this.ModelType == input.ModelType ||
                    (this.ModelType != null &&
                    this.ModelType.Equals(input.ModelType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                hashCode = hashCode * 59 + this.Enable.GetHashCode();
                if (this.Remark != null)
                    hashCode = hashCode * 59 + this.Remark.GetHashCode();
                hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.LibraryType != null)
                    hashCode = hashCode * 59 + this.LibraryType.GetHashCode();
                if (this.BusinessType != null)
                    hashCode = hashCode * 59 + this.BusinessType.GetHashCode();
                if (this.ModelType != null)
                    hashCode = hashCode * 59 + this.ModelType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
