/* 
 * model-information-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelInformation.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelInformation.Model
{
    /// <summary>
    /// FlushingParaDto
    /// </summary>
    [DataContract]
    public partial class FlushingParaDto :  IEquatable<FlushingParaDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlushingParaDto" /> class.
        /// </summary>
        /// <param name="pipeModelId">模型中管道ID pipe muid.</param>
        /// <param name="fromNode">流入节点 flush from node.</param>
        /// <param name="toNode">流出节点 flush to node.</param>
        /// <param name="targetVelocity">目标流速 target velocity.</param>
        /// <param name="flushingDemand">冲洗流量 flushing demand.</param>
        /// <param name="flushingTime">冲洗时长 flushing time.</param>
        /// <param name="id">管道冲洗参数ID pipe flushing parameter id.</param>
        public FlushingParaDto(string pipeModelId = default(string), string fromNode = default(string), string toNode = default(string), double targetVelocity = default(double), double flushingDemand = default(double), double flushingTime = default(double), Guid id = default(Guid))
        {
            this.PipeModelId = pipeModelId;
            this.FromNode = fromNode;
            this.ToNode = toNode;
            this.TargetVelocity = targetVelocity;
            this.FlushingDemand = flushingDemand;
            this.FlushingTime = flushingTime;
            this.Id = id;
        }
        
        /// <summary>
        /// 模型中管道ID pipe muid
        /// </summary>
        /// <value>模型中管道ID pipe muid</value>
        [DataMember(Name="pipeModelId", EmitDefaultValue=true)]
        public string PipeModelId { get; set; }

        /// <summary>
        /// 流入节点 flush from node
        /// </summary>
        /// <value>流入节点 flush from node</value>
        [DataMember(Name="fromNode", EmitDefaultValue=true)]
        public string FromNode { get; set; }

        /// <summary>
        /// 流出节点 flush to node
        /// </summary>
        /// <value>流出节点 flush to node</value>
        [DataMember(Name="toNode", EmitDefaultValue=true)]
        public string ToNode { get; set; }

        /// <summary>
        /// 目标流速 target velocity
        /// </summary>
        /// <value>目标流速 target velocity</value>
        [DataMember(Name="targetVelocity", EmitDefaultValue=false)]
        public double TargetVelocity { get; set; }

        /// <summary>
        /// 冲洗流量 flushing demand
        /// </summary>
        /// <value>冲洗流量 flushing demand</value>
        [DataMember(Name="flushingDemand", EmitDefaultValue=false)]
        public double FlushingDemand { get; set; }

        /// <summary>
        /// 冲洗时长 flushing time
        /// </summary>
        /// <value>冲洗时长 flushing time</value>
        [DataMember(Name="flushingTime", EmitDefaultValue=false)]
        public double FlushingTime { get; set; }

        /// <summary>
        /// 管道冲洗参数ID pipe flushing parameter id
        /// </summary>
        /// <value>管道冲洗参数ID pipe flushing parameter id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlushingParaDto {\n");
            sb.Append("  PipeModelId: ").Append(PipeModelId).Append("\n");
            sb.Append("  FromNode: ").Append(FromNode).Append("\n");
            sb.Append("  ToNode: ").Append(ToNode).Append("\n");
            sb.Append("  TargetVelocity: ").Append(TargetVelocity).Append("\n");
            sb.Append("  FlushingDemand: ").Append(FlushingDemand).Append("\n");
            sb.Append("  FlushingTime: ").Append(FlushingTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlushingParaDto);
        }

        /// <summary>
        /// Returns true if FlushingParaDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FlushingParaDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlushingParaDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PipeModelId == input.PipeModelId ||
                    (this.PipeModelId != null &&
                    this.PipeModelId.Equals(input.PipeModelId))
                ) && 
                (
                    this.FromNode == input.FromNode ||
                    (this.FromNode != null &&
                    this.FromNode.Equals(input.FromNode))
                ) && 
                (
                    this.ToNode == input.ToNode ||
                    (this.ToNode != null &&
                    this.ToNode.Equals(input.ToNode))
                ) && 
                (
                    this.TargetVelocity == input.TargetVelocity ||
                    this.TargetVelocity.Equals(input.TargetVelocity)
                ) && 
                (
                    this.FlushingDemand == input.FlushingDemand ||
                    this.FlushingDemand.Equals(input.FlushingDemand)
                ) && 
                (
                    this.FlushingTime == input.FlushingTime ||
                    this.FlushingTime.Equals(input.FlushingTime)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PipeModelId != null)
                    hashCode = hashCode * 59 + this.PipeModelId.GetHashCode();
                if (this.FromNode != null)
                    hashCode = hashCode * 59 + this.FromNode.GetHashCode();
                if (this.ToNode != null)
                    hashCode = hashCode * 59 + this.ToNode.GetHashCode();
                hashCode = hashCode * 59 + this.TargetVelocity.GetHashCode();
                hashCode = hashCode * 59 + this.FlushingDemand.GetHashCode();
                hashCode = hashCode * 59 + this.FlushingTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
