/* 
 * model-information-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelInformation.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelInformation.Model
{
    /// <summary>
    /// QueryDemandDto
    /// </summary>
    [DataContract]
    public partial class QueryDemandDto :  IEquatable<QueryDemandDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryDemandDto" /> class.
        /// </summary>
        /// <param name="junctionID">模型中的节点ID junction muid.</param>
        /// <param name="demand">需水量或需水量增量 demand or demand difference.</param>
        /// <param name="category">分类 category.</param>
        /// <param name="coefficient">系数 coefficient.</param>
        /// <param name="patternID">模式ID pattern id.</param>
        /// <param name="description">描述 description.</param>
        /// <param name="id">需水量ID demand id.</param>
        public QueryDemandDto(string junctionID = default(string), double demand = default(double), string category = default(string), double coefficient = default(double), string patternID = default(string), string description = default(string), Guid id = default(Guid))
        {
            this.JunctionID = junctionID;
            this.Demand = demand;
            this.Category = category;
            this.Coefficient = coefficient;
            this.PatternID = patternID;
            this.Description = description;
            this.Id = id;
        }
        
        /// <summary>
        /// 模型中的节点ID junction muid
        /// </summary>
        /// <value>模型中的节点ID junction muid</value>
        [DataMember(Name="junctionID", EmitDefaultValue=true)]
        public string JunctionID { get; set; }

        /// <summary>
        /// 需水量或需水量增量 demand or demand difference
        /// </summary>
        /// <value>需水量或需水量增量 demand or demand difference</value>
        [DataMember(Name="demand", EmitDefaultValue=false)]
        public double Demand { get; set; }

        /// <summary>
        /// 分类 category
        /// </summary>
        /// <value>分类 category</value>
        [DataMember(Name="category", EmitDefaultValue=true)]
        public string Category { get; set; }

        /// <summary>
        /// 系数 coefficient
        /// </summary>
        /// <value>系数 coefficient</value>
        [DataMember(Name="coefficient", EmitDefaultValue=false)]
        public double Coefficient { get; set; }

        /// <summary>
        /// 模式ID pattern id
        /// </summary>
        /// <value>模式ID pattern id</value>
        [DataMember(Name="patternID", EmitDefaultValue=true)]
        public string PatternID { get; set; }

        /// <summary>
        /// 描述 description
        /// </summary>
        /// <value>描述 description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 需水量ID demand id
        /// </summary>
        /// <value>需水量ID demand id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryDemandDto {\n");
            sb.Append("  JunctionID: ").Append(JunctionID).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Coefficient: ").Append(Coefficient).Append("\n");
            sb.Append("  PatternID: ").Append(PatternID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryDemandDto);
        }

        /// <summary>
        /// Returns true if QueryDemandDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryDemandDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryDemandDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JunctionID == input.JunctionID ||
                    (this.JunctionID != null &&
                    this.JunctionID.Equals(input.JunctionID))
                ) && 
                (
                    this.Demand == input.Demand ||
                    this.Demand.Equals(input.Demand)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Coefficient == input.Coefficient ||
                    this.Coefficient.Equals(input.Coefficient)
                ) && 
                (
                    this.PatternID == input.PatternID ||
                    (this.PatternID != null &&
                    this.PatternID.Equals(input.PatternID))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JunctionID != null)
                    hashCode = hashCode * 59 + this.JunctionID.GetHashCode();
                hashCode = hashCode * 59 + this.Demand.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                hashCode = hashCode * 59 + this.Coefficient.GetHashCode();
                if (this.PatternID != null)
                    hashCode = hashCode * 59 + this.PatternID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
