/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// GateInfo
    /// </summary>
    [DataContract]
    public partial class GateInfo :  IEquatable<GateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GateInfo" /> class.
        /// </summary>
        /// <param name="assetID">闸Id gate id.</param>
        /// <param name="assetName">闸名称 gate name.</param>
        /// <param name="state">开关状态(0:关,1:开) switch status (0: off, 1: on).</param>
        /// <param name="openNum">开启次数 Opening times.</param>
        /// <param name="openMinutes">开启时长，以分钟为单位 opening duration (unit:minute).</param>
        public GateInfo(string assetID = default(string), string assetName = default(string), int state = default(int), double openNum = default(double), double openMinutes = default(double))
        {
            this.AssetID = assetID;
            this.AssetName = assetName;
            this.State = state;
            this.OpenNum = openNum;
            this.OpenMinutes = openMinutes;
        }
        
        /// <summary>
        /// 闸Id gate id
        /// </summary>
        /// <value>闸Id gate id</value>
        [DataMember(Name="assetID", EmitDefaultValue=true)]
        public string AssetID { get; set; }

        /// <summary>
        /// 闸名称 gate name
        /// </summary>
        /// <value>闸名称 gate name</value>
        [DataMember(Name="assetName", EmitDefaultValue=true)]
        public string AssetName { get; set; }

        /// <summary>
        /// 开关状态(0:关,1:开) switch status (0: off, 1: on)
        /// </summary>
        /// <value>开关状态(0:关,1:开) switch status (0: off, 1: on)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int State { get; set; }

        /// <summary>
        /// 开启次数 Opening times
        /// </summary>
        /// <value>开启次数 Opening times</value>
        [DataMember(Name="openNum", EmitDefaultValue=false)]
        public double OpenNum { get; set; }

        /// <summary>
        /// 开启时长，以分钟为单位 opening duration (unit:minute)
        /// </summary>
        /// <value>开启时长，以分钟为单位 opening duration (unit:minute)</value>
        [DataMember(Name="openMinutes", EmitDefaultValue=false)]
        public double OpenMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GateInfo {\n");
            sb.Append("  AssetID: ").Append(AssetID).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  OpenNum: ").Append(OpenNum).Append("\n");
            sb.Append("  OpenMinutes: ").Append(OpenMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GateInfo);
        }

        /// <summary>
        /// Returns true if GateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GateInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetID == input.AssetID ||
                    (this.AssetID != null &&
                    this.AssetID.Equals(input.AssetID))
                ) && 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.OpenNum == input.OpenNum ||
                    this.OpenNum.Equals(input.OpenNum)
                ) && 
                (
                    this.OpenMinutes == input.OpenMinutes ||
                    this.OpenMinutes.Equals(input.OpenMinutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetID != null)
                    hashCode = hashCode * 59 + this.AssetID.GetHashCode();
                if (this.AssetName != null)
                    hashCode = hashCode * 59 + this.AssetName.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.OpenNum.GetHashCode();
                hashCode = hashCode * 59 + this.OpenMinutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
