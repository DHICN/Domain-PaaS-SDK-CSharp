/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using wwtp_paas_main_bus_service.Client;
using wwtp_paas_main_bus_service.Model;

namespace wwtp_paas_main_bus_service.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeneralDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 根据展示类型获取点位配置信息
        /// </summary>
        /// <remarks>
        /// 根据展示类型获取点位配置信息
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>List&lt;AssemblyConfigOutput&gt;</returns>
        Result<List<AssemblyConfigOutput>> ApiGeneralDataGetAssemblyConfigsGet (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string));

        /// <summary>
        /// 根据展示类型获取点位配置信息
        /// </summary>
        /// <remarks>
        /// 根据展示类型获取点位配置信息
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>ApiResponse of List&lt;AssemblyConfigOutput&gt;</returns>
        ApiResponse<Result<List<AssemblyConfigOutput>>> ApiGeneralDataGetAssemblyConfigsGetWithHttpInfo (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string));
        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>List&lt;InletWqOut&gt;</returns>
        Result<List<InletWqOut>> ApiGeneralDataGetInletWQGet (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string));

        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>ApiResponse of List&lt;InletWqOut&gt;</returns>
        ApiResponse<Result<List<InletWqOut>>> ApiGeneralDataGetInletWQGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string));
        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>List&lt;ModelPrecision&gt;</returns>
        Result<List<ModelPrecision>> ApiGeneralDataGetModelPrecisionGet (string startTime = default(string), string endTime = default(string), string modelName = default(string));

        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelPrecision&gt;</returns>
        ApiResponse<Result<List<ModelPrecision>>> ApiGeneralDataGetModelPrecisionGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string));
        /// <summary>
        /// 获取优化建议 Get optimization recommendation data
        /// </summary>
        /// <remarks>
        /// 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ModelOptimDto</returns>
        Result<ModelOptimDto> ApiGeneralDataGetOptimOutDataGet (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string));

        /// <summary>
        /// 获取优化建议 Get optimization recommendation data
        /// </summary>
        /// <remarks>
        /// 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of ModelOptimDto</returns>
        ApiResponse<Result<ModelOptimDto>> ApiGeneralDataGetOptimOutDataGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string));
        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>List&lt;OutletWqOut&gt;</returns>
        Result<List<OutletWqOut>> ApiGeneralDataGetOutletWQGet (string startTime = default(string), string endTime = default(string), string modelName = default(string));

        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;OutletWqOut&gt;</returns>
        ApiResponse<Result<List<OutletWqOut>>> ApiGeneralDataGetOutletWQGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string));
        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>List&lt;PredictAlarmOut&gt;</returns>
        Result<List<PredictAlarmOut>> ApiGeneralDataGetPredictAlarmGet (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string));

        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>ApiResponse of List&lt;PredictAlarmOut&gt;</returns>
        ApiResponse<Result<List<PredictAlarmOut>>> ApiGeneralDataGetPredictAlarmGetWithHttpInfo (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string));
        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
        /// </summary>
        /// <remarks>
        /// 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>List&lt;ChemicalCostPerFlowOutput&gt;</returns>
        Result<List<ChemicalCostPerFlowOutput>> ApiV2OutputChemicalCostGet (string modelName = default(string));

        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
        /// </summary>
        /// <remarks>
        /// 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;ChemicalCostPerFlowOutput&gt;</returns>
        ApiResponse<Result<List<ChemicalCostPerFlowOutput>>> ApiV2OutputChemicalCostGetWithHttpInfo (string modelName = default(string));
        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DataBoardFullOut&gt;</returns>
        Result<List<DataBoardFullOut>> ApiV2OutputDataBoardsGet ();

        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DataBoardFullOut&gt;</returns>
        ApiResponse<Result<List<DataBoardFullOut>>> ApiV2OutputDataBoardsGetWithHttpInfo ();
        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>List&lt;DeviceMaintenanceOutput&gt;</returns>
        Result<List<DeviceMaintenanceOutput>> ApiV2OutputDeviceMaintenanceGet (string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceMaintenanceOutput&gt;</returns>
        ApiResponse<Result<List<DeviceMaintenanceOutput>>> ApiV2OutputDeviceMaintenanceGetWithHttpInfo (string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line
        /// </summary>
        /// <remarks>
        /// 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>List&lt;EntireProcessWqOut&gt;</returns>
        Result<List<EntireProcessWqOut>> ApiV2OutputEntireProcessTsByProductlineGet (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string));

        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line
        /// </summary>
        /// <remarks>
        /// 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;EntireProcessWqOut&gt;</returns>
        ApiResponse<Result<List<EntireProcessWqOut>>> ApiV2OutputEntireProcessTsByProductlineGetWithHttpInfo (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeneralDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 根据展示类型获取点位配置信息
        /// </summary>
        /// <remarks>
        /// 根据展示类型获取点位配置信息
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>Task of List&lt;AssemblyConfigOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<AssemblyConfigOutput>>> ApiGeneralDataGetAssemblyConfigsGetAsync (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string));

        /// <summary>
        /// 根据展示类型获取点位配置信息
        /// </summary>
        /// <remarks>
        /// 根据展示类型获取点位配置信息
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssemblyConfigOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<AssemblyConfigOutput>>>> ApiGeneralDataGetAssemblyConfigsGetAsyncWithHttpInfo (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string));
        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>Task of List&lt;InletWqOut&gt;</returns>
        System.Threading.Tasks.Task<Result<List<InletWqOut>>> ApiGeneralDataGetInletWQGetAsync (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string));

        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InletWqOut&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<InletWqOut>>>> ApiGeneralDataGetInletWQGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string));
        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;ModelPrecision&gt;</returns>
        System.Threading.Tasks.Task<Result<List<ModelPrecision>>> ApiGeneralDataGetModelPrecisionGetAsync (string startTime = default(string), string endTime = default(string), string modelName = default(string));

        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelPrecision&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<ModelPrecision>>>> ApiGeneralDataGetModelPrecisionGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string));
        /// <summary>
        /// 获取优化建议 Get optimization recommendation data
        /// </summary>
        /// <remarks>
        /// 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ModelOptimDto</returns>
        System.Threading.Tasks.Task<Result<ModelOptimDto>> ApiGeneralDataGetOptimOutDataGetAsync (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string));

        /// <summary>
        /// 获取优化建议 Get optimization recommendation data
        /// </summary>
        /// <remarks>
        /// 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (ModelOptimDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<ModelOptimDto>>> ApiGeneralDataGetOptimOutDataGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string));
        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;OutletWqOut&gt;</returns>
        System.Threading.Tasks.Task<Result<List<OutletWqOut>>> ApiGeneralDataGetOutletWQGetAsync (string startTime = default(string), string endTime = default(string), string modelName = default(string));

        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OutletWqOut&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<OutletWqOut>>>> ApiGeneralDataGetOutletWQGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string));
        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>Task of List&lt;PredictAlarmOut&gt;</returns>
        System.Threading.Tasks.Task<Result<List<PredictAlarmOut>>> ApiGeneralDataGetPredictAlarmGetAsync (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string));

        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PredictAlarmOut&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<PredictAlarmOut>>>> ApiGeneralDataGetPredictAlarmGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string));
        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
        /// </summary>
        /// <remarks>
        /// 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;ChemicalCostPerFlowOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<ChemicalCostPerFlowOutput>>> ApiV2OutputChemicalCostGetAsync (string modelName = default(string));

        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage
        /// </summary>
        /// <remarks>
        /// 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChemicalCostPerFlowOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<ChemicalCostPerFlowOutput>>>> ApiV2OutputChemicalCostGetAsyncWithHttpInfo (string modelName = default(string));
        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DataBoardFullOut&gt;</returns>
        System.Threading.Tasks.Task<Result<List<DataBoardFullOut>>> ApiV2OutputDataBoardsGetAsync ();

        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DataBoardFullOut&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<DataBoardFullOut>>>> ApiV2OutputDataBoardsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of List&lt;DeviceMaintenanceOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<DeviceMaintenanceOutput>>> ApiV2OutputDeviceMaintenanceGetAsync (string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceMaintenanceOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<DeviceMaintenanceOutput>>>> ApiV2OutputDeviceMaintenanceGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line
        /// </summary>
        /// <remarks>
        /// 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;EntireProcessWqOut&gt;</returns>
        System.Threading.Tasks.Task<Result<List<EntireProcessWqOut>>> ApiV2OutputEntireProcessTsByProductlineGetAsync (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string));

        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line
        /// </summary>
        /// <remarks>
        /// 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </remarks>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntireProcessWqOut&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<EntireProcessWqOut>>>> ApiV2OutputEntireProcessTsByProductlineGetAsyncWithHttpInfo (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeneralDataApi : IGeneralDataApiSync, IGeneralDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeneralDataApi : IGeneralDataApi
    {
        private wwtp_paas_main_bus_service.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeneralDataApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeneralDataApi(String basePath)
        {
            this.Configuration = wwtp_paas_main_bus_service.Client.Configuration.MergeConfigurations(
                wwtp_paas_main_bus_service.Client.GlobalConfiguration.Instance,
                new wwtp_paas_main_bus_service.Client.Configuration { BasePath = basePath }
            );
            this.Client = new wwtp_paas_main_bus_service.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new wwtp_paas_main_bus_service.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = wwtp_paas_main_bus_service.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeneralDataApi(wwtp_paas_main_bus_service.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = wwtp_paas_main_bus_service.Client.Configuration.MergeConfigurations(
                wwtp_paas_main_bus_service.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new wwtp_paas_main_bus_service.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new wwtp_paas_main_bus_service.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = wwtp_paas_main_bus_service.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralDataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GeneralDataApi(wwtp_paas_main_bus_service.Client.ISynchronousClient client,wwtp_paas_main_bus_service.Client.IAsynchronousClient asyncClient, wwtp_paas_main_bus_service.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = wwtp_paas_main_bus_service.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public wwtp_paas_main_bus_service.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public wwtp_paas_main_bus_service.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public wwtp_paas_main_bus_service.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public wwtp_paas_main_bus_service.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 根据展示类型获取点位配置信息 根据展示类型获取点位配置信息
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>List&lt;AssemblyConfigOutput&gt;</returns>
        public Result<List<AssemblyConfigOutput>> ApiGeneralDataGetAssemblyConfigsGet (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<AssemblyConfigOutput>>> localVarResponse = ApiGeneralDataGetAssemblyConfigsGetWithHttpInfo(displayTypeEnum, modelName, productLine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据展示类型获取点位配置信息 根据展示类型获取点位配置信息
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>ApiResponse of List&lt;AssemblyConfigOutput&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<AssemblyConfigOutput> >> ApiGeneralDataGetAssemblyConfigsGetWithHttpInfo (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (displayTypeEnum != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "displayTypeEnum", displayTypeEnum));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<AssemblyConfigOutput> >>("/api/GeneralData/GetAssemblyConfigs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetAssemblyConfigsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据展示类型获取点位配置信息 根据展示类型获取点位配置信息
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>Task of List&lt;AssemblyConfigOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<AssemblyConfigOutput>>> ApiGeneralDataGetAssemblyConfigsGetAsync (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<AssemblyConfigOutput>>> localVarResponse = await ApiGeneralDataGetAssemblyConfigsGetAsyncWithHttpInfo(displayTypeEnum, modelName, productLine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据展示类型获取点位配置信息 根据展示类型获取点位配置信息
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="displayTypeEnum">展示类型 (optional)</param>
        /// <param name="modelName">模型名称 (optional)</param>
        /// <param name="productLine">工艺线 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AssemblyConfigOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<AssemblyConfigOutput>>>> ApiGeneralDataGetAssemblyConfigsGetAsyncWithHttpInfo (int? displayTypeEnum = default(int?), string modelName = default(string), string productLine = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (displayTypeEnum != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "displayTypeEnum", displayTypeEnum));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<AssemblyConfigOutput>>>("/api/GeneralData/GetAssemblyConfigs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetAssemblyConfigsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>List&lt;InletWqOut&gt;</returns>
        public Result<List<InletWqOut>> ApiGeneralDataGetInletWQGet (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<InletWqOut>>> localVarResponse = ApiGeneralDataGetInletWQGetWithHttpInfo(startTime, endTime, modelName, productLine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>ApiResponse of List&lt;InletWqOut&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<InletWqOut> >> ApiGeneralDataGetInletWQGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<InletWqOut> >>("/api/GeneralData/GetInletWQ", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetInletWQGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>Task of List&lt;InletWqOut&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<InletWqOut>>> ApiGeneralDataGetInletWQGetAsync (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<InletWqOut>>> localVarResponse = await ApiGeneralDataGetInletWQGetAsyncWithHttpInfo(startTime, endTime, modelName, productLine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取进水水质数据，包括原始数据和清洗后数据 Get inlet water quality data, including source data and processed data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InletWqOut&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<InletWqOut>>>> ApiGeneralDataGetInletWQGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string), string productLine = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<InletWqOut>>>("/api/GeneralData/GetInletWQ", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetInletWQGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>List&lt;ModelPrecision&gt;</returns>
        public Result<List<ModelPrecision>> ApiGeneralDataGetModelPrecisionGet (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<ModelPrecision>>> localVarResponse = ApiGeneralDataGetModelPrecisionGetWithHttpInfo(startTime, endTime, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelPrecision&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<ModelPrecision> >> ApiGeneralDataGetModelPrecisionGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<ModelPrecision> >>("/api/GeneralData/GetModelPrecision", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetModelPrecisionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;ModelPrecision&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<ModelPrecision>>> ApiGeneralDataGetModelPrecisionGetAsync (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<ModelPrecision>>> localVarResponse = await ApiGeneralDataGetModelPrecisionGetAsyncWithHttpInfo(startTime, endTime, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取指定时间段内的模型精度统计数据 Get model precison statistic data of a certain period 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelPrecision&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<ModelPrecision>>>> ApiGeneralDataGetModelPrecisionGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<ModelPrecision>>>("/api/GeneralData/GetModelPrecision", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetModelPrecisionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取优化建议 Get optimization recommendation data 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ModelOptimDto</returns>
        public Result<ModelOptimDto> ApiGeneralDataGetOptimOutDataGet (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<ModelOptimDto>> localVarResponse = ApiGeneralDataGetOptimOutDataGetWithHttpInfo(startTime, endTime, productLine, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取优化建议 Get optimization recommendation data 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of ModelOptimDto</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< ModelOptimDto >> ApiGeneralDataGetOptimOutDataGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< ModelOptimDto >>("/api/GeneralData/GetOptimOutData", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetOptimOutDataGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取优化建议 Get optimization recommendation data 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ModelOptimDto</returns>
        public async System.Threading.Tasks.Task<Result<ModelOptimDto>> ApiGeneralDataGetOptimOutDataGetAsync (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<ModelOptimDto>> localVarResponse = await ApiGeneralDataGetOptimOutDataGetAsyncWithHttpInfo(startTime, endTime, productLine, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取优化建议 Get optimization recommendation data 返回包括优化二沉池出水水质，优化控制建议 Secondary sedimentation tank effluent water quality statistic data and optimized control recommendation data will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (ModelOptimDto)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<ModelOptimDto>>> ApiGeneralDataGetOptimOutDataGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string productLine = default(string), string modelName = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<ModelOptimDto>>("/api/GeneralData/GetOptimOutData", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetOptimOutDataGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>List&lt;OutletWqOut&gt;</returns>
        public Result<List<OutletWqOut>> ApiGeneralDataGetOutletWQGet (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<OutletWqOut>>> localVarResponse = ApiGeneralDataGetOutletWQGetWithHttpInfo(startTime, endTime, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;OutletWqOut&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<OutletWqOut> >> ApiGeneralDataGetOutletWQGetWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<OutletWqOut> >>("/api/GeneralData/GetOutletWQ", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetOutletWQGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;OutletWqOut&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<OutletWqOut>>> ApiGeneralDataGetOutletWQGetAsync (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<OutletWqOut>>> localVarResponse = await ApiGeneralDataGetOutletWQGetAsyncWithHttpInfo(startTime, endTime, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取出水水质数据，包括在线数据和模拟结果数据 Get effluent water quality data, including online processed data and model result data 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OutletWqOut&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<OutletWqOut>>>> ApiGeneralDataGetOutletWQGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<OutletWqOut>>>("/api/GeneralData/GetOutletWQ", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetOutletWQGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>List&lt;PredictAlarmOut&gt;</returns>
        public Result<List<PredictAlarmOut>> ApiGeneralDataGetPredictAlarmGet (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<PredictAlarmOut>>> localVarResponse = ApiGeneralDataGetPredictAlarmGetWithHttpInfo(startTime, endTime, alarmTypes, isNationalStandard);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>ApiResponse of List&lt;PredictAlarmOut&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<PredictAlarmOut> >> ApiGeneralDataGetPredictAlarmGetWithHttpInfo (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            if (alarmTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("multi", "AlarmTypes", alarmTypes));
            }
            if (isNationalStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "IsNationalStandard", isNationalStandard));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<PredictAlarmOut> >>("/api/GeneralData/GetPredictAlarm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetPredictAlarmGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>Task of List&lt;PredictAlarmOut&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<PredictAlarmOut>>> ApiGeneralDataGetPredictAlarmGetAsync (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<PredictAlarmOut>>> localVarResponse = await ApiGeneralDataGetPredictAlarmGetAsyncWithHttpInfo(startTime, endTime, alarmTypes, isNationalStandard);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取进出水水质预警信息 Get alarm data for inlet and outlet water quality 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="alarmTypes">消息类型 alarm types (optional)</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PredictAlarmOut&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<PredictAlarmOut>>>> ApiGeneralDataGetPredictAlarmGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string), List<string> alarmTypes = default(List<string>), string isNationalStandard = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            if (alarmTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("multi", "AlarmTypes", alarmTypes));
            }
            if (isNationalStandard != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "IsNationalStandard", isNationalStandard));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<PredictAlarmOut>>>("/api/GeneralData/GetPredictAlarm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiGeneralDataGetPredictAlarmGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>List&lt;ChemicalCostPerFlowOutput&gt;</returns>
        public Result<List<ChemicalCostPerFlowOutput>> ApiV2OutputChemicalCostGet (string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<ChemicalCostPerFlowOutput>>> localVarResponse = ApiV2OutputChemicalCostGetWithHttpInfo(modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;ChemicalCostPerFlowOutput&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<ChemicalCostPerFlowOutput> >> ApiV2OutputChemicalCostGetWithHttpInfo (string modelName = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<ChemicalCostPerFlowOutput> >>("/api/v2/output/chemical-cost", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputChemicalCostGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;ChemicalCostPerFlowOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<ChemicalCostPerFlowOutput>>> ApiV2OutputChemicalCostGetAsync (string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<ChemicalCostPerFlowOutput>>> localVarResponse = await ApiV2OutputChemicalCostGetAsyncWithHttpInfo(modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据实际投药量，获取吨水药耗统计信息 Get dosage cost per ton of inflow water statistic result based on actual dosage 返回过去七天，每天每条工艺线上的碳源加药吨水药耗和MCCR加药吨水药耗 Carbon source doage cost per ton of water and MCCR dosage cost per ton of water of each product line and each day in the past seven days will be returned.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelName">模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChemicalCostPerFlowOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<ChemicalCostPerFlowOutput>>>> ApiV2OutputChemicalCostGetAsyncWithHttpInfo (string modelName = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<ChemicalCostPerFlowOutput>>>("/api/v2/output/chemical-cost", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputChemicalCostGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DataBoardFullOut&gt;</returns>
        public Result<List<DataBoardFullOut>> ApiV2OutputDataBoardsGet ()
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<DataBoardFullOut>>> localVarResponse = ApiV2OutputDataBoardsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DataBoardFullOut&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<DataBoardFullOut> >> ApiV2OutputDataBoardsGetWithHttpInfo ()
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<DataBoardFullOut> >>("/api/v2/output/data-boards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputDataBoardsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DataBoardFullOut&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<DataBoardFullOut>>> ApiV2OutputDataBoardsGetAsync ()
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<DataBoardFullOut>>> localVarResponse = await ApiV2OutputDataBoardsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取数据看板统计数据 Get statistic data for data board 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DataBoardFullOut&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<DataBoardFullOut>>>> ApiV2OutputDataBoardsGetAsyncWithHttpInfo ()
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<DataBoardFullOut>>>("/api/v2/output/data-boards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputDataBoardsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>List&lt;DeviceMaintenanceOutput&gt;</returns>
        public Result<List<DeviceMaintenanceOutput>> ApiV2OutputDeviceMaintenanceGet (string startTime = default(string), string endTime = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<DeviceMaintenanceOutput>>> localVarResponse = ApiV2OutputDeviceMaintenanceGetWithHttpInfo(startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>ApiResponse of List&lt;DeviceMaintenanceOutput&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<DeviceMaintenanceOutput> >> ApiV2OutputDeviceMaintenanceGetWithHttpInfo (string startTime = default(string), string endTime = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<DeviceMaintenanceOutput> >>("/api/v2/output/device/maintenance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputDeviceMaintenanceGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of List&lt;DeviceMaintenanceOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<DeviceMaintenanceOutput>>> ApiV2OutputDeviceMaintenanceGetAsync (string startTime = default(string), string endTime = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<DeviceMaintenanceOutput>>> localVarResponse = await ApiV2OutputDeviceMaintenanceGetAsyncWithHttpInfo(startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询关键设备维护预警信息 Get key device maintenance warning information 
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeviceMaintenanceOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<DeviceMaintenanceOutput>>>> ApiV2OutputDeviceMaintenanceGetAsyncWithHttpInfo (string startTime = default(string), string endTime = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<DeviceMaintenanceOutput>>>("/api/v2/output/device/maintenance", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputDeviceMaintenanceGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>List&lt;EntireProcessWqOut&gt;</returns>
        public Result<List<EntireProcessWqOut>> ApiV2OutputEntireProcessTsByProductlineGet (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<EntireProcessWqOut>>> localVarResponse = ApiV2OutputEntireProcessTsByProductlineGetWithHttpInfo(productLine, startTime, endTime, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>ApiResponse of List&lt;EntireProcessWqOut&gt;</returns>
        public wwtp_paas_main_bus_service.Client.ApiResponse<Result< List<EntireProcessWqOut> >> ApiV2OutputEntireProcessTsByProductlineGetWithHttpInfo (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = wwtp_paas_main_bus_service.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<EntireProcessWqOut> >>("/api/v2/output/entire-process/ts-by-productline", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputEntireProcessTsByProductlineGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of List&lt;EntireProcessWqOut&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<EntireProcessWqOut>>> ApiV2OutputEntireProcessTsByProductlineGetAsync (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {
             wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<EntireProcessWqOut>>> localVarResponse = await ApiV2OutputEntireProcessTsByProductlineGetAsyncWithHttpInfo(productLine, startTime, endTime, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过生产线获取全流程水质 Get water quality entire process data by product line 查询指定时间段内，所有指标在每一个工艺单元上的时间序列结果数据，包括进水、各个生化池、出水 Get time-series result data of all the indicators on each process unit including inlet, biochemical pools and outlet of a certain period.
        /// </summary>
        /// <exception cref="wwtp_paas_main_bus_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">工艺线代码 product line code (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <param name="modelName">模板模型名称 template model name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntireProcessWqOut&gt;)</returns>
        public async System.Threading.Tasks.Task<wwtp_paas_main_bus_service.Client.ApiResponse<Result<List<EntireProcessWqOut>>>> ApiV2OutputEntireProcessTsByProductlineGetAsyncWithHttpInfo (string productLine = default(string), string startTime = default(string), string endTime = default(string), string modelName = default(string))
        {

            wwtp_paas_main_bus_service.Client.RequestOptions localVarRequestOptions = new wwtp_paas_main_bus_service.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "productLine", productLine));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (modelName != null)
            {
                localVarRequestOptions.QueryParameters.Add(wwtp_paas_main_bus_service.Client.ClientUtils.ParameterToMultiMap("", "modelName", modelName));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<EntireProcessWqOut>>>("/api/v2/output/entire-process/ts-by-productline", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2OutputEntireProcessTsByProductlineGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
