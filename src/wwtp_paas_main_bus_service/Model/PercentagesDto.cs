/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = wwtp_paas_main_bus_service.Client.OpenAPIDateConverter;

namespace wwtp_paas_main_bus_service.Model
{
    /// <summary>
    /// PercentagesDto
    /// </summary>
    [DataContract]
    public partial class PercentagesDto :  IEquatable<PercentagesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PercentagesDto" /> class.
        /// </summary>
        /// <param name="regionName">精度区间名称，如:80-100(优秀)  precision region name.</param>
        /// <param name="recProbability">推荐占比，如:&gt;70 precision region recommended proportion.</param>
        /// <param name="value">精度百分比区间占比 precision region proportion.</param>
        public PercentagesDto(string regionName = default(string), string recProbability = default(string), double value = default(double))
        {
            this.RegionName = regionName;
            this.RecProbability = recProbability;
            this.Value = value;
        }
        
        /// <summary>
        /// 精度区间名称，如:80-100(优秀)  precision region name
        /// </summary>
        /// <value>精度区间名称，如:80-100(优秀)  precision region name</value>
        [DataMember(Name="regionName", EmitDefaultValue=true)]
        public string RegionName { get; set; }

        /// <summary>
        /// 推荐占比，如:&gt;70 precision region recommended proportion
        /// </summary>
        /// <value>推荐占比，如:&gt;70 precision region recommended proportion</value>
        [DataMember(Name="recProbability", EmitDefaultValue=true)]
        public string RecProbability { get; set; }

        /// <summary>
        /// 精度百分比区间占比 precision region proportion
        /// </summary>
        /// <value>精度百分比区间占比 precision region proportion</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PercentagesDto {\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  RecProbability: ").Append(RecProbability).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PercentagesDto);
        }

        /// <summary>
        /// Returns true if PercentagesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PercentagesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PercentagesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.RecProbability == input.RecProbability ||
                    (this.RecProbability != null &&
                    this.RecProbability.Equals(input.RecProbability))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegionName != null)
                    hashCode = hashCode * 59 + this.RegionName.GetHashCode();
                if (this.RecProbability != null)
                    hashCode = hashCode * 59 + this.RecProbability.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
