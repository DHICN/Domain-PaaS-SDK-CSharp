/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Identity.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Identity.Model
{
    /// <summary>
    /// ScenarioModelNodeDto
    /// </summary>
    [DataContract]
    public partial class ScenarioModelNodeDto :  IEquatable<ScenarioModelNodeDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioModelNodeDto" /> class.
        /// </summary>
        /// <param name="outletModelNode">出水模型节点.</param>
        /// <param name="remModelNode">去除率节点.</param>
        /// <param name="unit">方案模型Code的单位.</param>
        public ScenarioModelNodeDto(string outletModelNode = default(string), string remModelNode = default(string), string unit = default(string))
        {
            this.OutletModelNode = outletModelNode;
            this.RemModelNode = remModelNode;
            this.Unit = unit;
        }
        
        /// <summary>
        /// 出水模型节点
        /// </summary>
        /// <value>出水模型节点</value>
        [DataMember(Name="outletModelNode", EmitDefaultValue=true)]
        public string OutletModelNode { get; set; }

        /// <summary>
        /// 去除率节点
        /// </summary>
        /// <value>去除率节点</value>
        [DataMember(Name="remModelNode", EmitDefaultValue=true)]
        public string RemModelNode { get; set; }

        /// <summary>
        /// 方案模型Code的单位
        /// </summary>
        /// <value>方案模型Code的单位</value>
        [DataMember(Name="unit", EmitDefaultValue=true)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScenarioModelNodeDto {\n");
            sb.Append("  OutletModelNode: ").Append(OutletModelNode).Append("\n");
            sb.Append("  RemModelNode: ").Append(RemModelNode).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioModelNodeDto);
        }

        /// <summary>
        /// Returns true if ScenarioModelNodeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioModelNodeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioModelNodeDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutletModelNode == input.OutletModelNode ||
                    (this.OutletModelNode != null &&
                    this.OutletModelNode.Equals(input.OutletModelNode))
                ) && 
                (
                    this.RemModelNode == input.RemModelNode ||
                    (this.RemModelNode != null &&
                    this.RemModelNode.Equals(input.RemModelNode))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutletModelNode != null)
                    hashCode = hashCode * 59 + this.OutletModelNode.GetHashCode();
                if (this.RemModelNode != null)
                    hashCode = hashCode * 59 + this.RemModelNode.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
