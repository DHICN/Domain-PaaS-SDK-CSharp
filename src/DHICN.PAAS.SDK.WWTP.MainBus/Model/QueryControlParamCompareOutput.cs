/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.MainBus.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.MainBus.Model
{
    /// <summary>
    /// QueryControlParamCompareOutput
    /// </summary>
    [DataContract]
    public partial class QueryControlParamCompareOutput :  IEquatable<QueryControlParamCompareOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryControlParamCompareOutput" /> class.
        /// </summary>
        /// <param name="paraCode">参数代码 parameter code.</param>
        /// <param name="description">参数描述 parameter description.</param>
        /// <param name="unit">单位 unit.</param>
        /// <param name="scenarios">方案对比结果 scenario comparision result.</param>
        public QueryControlParamCompareOutput(string paraCode = default(string), string description = default(string), string unit = default(string), List<Scenario> scenarios = default(List<Scenario>))
        {
            this.ParaCode = paraCode;
            this.Description = description;
            this.Unit = unit;
            this.Scenarios = scenarios;
        }
        
        /// <summary>
        /// 参数代码 parameter code
        /// </summary>
        /// <value>参数代码 parameter code</value>
        [DataMember(Name="paraCode", EmitDefaultValue=true)]
        public string ParaCode { get; set; }

        /// <summary>
        /// 参数描述 parameter description
        /// </summary>
        /// <value>参数描述 parameter description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 单位 unit
        /// </summary>
        /// <value>单位 unit</value>
        [DataMember(Name="unit", EmitDefaultValue=true)]
        public string Unit { get; set; }

        /// <summary>
        /// 方案对比结果 scenario comparision result
        /// </summary>
        /// <value>方案对比结果 scenario comparision result</value>
        [DataMember(Name="scenarios", EmitDefaultValue=true)]
        public List<Scenario> Scenarios { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryControlParamCompareOutput {\n");
            sb.Append("  ParaCode: ").Append(ParaCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Scenarios: ").Append(Scenarios).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryControlParamCompareOutput);
        }

        /// <summary>
        /// Returns true if QueryControlParamCompareOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryControlParamCompareOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryControlParamCompareOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParaCode == input.ParaCode ||
                    (this.ParaCode != null &&
                    this.ParaCode.Equals(input.ParaCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Scenarios == input.Scenarios ||
                    this.Scenarios != null &&
                    input.Scenarios != null &&
                    this.Scenarios.SequenceEqual(input.Scenarios)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParaCode != null)
                    hashCode = hashCode * 59 + this.ParaCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Scenarios != null)
                    hashCode = hashCode * 59 + this.Scenarios.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
