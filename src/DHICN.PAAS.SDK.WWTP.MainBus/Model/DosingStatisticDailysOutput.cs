/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.MainBus.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.MainBus.Model
{
    /// <summary>
    /// DosingStatisticDailysOutput
    /// </summary>
    [DataContract]
    public partial class DosingStatisticDailysOutput :  IEquatable<DosingStatisticDailysOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DosingStatisticDailysOutput" /> class.
        /// </summary>
        /// <param name="pointCode">统计项代码 statistic item code.</param>
        /// <param name="pointName">统计项名称 statistic item name.</param>
        /// <param name="unit">单位 unit.</param>
        /// <param name="tsData">时间序列 time-series data.</param>
        public DosingStatisticDailysOutput(string pointCode = default(string), string pointName = default(string), string unit = default(string), List<TsPair1> tsData = default(List<TsPair1>))
        {
            this.PointCode = pointCode;
            this.PointName = pointName;
            this.Unit = unit;
            this.TsData = tsData;
        }
        
        /// <summary>
        /// 统计项代码 statistic item code
        /// </summary>
        /// <value>统计项代码 statistic item code</value>
        [DataMember(Name="pointCode", EmitDefaultValue=true)]
        public string PointCode { get; set; }

        /// <summary>
        /// 统计项名称 statistic item name
        /// </summary>
        /// <value>统计项名称 statistic item name</value>
        [DataMember(Name="pointName", EmitDefaultValue=true)]
        public string PointName { get; set; }

        /// <summary>
        /// 单位 unit
        /// </summary>
        /// <value>单位 unit</value>
        [DataMember(Name="unit", EmitDefaultValue=true)]
        public string Unit { get; set; }

        /// <summary>
        /// 最大值 maximum value
        /// </summary>
        /// <value>最大值 maximum value</value>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public double MaxValue { get; private set; }

        /// <summary>
        /// 最小值 minimum value
        /// </summary>
        /// <value>最小值 minimum value</value>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public double MinValue { get; private set; }

        /// <summary>
        /// 平均值 average value
        /// </summary>
        /// <value>平均值 average value</value>
        [DataMember(Name="avgValue", EmitDefaultValue=false)]
        public double AvgValue { get; private set; }

        /// <summary>
        /// 最后一个值 last value
        /// </summary>
        /// <value>最后一个值 last value</value>
        [DataMember(Name="lastValue", EmitDefaultValue=false)]
        public double LastValue { get; private set; }

        /// <summary>
        /// 第一个值 first value
        /// </summary>
        /// <value>第一个值 first value</value>
        [DataMember(Name="firstValue", EmitDefaultValue=false)]
        public double FirstValue { get; private set; }

        /// <summary>
        /// 累计值 sum value
        /// </summary>
        /// <value>累计值 sum value</value>
        [DataMember(Name="sumValue", EmitDefaultValue=false)]
        public double SumValue { get; private set; }

        /// <summary>
        /// 时间序列 time-series data
        /// </summary>
        /// <value>时间序列 time-series data</value>
        [DataMember(Name="tsData", EmitDefaultValue=true)]
        public List<TsPair1> TsData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DosingStatisticDailysOutput {\n");
            sb.Append("  PointCode: ").Append(PointCode).Append("\n");
            sb.Append("  PointName: ").Append(PointName).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  AvgValue: ").Append(AvgValue).Append("\n");
            sb.Append("  LastValue: ").Append(LastValue).Append("\n");
            sb.Append("  FirstValue: ").Append(FirstValue).Append("\n");
            sb.Append("  SumValue: ").Append(SumValue).Append("\n");
            sb.Append("  TsData: ").Append(TsData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DosingStatisticDailysOutput);
        }

        /// <summary>
        /// Returns true if DosingStatisticDailysOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of DosingStatisticDailysOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DosingStatisticDailysOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PointCode == input.PointCode ||
                    (this.PointCode != null &&
                    this.PointCode.Equals(input.PointCode))
                ) && 
                (
                    this.PointName == input.PointName ||
                    (this.PointName != null &&
                    this.PointName.Equals(input.PointName))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    this.MaxValue.Equals(input.MaxValue)
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    this.MinValue.Equals(input.MinValue)
                ) && 
                (
                    this.AvgValue == input.AvgValue ||
                    this.AvgValue.Equals(input.AvgValue)
                ) && 
                (
                    this.LastValue == input.LastValue ||
                    this.LastValue.Equals(input.LastValue)
                ) && 
                (
                    this.FirstValue == input.FirstValue ||
                    this.FirstValue.Equals(input.FirstValue)
                ) && 
                (
                    this.SumValue == input.SumValue ||
                    this.SumValue.Equals(input.SumValue)
                ) && 
                (
                    this.TsData == input.TsData ||
                    this.TsData != null &&
                    input.TsData != null &&
                    this.TsData.SequenceEqual(input.TsData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PointCode != null)
                    hashCode = hashCode * 59 + this.PointCode.GetHashCode();
                if (this.PointName != null)
                    hashCode = hashCode * 59 + this.PointName.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                hashCode = hashCode * 59 + this.AvgValue.GetHashCode();
                hashCode = hashCode * 59 + this.LastValue.GetHashCode();
                hashCode = hashCode * 59 + this.FirstValue.GetHashCode();
                hashCode = hashCode * 59 + this.SumValue.GetHashCode();
                if (this.TsData != null)
                    hashCode = hashCode * 59 + this.TsData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
