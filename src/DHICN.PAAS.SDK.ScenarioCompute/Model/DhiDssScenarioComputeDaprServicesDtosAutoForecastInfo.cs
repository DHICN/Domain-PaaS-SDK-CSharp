/* 
 * scenario-compute-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ScenarioCompute.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ScenarioCompute.Model
{
    /// <summary>
    /// DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo
    /// </summary>
    [DataContract]
    public partial class DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo :  IEquatable<DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo>, IValidatableObject
    {
        /// <summary>
        /// 0-Cycle 1-Condition 
        /// </summary>
        /// <value>0-Cycle 1-Condition </value>
        public enum TriggerTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// 0-Cycle 1-Condition 
        /// </summary>
        /// <value>0-Cycle 1-Condition </value>
        [DataMember(Name="triggerType", EmitDefaultValue=false)]
        public TriggerTypeEnum? TriggerType { get; set; }
        /// <summary>
        /// 0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood) 
        /// </summary>
        /// <value>0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood) </value>
        public enum BusinessTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4

        }

        /// <summary>
        /// 0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood) 
        /// </summary>
        /// <value>0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood) </value>
        [DataMember(Name="businessType", EmitDefaultValue=false)]
        public BusinessTypeEnum? BusinessType { get; set; }
        /// <summary>
        /// 0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library) 
        /// </summary>
        /// <value>0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library) </value>
        public enum LibraryTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6,

            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            NUMBER_7 = 7,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_9 for value: 9
            /// </summary>
            NUMBER_9 = 9,

            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            NUMBER_10 = 10,

            /// <summary>
            /// Enum NUMBER_11 for value: 11
            /// </summary>
            NUMBER_11 = 11,

            /// <summary>
            /// Enum NUMBER_12 for value: 12
            /// </summary>
            NUMBER_12 = 12,

            /// <summary>
            /// Enum NUMBER_13 for value: 13
            /// </summary>
            NUMBER_13 = 13,

            /// <summary>
            /// Enum NUMBER_14 for value: 14
            /// </summary>
            NUMBER_14 = 14,

            /// <summary>
            /// Enum NUMBER_15 for value: 15
            /// </summary>
            NUMBER_15 = 15,

            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            NUMBER_16 = 16

        }

        /// <summary>
        /// 0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library) 
        /// </summary>
        /// <value>0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library) </value>
        [DataMember(Name="libraryType", EmitDefaultValue=false)]
        public LibraryTypeEnum? LibraryType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo" /> class.
        /// </summary>
        /// <param name="id">Data id.</param>
        /// <param name="scenarioId">Scenario id.</param>
        /// <param name="tenantId">Tenant id.</param>
        /// <param name="triggerType">0-Cycle 1-Condition .</param>
        /// <param name="executeCycle">定时触发的周期 小时.</param>
        /// <param name="triggerThreshold">Trigger autoforecast threshold.</param>
        /// <param name="triggerCancelThreshold">Trigger cancel autoforecast threshold.</param>
        /// <param name="continuesCycle">Timed forecast cycles.</param>
        /// <param name="previousHours">Previous hours.</param>
        /// <param name="forecastHours">Forecast hours.</param>
        /// <param name="businessType">0-Undefined(Undefined) 1-WaterEnvironment(Water environment) 2-UrbanFlooding(Urban flooding) 3-UrbanWD(Water distribution) 4-RiverFlood(River flood) .</param>
        /// <param name="libraryType">0-Undefined(Undefined) 1-AutoForecast(Auto forecast library) 2-ManualForecast(Manual forecast library) 3-Forecast(Forecast library) 4-Schedule(Schedule library) 5-Experience(Experience library) 6-ScenarioSimulation(Scenario simulation library) 7-WQAccident(Water quality accident library) 8-OnlineHD(WD Hydrodynamic library) 9-WaterHammer(WD water hammer library) 10-Filling(WD pipe filling library) 11-PipeBurst(WD pipe burst library) 12-WQResponse(Water quality accident response library) 13-Planning(WD planning library) 14-Flushing(WD flushing library) 15-OnlineWQAccident(Online Water quality accident library) 16-CloseValve(WD close valve library) .</param>
        public DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo(Guid id = default(Guid), Guid? scenarioId = default(Guid?), Guid? tenantId = default(Guid?), TriggerTypeEnum? triggerType = default(TriggerTypeEnum?), double executeCycle = default(double), string triggerThreshold = default(string), string triggerCancelThreshold = default(string), double continuesCycle = default(double), double previousHours = default(double), double forecastHours = default(double), BusinessTypeEnum? businessType = default(BusinessTypeEnum?), LibraryTypeEnum? libraryType = default(LibraryTypeEnum?))
        {
            this.Id = id;
            this.ScenarioId = scenarioId;
            this.TenantId = tenantId;
            this.TriggerType = triggerType;
            this.ExecuteCycle = executeCycle;
            this.TriggerThreshold = triggerThreshold;
            this.TriggerCancelThreshold = triggerCancelThreshold;
            this.ContinuesCycle = continuesCycle;
            this.PreviousHours = previousHours;
            this.ForecastHours = forecastHours;
            this.BusinessType = businessType;
            this.LibraryType = libraryType;
        }
        
        /// <summary>
        /// Data id
        /// </summary>
        /// <value>Data id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Scenario id
        /// </summary>
        /// <value>Scenario id</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=true)]
        public Guid? ScenarioId { get; set; }

        /// <summary>
        /// Tenant id
        /// </summary>
        /// <value>Tenant id</value>
        [DataMember(Name="tenantId", EmitDefaultValue=true)]
        public Guid? TenantId { get; set; }

        /// <summary>
        /// 定时触发的周期 小时
        /// </summary>
        /// <value>定时触发的周期 小时</value>
        [DataMember(Name="executeCycle", EmitDefaultValue=false)]
        public double ExecuteCycle { get; set; }

        /// <summary>
        /// Trigger autoforecast threshold
        /// </summary>
        /// <value>Trigger autoforecast threshold</value>
        [DataMember(Name="triggerThreshold", EmitDefaultValue=true)]
        public string TriggerThreshold { get; set; }

        /// <summary>
        /// Trigger cancel autoforecast threshold
        /// </summary>
        /// <value>Trigger cancel autoforecast threshold</value>
        [DataMember(Name="triggerCancelThreshold", EmitDefaultValue=true)]
        public string TriggerCancelThreshold { get; set; }

        /// <summary>
        /// Timed forecast cycles
        /// </summary>
        /// <value>Timed forecast cycles</value>
        [DataMember(Name="continuesCycle", EmitDefaultValue=false)]
        public double ContinuesCycle { get; set; }

        /// <summary>
        /// Previous hours
        /// </summary>
        /// <value>Previous hours</value>
        [DataMember(Name="previousHours", EmitDefaultValue=false)]
        public double PreviousHours { get; set; }

        /// <summary>
        /// Forecast hours
        /// </summary>
        /// <value>Forecast hours</value>
        [DataMember(Name="forecastHours", EmitDefaultValue=false)]
        public double ForecastHours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  ExecuteCycle: ").Append(ExecuteCycle).Append("\n");
            sb.Append("  TriggerThreshold: ").Append(TriggerThreshold).Append("\n");
            sb.Append("  TriggerCancelThreshold: ").Append(TriggerCancelThreshold).Append("\n");
            sb.Append("  ContinuesCycle: ").Append(ContinuesCycle).Append("\n");
            sb.Append("  PreviousHours: ").Append(PreviousHours).Append("\n");
            sb.Append("  ForecastHours: ").Append(ForecastHours).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  LibraryType: ").Append(LibraryType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo);
        }

        /// <summary>
        /// Returns true if DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DhiDssScenarioComputeDaprServicesDtosAutoForecastInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    this.TriggerType.Equals(input.TriggerType)
                ) && 
                (
                    this.ExecuteCycle == input.ExecuteCycle ||
                    this.ExecuteCycle.Equals(input.ExecuteCycle)
                ) && 
                (
                    this.TriggerThreshold == input.TriggerThreshold ||
                    (this.TriggerThreshold != null &&
                    this.TriggerThreshold.Equals(input.TriggerThreshold))
                ) && 
                (
                    this.TriggerCancelThreshold == input.TriggerCancelThreshold ||
                    (this.TriggerCancelThreshold != null &&
                    this.TriggerCancelThreshold.Equals(input.TriggerCancelThreshold))
                ) && 
                (
                    this.ContinuesCycle == input.ContinuesCycle ||
                    this.ContinuesCycle.Equals(input.ContinuesCycle)
                ) && 
                (
                    this.PreviousHours == input.PreviousHours ||
                    this.PreviousHours.Equals(input.PreviousHours)
                ) && 
                (
                    this.ForecastHours == input.ForecastHours ||
                    this.ForecastHours.Equals(input.ForecastHours)
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    this.BusinessType.Equals(input.BusinessType)
                ) && 
                (
                    this.LibraryType == input.LibraryType ||
                    this.LibraryType.Equals(input.LibraryType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                hashCode = hashCode * 59 + this.TriggerType.GetHashCode();
                hashCode = hashCode * 59 + this.ExecuteCycle.GetHashCode();
                if (this.TriggerThreshold != null)
                    hashCode = hashCode * 59 + this.TriggerThreshold.GetHashCode();
                if (this.TriggerCancelThreshold != null)
                    hashCode = hashCode * 59 + this.TriggerCancelThreshold.GetHashCode();
                hashCode = hashCode * 59 + this.ContinuesCycle.GetHashCode();
                hashCode = hashCode * 59 + this.PreviousHours.GetHashCode();
                hashCode = hashCode * 59 + this.ForecastHours.GetHashCode();
                hashCode = hashCode * 59 + this.BusinessType.GetHashCode();
                hashCode = hashCode * 59 + this.LibraryType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
