/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// 河网补水量/调度统计
    /// </summary>
    [DataContract]
    public partial class ModelResultRiverControlStatisticOutput :  IEquatable<ModelResultRiverControlStatisticOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelResultRiverControlStatisticOutput" /> class.
        /// </summary>
        /// <param name="assetName">坝/闸/泵名称 control name.</param>
        /// <param name="nodeType">类型：pump 泵，dam 坝，gate闸 type:pump,dam,gate.</param>
        /// <param name="dataItem">最高（低）控制水位/开停次数 开启时长/补水时长 补水总量  data type (maximum (low) control water level/number of starts and stops/Start duration/water make-up duration/Total water make-up).</param>
        /// <param name="value">结果值 value.</param>
        public ModelResultRiverControlStatisticOutput(string assetName = default(string), string nodeType = default(string), int dataItem = default(int), double value = default(double))
        {
            this.AssetName = assetName;
            this.NodeType = nodeType;
            this.DataItem = dataItem;
            this.Value = value;
        }
        
        /// <summary>
        /// 坝/闸/泵名称 control name
        /// </summary>
        /// <value>坝/闸/泵名称 control name</value>
        [DataMember(Name="assetName", EmitDefaultValue=true)]
        public string AssetName { get; set; }

        /// <summary>
        /// 类型：pump 泵，dam 坝，gate闸 type:pump,dam,gate
        /// </summary>
        /// <value>类型：pump 泵，dam 坝，gate闸 type:pump,dam,gate</value>
        [DataMember(Name="nodeType", EmitDefaultValue=true)]
        public string NodeType { get; set; }

        /// <summary>
        /// 最高（低）控制水位/开停次数 开启时长/补水时长 补水总量  data type (maximum (low) control water level/number of starts and stops/Start duration/water make-up duration/Total water make-up)
        /// </summary>
        /// <value>最高（低）控制水位/开停次数 开启时长/补水时长 补水总量  data type (maximum (low) control water level/number of starts and stops/Start duration/water make-up duration/Total water make-up)</value>
        [DataMember(Name="dataItem", EmitDefaultValue=false)]
        public int DataItem { get; set; }

        /// <summary>
        /// 结果值 value
        /// </summary>
        /// <value>结果值 value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelResultRiverControlStatisticOutput {\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  DataItem: ").Append(DataItem).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelResultRiverControlStatisticOutput);
        }

        /// <summary>
        /// Returns true if ModelResultRiverControlStatisticOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelResultRiverControlStatisticOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelResultRiverControlStatisticOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.NodeType == input.NodeType ||
                    (this.NodeType != null &&
                    this.NodeType.Equals(input.NodeType))
                ) && 
                (
                    this.DataItem == input.DataItem ||
                    this.DataItem.Equals(input.DataItem)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetName != null)
                    hashCode = hashCode * 59 + this.AssetName.GetHashCode();
                if (this.NodeType != null)
                    hashCode = hashCode * 59 + this.NodeType.GetHashCode();
                hashCode = hashCode * 59 + this.DataItem.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
