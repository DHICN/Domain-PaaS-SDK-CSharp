/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.Infrastrcuture.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.Infrastrcuture.Model
{
    /// <summary>
    /// AlarmLogInput
    /// </summary>
    [DataContract]
    public partial class AlarmLogInput :  IEquatable<AlarmLogInput>, IValidatableObject
    {
        /// <summary>
        /// Defines AlarmTypes
        /// </summary>
        public enum AlarmTypesEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2

        }


        /// <summary>
        /// 消息类型 alarm type
        /// </summary>
        /// <value>消息类型 alarm type</value>
        [DataMember(Name="alarmTypes", EmitDefaultValue=true)]
        public List<AlarmTypesEnum> AlarmTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlarmLogInput" /> class.
        /// </summary>
        /// <param name="startTime">开始时间 start time.</param>
        /// <param name="endTime">结束时间 end time.</param>
        /// <param name="alarmTypes">消息类型 alarm type.</param>
        /// <param name="isNationalStandard">是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1.</param>
        public AlarmLogInput(DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), List<AlarmTypesEnum> alarmTypes = default(List<AlarmTypesEnum>), bool? isNationalStandard = default(bool?))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.AlarmTypes = alarmTypes;
            this.IsNationalStandard = isNationalStandard;
        }
        
        /// <summary>
        /// 开始时间 start time
        /// </summary>
        /// <value>开始时间 start time</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// 结束时间 end time
        /// </summary>
        /// <value>结束时间 end time</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// 是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1
        /// </summary>
        /// <value>是否获取国标 true indicates grade&#x3D;1, and false indicates grade!&#x3D;1</value>
        [DataMember(Name="isNationalStandard", EmitDefaultValue=true)]
        public bool? IsNationalStandard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlarmLogInput {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  AlarmTypes: ").Append(AlarmTypes).Append("\n");
            sb.Append("  IsNationalStandard: ").Append(IsNationalStandard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlarmLogInput);
        }

        /// <summary>
        /// Returns true if AlarmLogInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AlarmLogInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlarmLogInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.AlarmTypes == input.AlarmTypes ||
                    this.AlarmTypes.SequenceEqual(input.AlarmTypes)
                ) && 
                (
                    this.IsNationalStandard == input.IsNationalStandard ||
                    (this.IsNationalStandard != null &&
                    this.IsNationalStandard.Equals(input.IsNationalStandard))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                hashCode = hashCode * 59 + this.AlarmTypes.GetHashCode();
                if (this.IsNationalStandard != null)
                    hashCode = hashCode * 59 + this.IsNationalStandard.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
