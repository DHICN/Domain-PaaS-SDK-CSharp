/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// ButtonPerUnderMenuOutput
    /// </summary>
    [DataContract]
    public partial class ButtonPerUnderMenuOutput :  IEquatable<ButtonPerUnderMenuOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ButtonPerUnderMenuOutput" /> class.
        /// </summary>
        /// <param name="menuId">菜单Id memu id.</param>
        /// <param name="menuLabel">菜单名称 menu label.</param>
        /// <param name="buttonPers">菜单下的按钮权限 button permissions of the menu.</param>
        public ButtonPerUnderMenuOutput(Guid menuId = default(Guid), string menuLabel = default(string), List<ButtonPer> buttonPers = default(List<ButtonPer>))
        {
            this.MenuId = menuId;
            this.MenuLabel = menuLabel;
            this.ButtonPers = buttonPers;
        }
        
        /// <summary>
        /// 菜单Id memu id
        /// </summary>
        /// <value>菜单Id memu id</value>
        [DataMember(Name="menuId", EmitDefaultValue=false)]
        public Guid MenuId { get; set; }

        /// <summary>
        /// 菜单名称 menu label
        /// </summary>
        /// <value>菜单名称 menu label</value>
        [DataMember(Name="menuLabel", EmitDefaultValue=true)]
        public string MenuLabel { get; set; }

        /// <summary>
        /// 菜单下的按钮权限 button permissions of the menu
        /// </summary>
        /// <value>菜单下的按钮权限 button permissions of the menu</value>
        [DataMember(Name="buttonPers", EmitDefaultValue=true)]
        public List<ButtonPer> ButtonPers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ButtonPerUnderMenuOutput {\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  MenuLabel: ").Append(MenuLabel).Append("\n");
            sb.Append("  ButtonPers: ").Append(ButtonPers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ButtonPerUnderMenuOutput);
        }

        /// <summary>
        /// Returns true if ButtonPerUnderMenuOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ButtonPerUnderMenuOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ButtonPerUnderMenuOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.MenuLabel == input.MenuLabel ||
                    (this.MenuLabel != null &&
                    this.MenuLabel.Equals(input.MenuLabel))
                ) && 
                (
                    this.ButtonPers == input.ButtonPers ||
                    this.ButtonPers != null &&
                    input.ButtonPers != null &&
                    this.ButtonPers.SequenceEqual(input.ButtonPers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.MenuLabel != null)
                    hashCode = hashCode * 59 + this.MenuLabel.GetHashCode();
                if (this.ButtonPers != null)
                    hashCode = hashCode * 59 + this.ButtonPers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
