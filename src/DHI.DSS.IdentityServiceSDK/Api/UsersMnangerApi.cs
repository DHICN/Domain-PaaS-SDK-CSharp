/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.IdentityServiceSDK.Client;
using DHI.DSS.IdentityServiceSDK.Model;

namespace DHI.DSS.IdentityServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersMnangerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 查询超级用户 Query super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>QuerySuperUsersOutputPage</returns>
        Result<QuerySuperUsersOutputPage> ApiAppUsersMnangerQuerySuperUsersPost (QueryUsersInput queryUsersInput = default(QueryUsersInput));

        /// <summary>
        /// 查询超级用户 Query super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>ApiResponse of QuerySuperUsersOutputPage</returns>
        ApiResponse<Result<QuerySuperUsersOutputPage>> ApiAppUsersMnangerQuerySuperUsersPostWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput));
        /// <summary>
        /// 查询用户 Query user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>QueryUsersOutputPage</returns>
        Result<QueryUsersOutputPage> ApiAppUsersMnangerQueryUsersPost (QueryUsersInput queryUsersInput = default(QueryUsersInput));

        /// <summary>
        /// 查询用户 Query user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>ApiResponse of QueryUsersOutputPage</returns>
        ApiResponse<Result<QueryUsersOutputPage>> ApiAppUsersMnangerQueryUsersPostWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput));
        /// <summary>
        /// 重置密码 Reset password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerResetPasswordPost (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput));

        /// <summary>
        /// 重置密码 Reset password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerResetPasswordPostWithHttpInfo (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput));
        /// <summary>
        /// 添加超级用户 Add super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerSuperUserPost (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput));

        /// <summary>
        /// 添加超级用户 Add super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerSuperUserPostWithHttpInfo (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput));
        /// <summary>
        /// 更新超级用户 Update super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerSuperUserPut (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput));

        /// <summary>
        /// 更新超级用户 Update super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerSuperUserPutWithHttpInfo (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput));
        /// <summary>
        /// 启用/停用用户 Enable / Disable users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerUserOperPost (UserOperInput userOperInput = default(UserOperInput));

        /// <summary>
        /// 启用/停用用户 Enable / Disable users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerUserOperPostWithHttpInfo (UserOperInput userOperInput = default(UserOperInput));
        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUserPersOutput</returns>
        Result<GetUserPersOutput> ApiAppUsersMnangerUserPersGet ();

        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUserPersOutput</returns>
        ApiResponse<Result<GetUserPersOutput>> ApiAppUsersMnangerUserPersGetWithHttpInfo ();
        /// <summary>
        /// 添加用户 Add user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerUserPost (AddUserInput addUserInput = default(AddUserInput));

        /// <summary>
        /// 添加用户 Add user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerUserPostWithHttpInfo (AddUserInput addUserInput = default(AddUserInput));
        /// <summary>
        /// 更新用户 Update user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerUserPut (UpdateUserInput updateUserInput = default(UpdateUserInput));

        /// <summary>
        /// 更新用户 Update user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerUserPutWithHttpInfo (UpdateUserInput updateUserInput = default(UpdateUserInput));
        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>QueryUsersWithOrganziationOutput</returns>
        Result<QueryUsersWithOrganziationOutput> ApiAppUsersMnangerUserUserIdGet (string userId);

        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of QueryUsersWithOrganziationOutput</returns>
        ApiResponse<Result<QueryUsersWithOrganziationOutput>> ApiAppUsersMnangerUserUserIdGetWithHttpInfo (string userId);
        /// <summary>
        /// 删除用户 Delete user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppUsersMnangerUsersDelete (List<string> ids);

        /// <summary>
        /// 删除用户 Delete user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppUsersMnangerUsersDeleteWithHttpInfo (List<string> ids);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersMnangerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 查询超级用户 Query super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of QuerySuperUsersOutputPage</returns>
        System.Threading.Tasks.Task<Result<QuerySuperUsersOutputPage>> ApiAppUsersMnangerQuerySuperUsersPostAsync (QueryUsersInput queryUsersInput = default(QueryUsersInput));

        /// <summary>
        /// 查询超级用户 Query super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of ApiResponse (QuerySuperUsersOutputPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<QuerySuperUsersOutputPage>>> ApiAppUsersMnangerQuerySuperUsersPostAsyncWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput));
        /// <summary>
        /// 查询用户 Query user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of QueryUsersOutputPage</returns>
        System.Threading.Tasks.Task<Result<QueryUsersOutputPage>> ApiAppUsersMnangerQueryUsersPostAsync (QueryUsersInput queryUsersInput = default(QueryUsersInput));

        /// <summary>
        /// 查询用户 Query user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of ApiResponse (QueryUsersOutputPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<QueryUsersOutputPage>>> ApiAppUsersMnangerQueryUsersPostAsyncWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput));
        /// <summary>
        /// 重置密码 Reset password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerResetPasswordPostAsync (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput));

        /// <summary>
        /// 重置密码 Reset password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerResetPasswordPostAsyncWithHttpInfo (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput));
        /// <summary>
        /// 添加超级用户 Add super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerSuperUserPostAsync (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput));

        /// <summary>
        /// 添加超级用户 Add super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerSuperUserPostAsyncWithHttpInfo (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput));
        /// <summary>
        /// 更新超级用户 Update super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerSuperUserPutAsync (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput));

        /// <summary>
        /// 更新超级用户 Update super user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerSuperUserPutAsyncWithHttpInfo (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput));
        /// <summary>
        /// 启用/停用用户 Enable / Disable users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUserOperPostAsync (UserOperInput userOperInput = default(UserOperInput));

        /// <summary>
        /// 启用/停用用户 Enable / Disable users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerUserOperPostAsyncWithHttpInfo (UserOperInput userOperInput = default(UserOperInput));
        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUserPersOutput</returns>
        System.Threading.Tasks.Task<Result<GetUserPersOutput>> ApiAppUsersMnangerUserPersGetAsync ();

        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUserPersOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<GetUserPersOutput>>> ApiAppUsersMnangerUserPersGetAsyncWithHttpInfo ();
        /// <summary>
        /// 添加用户 Add user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUserPostAsync (AddUserInput addUserInput = default(AddUserInput));

        /// <summary>
        /// 添加用户 Add user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerUserPostAsyncWithHttpInfo (AddUserInput addUserInput = default(AddUserInput));
        /// <summary>
        /// 更新用户 Update user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUserPutAsync (UpdateUserInput updateUserInput = default(UpdateUserInput));

        /// <summary>
        /// 更新用户 Update user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerUserPutAsyncWithHttpInfo (UpdateUserInput updateUserInput = default(UpdateUserInput));
        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of QueryUsersWithOrganziationOutput</returns>
        System.Threading.Tasks.Task<Result<QueryUsersWithOrganziationOutput>> ApiAppUsersMnangerUserUserIdGetAsync (string userId);

        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (QueryUsersWithOrganziationOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<QueryUsersWithOrganziationOutput>>> ApiAppUsersMnangerUserUserIdGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// 删除用户 Delete user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUsersDeleteAsync (List<string> ids);

        /// <summary>
        /// 删除用户 Delete user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppUsersMnangerUsersDeleteAsyncWithHttpInfo (List<string> ids);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersMnangerApi : IUsersMnangerApiSync, IUsersMnangerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersMnangerApi : IUsersMnangerApi
    {
        private DHI.DSS.IdentityServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersMnangerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersMnangerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersMnangerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersMnangerApi(String basePath)
        {
            this.Configuration = DHI.DSS.IdentityServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.IdentityServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.IdentityServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersMnangerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersMnangerApi(DHI.DSS.IdentityServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.IdentityServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.IdentityServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersMnangerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersMnangerApi(DHI.DSS.IdentityServiceSDK.Client.ISynchronousClient client,DHI.DSS.IdentityServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.IdentityServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.IdentityServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 查询超级用户 Query super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>QuerySuperUsersOutputPage</returns>
        public Result<QuerySuperUsersOutputPage> ApiAppUsersMnangerQuerySuperUsersPost (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QuerySuperUsersOutputPage>> localVarResponse = ApiAppUsersMnangerQuerySuperUsersPostWithHttpInfo(queryUsersInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询超级用户 Query super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>ApiResponse of QuerySuperUsersOutputPage</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< QuerySuperUsersOutputPage >> ApiAppUsersMnangerQuerySuperUsersPostWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = queryUsersInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< QuerySuperUsersOutputPage >>("/api/app/usersMnanger/querySuperUsers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerQuerySuperUsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询超级用户 Query super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of QuerySuperUsersOutputPage</returns>
        public async System.Threading.Tasks.Task<Result<QuerySuperUsersOutputPage>> ApiAppUsersMnangerQuerySuperUsersPostAsync (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QuerySuperUsersOutputPage>> localVarResponse = await ApiAppUsersMnangerQuerySuperUsersPostAsyncWithHttpInfo(queryUsersInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询超级用户 Query super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of ApiResponse (QuerySuperUsersOutputPage)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QuerySuperUsersOutputPage>>> ApiAppUsersMnangerQuerySuperUsersPostAsyncWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = queryUsersInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<QuerySuperUsersOutputPage>>("/api/app/usersMnanger/querySuperUsers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerQuerySuperUsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询用户 Query user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>QueryUsersOutputPage</returns>
        public Result<QueryUsersOutputPage> ApiAppUsersMnangerQueryUsersPost (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QueryUsersOutputPage>> localVarResponse = ApiAppUsersMnangerQueryUsersPostWithHttpInfo(queryUsersInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询用户 Query user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>ApiResponse of QueryUsersOutputPage</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< QueryUsersOutputPage >> ApiAppUsersMnangerQueryUsersPostWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = queryUsersInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< QueryUsersOutputPage >>("/api/app/usersMnanger/queryUsers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerQueryUsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询用户 Query user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of QueryUsersOutputPage</returns>
        public async System.Threading.Tasks.Task<Result<QueryUsersOutputPage>> ApiAppUsersMnangerQueryUsersPostAsync (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QueryUsersOutputPage>> localVarResponse = await ApiAppUsersMnangerQueryUsersPostAsyncWithHttpInfo(queryUsersInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询用户 Query user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryUsersInput"> (optional)</param>
        /// <returns>Task of ApiResponse (QueryUsersOutputPage)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QueryUsersOutputPage>>> ApiAppUsersMnangerQueryUsersPostAsyncWithHttpInfo (QueryUsersInput queryUsersInput = default(QueryUsersInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = queryUsersInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<QueryUsersOutputPage>>("/api/app/usersMnanger/queryUsers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerQueryUsersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 重置密码 Reset password 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerResetPasswordPost (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerResetPasswordPostWithHttpInfo(resetPasswordInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 重置密码 Reset password 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerResetPasswordPostWithHttpInfo (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = resetPasswordInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/usersMnanger/resetPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerResetPasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 重置密码 Reset password 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerResetPasswordPostAsync (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerResetPasswordPostAsyncWithHttpInfo(resetPasswordInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 重置密码 Reset password 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerResetPasswordPostAsyncWithHttpInfo (ResetPasswordInput resetPasswordInput = default(ResetPasswordInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = resetPasswordInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/usersMnanger/resetPassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerResetPasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加超级用户 Add super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerSuperUserPost (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerSuperUserPostWithHttpInfo(addSuperUserInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加超级用户 Add super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerSuperUserPostWithHttpInfo (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addSuperUserInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/usersMnanger/superUser", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerSuperUserPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加超级用户 Add super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerSuperUserPostAsync (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerSuperUserPostAsyncWithHttpInfo(addSuperUserInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加超级用户 Add super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addSuperUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerSuperUserPostAsyncWithHttpInfo (AddSuperUserInput addSuperUserInput = default(AddSuperUserInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = addSuperUserInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/usersMnanger/superUser", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerSuperUserPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新超级用户 Update super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerSuperUserPut (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerSuperUserPutWithHttpInfo(updateSuperUserInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新超级用户 Update super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerSuperUserPutWithHttpInfo (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateSuperUserInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Result< Object >>("/api/app/usersMnanger/superUser", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerSuperUserPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新超级用户 Update super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerSuperUserPutAsync (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerSuperUserPutAsyncWithHttpInfo(updateSuperUserInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新超级用户 Update super user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSuperUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerSuperUserPutAsyncWithHttpInfo (UpdateSuperUserInput updateSuperUserInput = default(UpdateSuperUserInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateSuperUserInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Result<Object>>("/api/app/usersMnanger/superUser", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerSuperUserPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 启用/停用用户 Enable / Disable users 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerUserOperPost (UserOperInput userOperInput = default(UserOperInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerUserOperPostWithHttpInfo(userOperInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 启用/停用用户 Enable / Disable users 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerUserOperPostWithHttpInfo (UserOperInput userOperInput = default(UserOperInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userOperInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/usersMnanger/userOper", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserOperPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 启用/停用用户 Enable / Disable users 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUserOperPostAsync (UserOperInput userOperInput = default(UserOperInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerUserOperPostAsyncWithHttpInfo(userOperInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 启用/停用用户 Enable / Disable users 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userOperInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerUserOperPostAsyncWithHttpInfo (UserOperInput userOperInput = default(UserOperInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = userOperInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/usersMnanger/userOper", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserOperPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUserPersOutput</returns>
        public Result<GetUserPersOutput> ApiAppUsersMnangerUserPersGet ()
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<GetUserPersOutput>> localVarResponse = ApiAppUsersMnangerUserPersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUserPersOutput</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< GetUserPersOutput >> ApiAppUsersMnangerUserPersGetWithHttpInfo ()
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< GetUserPersOutput >>("/api/app/usersMnanger/userPers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserPersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUserPersOutput</returns>
        public async System.Threading.Tasks.Task<Result<GetUserPersOutput>> ApiAppUsersMnangerUserPersGetAsync ()
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<GetUserPersOutput>> localVarResponse = await ApiAppUsersMnangerUserPersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过Token获取登录用户-权限信息 Obtain login user permission information through token 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUserPersOutput)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<GetUserPersOutput>>> ApiAppUsersMnangerUserPersGetAsyncWithHttpInfo ()
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<GetUserPersOutput>>("/api/app/usersMnanger/userPers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserPersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加用户 Add user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerUserPost (AddUserInput addUserInput = default(AddUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerUserPostWithHttpInfo(addUserInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加用户 Add user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerUserPostWithHttpInfo (AddUserInput addUserInput = default(AddUserInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addUserInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/usersMnanger/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加用户 Add user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUserPostAsync (AddUserInput addUserInput = default(AddUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerUserPostAsyncWithHttpInfo(addUserInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加用户 Add user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerUserPostAsyncWithHttpInfo (AddUserInput addUserInput = default(AddUserInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = addUserInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/usersMnanger/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新用户 Update user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerUserPut (UpdateUserInput updateUserInput = default(UpdateUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerUserPutWithHttpInfo(updateUserInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新用户 Update user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerUserPutWithHttpInfo (UpdateUserInput updateUserInput = default(UpdateUserInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateUserInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Result< Object >>("/api/app/usersMnanger/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新用户 Update user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUserPutAsync (UpdateUserInput updateUserInput = default(UpdateUserInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerUserPutAsyncWithHttpInfo(updateUserInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新用户 Update user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateUserInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerUserPutAsyncWithHttpInfo (UpdateUserInput updateUserInput = default(UpdateUserInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateUserInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Result<Object>>("/api/app/usersMnanger/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>QueryUsersWithOrganziationOutput</returns>
        public Result<QueryUsersWithOrganziationOutput> ApiAppUsersMnangerUserUserIdGet (string userId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QueryUsersWithOrganziationOutput>> localVarResponse = ApiAppUsersMnangerUserUserIdGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of QueryUsersWithOrganziationOutput</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< QueryUsersWithOrganziationOutput >> ApiAppUsersMnangerUserUserIdGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersMnangerApi->ApiAppUsersMnangerUserUserIdGet");

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< QueryUsersWithOrganziationOutput >>("/api/app/usersMnanger/user/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserUserIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of QueryUsersWithOrganziationOutput</returns>
        public async System.Threading.Tasks.Task<Result<QueryUsersWithOrganziationOutput>> ApiAppUsersMnangerUserUserIdGetAsync (string userId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QueryUsersWithOrganziationOutput>> localVarResponse = await ApiAppUsersMnangerUserUserIdGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过用户id获取用户信息 get user information by userid 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (QueryUsersWithOrganziationOutput)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<QueryUsersWithOrganziationOutput>>> ApiAppUsersMnangerUserUserIdGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'userId' when calling UsersMnangerApi->ApiAppUsersMnangerUserUserIdGet");


            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("userId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<QueryUsersWithOrganziationOutput>>("/api/app/usersMnanger/user/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUserUserIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除用户 Delete user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppUsersMnangerUsersDelete (List<string> ids)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppUsersMnangerUsersDeleteWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 删除用户 Delete user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppUsersMnangerUsersDeleteWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'ids' when calling UsersMnangerApi->ApiAppUsersMnangerUsersDelete");

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToMultiMap("multi", "Ids", ids));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Result< Object >>("/api/app/usersMnanger/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUsersDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除用户 Delete user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppUsersMnangerUsersDeleteAsync (List<string> ids)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppUsersMnangerUsersDeleteAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 删除用户 Delete user 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppUsersMnangerUsersDeleteAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'ids' when calling UsersMnangerApi->ApiAppUsersMnangerUsersDelete");


            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToMultiMap("multi", "Ids", ids));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Result<Object>>("/api/app/usersMnanger/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppUsersMnangerUsersDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
