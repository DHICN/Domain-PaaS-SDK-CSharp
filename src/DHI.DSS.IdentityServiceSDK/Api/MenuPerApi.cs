/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.IdentityServiceSDK.Client;
using DHI.DSS.IdentityServiceSDK.Model;

namespace DHI.DSS.IdentityServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuPerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 添加按钮权限 Add button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerButtonPerPost (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput));

        /// <summary>
        /// 添加按钮权限 Add button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerButtonPerPostWithHttpInfo (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput));
        /// <summary>
        /// 更新按钮权限 Update button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerButtonPerPut (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput));

        /// <summary>
        /// 更新按钮权限 Update button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerButtonPerPutWithHttpInfo (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput));
        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>List&lt;ButtonPer&gt;</returns>
        Result<List<ButtonPer>> ApiAppMenuPerButtonPerUnderRolePost (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput));

        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ButtonPer&gt;</returns>
        ApiResponse<Result<List<ButtonPer>>> ApiAppMenuPerButtonPerUnderRolePostWithHttpInfo (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput));
        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>List&lt;ButtonPerUnderMenuOutput&gt;</returns>
        Result<List<ButtonPerUnderMenuOutput>> ApiAppMenuPerButtonPersUnderMenuPost (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput));

        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ButtonPerUnderMenuOutput&gt;</returns>
        ApiResponse<Result<List<ButtonPerUnderMenuOutput>>> ApiAppMenuPerButtonPersUnderMenuPostWithHttpInfo (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput));
        /// <summary>
        /// /api/app/menuPer/copyMenuPer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerCopyMenuPerPost (CopyMenuInput copyMenuInput = default(CopyMenuInput));

        /// <summary>
        /// /api/app/menuPer/copyMenuPer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerCopyMenuPerPostWithHttpInfo (CopyMenuInput copyMenuInput = default(CopyMenuInput));
        /// <summary>
        /// 赋予角色权限 Grant role permissions
        /// </summary>
        /// <remarks>
        /// 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerGrantPerPost (GrantPerInput grantPerInput = default(GrantPerInput));

        /// <summary>
        /// 赋予角色权限 Grant role permissions
        /// </summary>
        /// <remarks>
        /// 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerGrantPerPostWithHttpInfo (GrantPerInput grantPerInput = default(GrantPerInput));
        /// <summary>
        /// 获取权限详细信息 Get permission details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>PerDetailsOutput</returns>
        Result<PerDetailsOutput> ApiAppMenuPerIdPerDetailsGet (string id);

        /// <summary>
        /// 获取权限详细信息 Get permission details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>ApiResponse of PerDetailsOutput</returns>
        ApiResponse<Result<PerDetailsOutput>> ApiAppMenuPerIdPerDetailsGetWithHttpInfo (string id);
        /// <summary>
        /// 添加菜单权限 Add menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerMenuPerPost (AddMenuInput addMenuInput = default(AddMenuInput));

        /// <summary>
        /// 添加菜单权限 Add menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerMenuPerPostWithHttpInfo (AddMenuInput addMenuInput = default(AddMenuInput));
        /// <summary>
        /// 更新菜单权限 Update menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerMenuPerPut (UpdateMenuInput updateMenuInput = default(UpdateMenuInput));

        /// <summary>
        /// 更新菜单权限 Update menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerMenuPerPutWithHttpInfo (UpdateMenuInput updateMenuInput = default(UpdateMenuInput));
        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>List&lt;MenuPerTree&gt;</returns>
        Result<List<MenuPerTree>> ApiAppMenuPerMenuPersTreeSystemIdPost (string systemId);

        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>ApiResponse of List&lt;MenuPerTree&gt;</returns>
        ApiResponse<Result<List<MenuPerTree>>> ApiAppMenuPerMenuPersTreeSystemIdPostWithHttpInfo (string systemId);
        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role
        /// </summary>
        /// <remarks>
        /// 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>List&lt;MenuPerTree&gt;</returns>
        Result<List<MenuPerTree>> ApiAppMenuPerMenuPersUnderRoleRoleIdPost (string roleId);

        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role
        /// </summary>
        /// <remarks>
        /// 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>ApiResponse of List&lt;MenuPerTree&gt;</returns>
        ApiResponse<Result<List<MenuPerTree>>> ApiAppMenuPerMenuPersUnderRoleRoleIdPostWithHttpInfo (string roleId);
        /// <summary>
        /// 角色拥有的权限明细
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>List&lt;PermissionTree&gt;</returns>
        Result<List<PermissionTree>> ApiAppMenuPerPerDetailUnderRolePost (List<string> requestBody = default(List<string>));

        /// <summary>
        /// 角色拥有的权限明细
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PermissionTree&gt;</returns>
        ApiResponse<Result<List<PermissionTree>>> ApiAppMenuPerPerDetailUnderRolePostWithHttpInfo (List<string> requestBody = default(List<string>));
        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMenuPerPerPerIdDelete (string perId);

        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMenuPerPerPerIdDeleteWithHttpInfo (string perId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuPerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 添加按钮权限 Add button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerButtonPerPostAsync (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput));

        /// <summary>
        /// 添加按钮权限 Add button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerButtonPerPostAsyncWithHttpInfo (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput));
        /// <summary>
        /// 更新按钮权限 Update button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerButtonPerPutAsync (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput));

        /// <summary>
        /// 更新按钮权限 Update button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerButtonPerPutAsyncWithHttpInfo (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput));
        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>Task of List&lt;ButtonPer&gt;</returns>
        System.Threading.Tasks.Task<Result<List<ButtonPer>>> ApiAppMenuPerButtonPerUnderRolePostAsync (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput));

        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ButtonPer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<ButtonPer>>>> ApiAppMenuPerButtonPerUnderRolePostAsyncWithHttpInfo (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput));
        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>Task of List&lt;ButtonPerUnderMenuOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<ButtonPerUnderMenuOutput>>> ApiAppMenuPerButtonPersUnderMenuPostAsync (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput));

        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ButtonPerUnderMenuOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<ButtonPerUnderMenuOutput>>>> ApiAppMenuPerButtonPersUnderMenuPostAsyncWithHttpInfo (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput));
        /// <summary>
        /// /api/app/menuPer/copyMenuPer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerCopyMenuPerPostAsync (CopyMenuInput copyMenuInput = default(CopyMenuInput));

        /// <summary>
        /// /api/app/menuPer/copyMenuPer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerCopyMenuPerPostAsyncWithHttpInfo (CopyMenuInput copyMenuInput = default(CopyMenuInput));
        /// <summary>
        /// 赋予角色权限 Grant role permissions
        /// </summary>
        /// <remarks>
        /// 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerGrantPerPostAsync (GrantPerInput grantPerInput = default(GrantPerInput));

        /// <summary>
        /// 赋予角色权限 Grant role permissions
        /// </summary>
        /// <remarks>
        /// 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerGrantPerPostAsyncWithHttpInfo (GrantPerInput grantPerInput = default(GrantPerInput));
        /// <summary>
        /// 获取权限详细信息 Get permission details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>Task of PerDetailsOutput</returns>
        System.Threading.Tasks.Task<Result<PerDetailsOutput>> ApiAppMenuPerIdPerDetailsGetAsync (string id);

        /// <summary>
        /// 获取权限详细信息 Get permission details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>Task of ApiResponse (PerDetailsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<PerDetailsOutput>>> ApiAppMenuPerIdPerDetailsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 添加菜单权限 Add menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerMenuPerPostAsync (AddMenuInput addMenuInput = default(AddMenuInput));

        /// <summary>
        /// 添加菜单权限 Add menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerMenuPerPostAsyncWithHttpInfo (AddMenuInput addMenuInput = default(AddMenuInput));
        /// <summary>
        /// 更新菜单权限 Update menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerMenuPerPutAsync (UpdateMenuInput updateMenuInput = default(UpdateMenuInput));

        /// <summary>
        /// 更新菜单权限 Update menu permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerMenuPerPutAsyncWithHttpInfo (UpdateMenuInput updateMenuInput = default(UpdateMenuInput));
        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>Task of List&lt;MenuPerTree&gt;</returns>
        System.Threading.Tasks.Task<Result<List<MenuPerTree>>> ApiAppMenuPerMenuPersTreeSystemIdPostAsync (string systemId);

        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>Task of ApiResponse (List&lt;MenuPerTree&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<MenuPerTree>>>> ApiAppMenuPerMenuPersTreeSystemIdPostAsyncWithHttpInfo (string systemId);
        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role
        /// </summary>
        /// <remarks>
        /// 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>Task of List&lt;MenuPerTree&gt;</returns>
        System.Threading.Tasks.Task<Result<List<MenuPerTree>>> ApiAppMenuPerMenuPersUnderRoleRoleIdPostAsync (string roleId);

        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role
        /// </summary>
        /// <remarks>
        /// 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>Task of ApiResponse (List&lt;MenuPerTree&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<MenuPerTree>>>> ApiAppMenuPerMenuPersUnderRoleRoleIdPostAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// 角色拥有的权限明细
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of List&lt;PermissionTree&gt;</returns>
        System.Threading.Tasks.Task<Result<List<PermissionTree>>> ApiAppMenuPerPerDetailUnderRolePostAsync (List<string> requestBody = default(List<string>));

        /// <summary>
        /// 角色拥有的权限明细
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PermissionTree&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<PermissionTree>>>> ApiAppMenuPerPerDetailUnderRolePostAsyncWithHttpInfo (List<string> requestBody = default(List<string>));
        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerPerPerIdDeleteAsync (string perId);

        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMenuPerPerPerIdDeleteAsyncWithHttpInfo (string perId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuPerApi : IMenuPerApiSync, IMenuPerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuPerApi : IMenuPerApi
    {
        private DHI.DSS.IdentityServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuPerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuPerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuPerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuPerApi(String basePath)
        {
            this.Configuration = DHI.DSS.IdentityServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.IdentityServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.IdentityServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuPerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuPerApi(DHI.DSS.IdentityServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.IdentityServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.IdentityServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.IdentityServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuPerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MenuPerApi(DHI.DSS.IdentityServiceSDK.Client.ISynchronousClient client,DHI.DSS.IdentityServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.IdentityServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.IdentityServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.IdentityServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.IdentityServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 添加按钮权限 Add button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerButtonPerPost (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerButtonPerPostWithHttpInfo(addButtonPerInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加按钮权限 Add button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerButtonPerPostWithHttpInfo (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addButtonPerInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/menuPer/buttonPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加按钮权限 Add button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerButtonPerPostAsync (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerButtonPerPostAsyncWithHttpInfo(addButtonPerInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加按钮权限 Add button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addButtonPerInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerButtonPerPostAsyncWithHttpInfo (AddButtonPerInput addButtonPerInput = default(AddButtonPerInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = addButtonPerInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/menuPer/buttonPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新按钮权限 Update button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerButtonPerPut (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerButtonPerPutWithHttpInfo(updateButtonPerInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新按钮权限 Update button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerButtonPerPutWithHttpInfo (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateButtonPerInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Result< Object >>("/api/app/menuPer/buttonPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPerPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新按钮权限 Update button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerButtonPerPutAsync (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerButtonPerPutAsyncWithHttpInfo(updateButtonPerInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新按钮权限 Update button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateButtonPerInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerButtonPerPutAsyncWithHttpInfo (UpdateButtonPerInput updateButtonPerInput = default(UpdateButtonPerInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateButtonPerInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Result<Object>>("/api/app/menuPer/buttonPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPerPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>List&lt;ButtonPer&gt;</returns>
        public Result<List<ButtonPer>> ApiAppMenuPerButtonPerUnderRolePost (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<ButtonPer>>> localVarResponse = ApiAppMenuPerButtonPerUnderRolePostWithHttpInfo(buttonPerUnderRoleInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ButtonPer&gt;</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< List<ButtonPer> >> ApiAppMenuPerButtonPerUnderRolePostWithHttpInfo (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = buttonPerUnderRoleInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<ButtonPer> >>("/api/app/menuPer/buttonPerUnderRole", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPerUnderRolePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>Task of List&lt;ButtonPer&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<ButtonPer>>> ApiAppMenuPerButtonPerUnderRolePostAsync (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<ButtonPer>>> localVarResponse = await ApiAppMenuPerButtonPerUnderRolePostAsyncWithHttpInfo(buttonPerUnderRoleInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 角色所拥有的按钮权限 Button permissions of role 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderRoleInput"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ButtonPer&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<ButtonPer>>>> ApiAppMenuPerButtonPerUnderRolePostAsyncWithHttpInfo (ButtonPerUnderRoleInput buttonPerUnderRoleInput = default(ButtonPerUnderRoleInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = buttonPerUnderRoleInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<ButtonPer>>>("/api/app/menuPer/buttonPerUnderRole", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPerUnderRolePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>List&lt;ButtonPerUnderMenuOutput&gt;</returns>
        public Result<List<ButtonPerUnderMenuOutput>> ApiAppMenuPerButtonPersUnderMenuPost (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<ButtonPerUnderMenuOutput>>> localVarResponse = ApiAppMenuPerButtonPersUnderMenuPostWithHttpInfo(buttonPerUnderMenuInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ButtonPerUnderMenuOutput&gt;</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< List<ButtonPerUnderMenuOutput> >> ApiAppMenuPerButtonPersUnderMenuPostWithHttpInfo (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = buttonPerUnderMenuInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<ButtonPerUnderMenuOutput> >>("/api/app/menuPer/buttonPersUnderMenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPersUnderMenuPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>Task of List&lt;ButtonPerUnderMenuOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<ButtonPerUnderMenuOutput>>> ApiAppMenuPerButtonPersUnderMenuPostAsync (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<ButtonPerUnderMenuOutput>>> localVarResponse = await ApiAppMenuPerButtonPersUnderMenuPostAsyncWithHttpInfo(buttonPerUnderMenuInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取菜单下的按钮权限 Get button permissions under the menu 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buttonPerUnderMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ButtonPerUnderMenuOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<ButtonPerUnderMenuOutput>>>> ApiAppMenuPerButtonPersUnderMenuPostAsyncWithHttpInfo (ButtonPerUnderMenuInput buttonPerUnderMenuInput = default(ButtonPerUnderMenuInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = buttonPerUnderMenuInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<ButtonPerUnderMenuOutput>>>("/api/app/menuPer/buttonPersUnderMenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerButtonPersUnderMenuPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// /api/app/menuPer/copyMenuPer 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerCopyMenuPerPost (CopyMenuInput copyMenuInput = default(CopyMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerCopyMenuPerPostWithHttpInfo(copyMenuInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// /api/app/menuPer/copyMenuPer 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerCopyMenuPerPostWithHttpInfo (CopyMenuInput copyMenuInput = default(CopyMenuInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = copyMenuInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/menuPer/copyMenuPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerCopyMenuPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// /api/app/menuPer/copyMenuPer 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerCopyMenuPerPostAsync (CopyMenuInput copyMenuInput = default(CopyMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerCopyMenuPerPostAsyncWithHttpInfo(copyMenuInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// /api/app/menuPer/copyMenuPer 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerCopyMenuPerPostAsyncWithHttpInfo (CopyMenuInput copyMenuInput = default(CopyMenuInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = copyMenuInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/menuPer/copyMenuPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerCopyMenuPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 赋予角色权限 Grant role permissions 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerGrantPerPost (GrantPerInput grantPerInput = default(GrantPerInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerGrantPerPostWithHttpInfo(grantPerInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 赋予角色权限 Grant role permissions 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerGrantPerPostWithHttpInfo (GrantPerInput grantPerInput = default(GrantPerInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = grantPerInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/menuPer/grantPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerGrantPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 赋予角色权限 Grant role permissions 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerGrantPerPostAsync (GrantPerInput grantPerInput = default(GrantPerInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerGrantPerPostAsyncWithHttpInfo(grantPerInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 赋予角色权限 Grant role permissions 整体权限赋值,旧的会被新的全覆盖 old permission of the role will be overall overrided
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantPerInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerGrantPerPostAsyncWithHttpInfo (GrantPerInput grantPerInput = default(GrantPerInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = grantPerInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/menuPer/grantPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerGrantPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取权限详细信息 Get permission details 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>PerDetailsOutput</returns>
        public Result<PerDetailsOutput> ApiAppMenuPerIdPerDetailsGet (string id)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<PerDetailsOutput>> localVarResponse = ApiAppMenuPerIdPerDetailsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取权限详细信息 Get permission details 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>ApiResponse of PerDetailsOutput</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< PerDetailsOutput >> ApiAppMenuPerIdPerDetailsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MenuPerApi->ApiAppMenuPerIdPerDetailsGet");

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< PerDetailsOutput >>("/api/app/menuPer/{id}/perDetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerIdPerDetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取权限详细信息 Get permission details 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>Task of PerDetailsOutput</returns>
        public async System.Threading.Tasks.Task<Result<PerDetailsOutput>> ApiAppMenuPerIdPerDetailsGetAsync (string id)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<PerDetailsOutput>> localVarResponse = await ApiAppMenuPerIdPerDetailsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取权限详细信息 Get permission details 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">权限ID permission id</param>
        /// <returns>Task of ApiResponse (PerDetailsOutput)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<PerDetailsOutput>>> ApiAppMenuPerIdPerDetailsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'id' when calling MenuPerApi->ApiAppMenuPerIdPerDetailsGet");


            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<PerDetailsOutput>>("/api/app/menuPer/{id}/perDetails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerIdPerDetailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加菜单权限 Add menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerMenuPerPost (AddMenuInput addMenuInput = default(AddMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerMenuPerPostWithHttpInfo(addMenuInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加菜单权限 Add menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerMenuPerPostWithHttpInfo (AddMenuInput addMenuInput = default(AddMenuInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addMenuInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/menuPer/menuPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加菜单权限 Add menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerMenuPerPostAsync (AddMenuInput addMenuInput = default(AddMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerMenuPerPostAsyncWithHttpInfo(addMenuInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加菜单权限 Add menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerMenuPerPostAsyncWithHttpInfo (AddMenuInput addMenuInput = default(AddMenuInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = addMenuInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/menuPer/menuPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPerPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新菜单权限 Update menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerMenuPerPut (UpdateMenuInput updateMenuInput = default(UpdateMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerMenuPerPutWithHttpInfo(updateMenuInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新菜单权限 Update menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerMenuPerPutWithHttpInfo (UpdateMenuInput updateMenuInput = default(UpdateMenuInput))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateMenuInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Result< Object >>("/api/app/menuPer/menuPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPerPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新菜单权限 Update menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerMenuPerPutAsync (UpdateMenuInput updateMenuInput = default(UpdateMenuInput))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerMenuPerPutAsyncWithHttpInfo(updateMenuInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新菜单权限 Update menu permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMenuInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerMenuPerPutAsyncWithHttpInfo (UpdateMenuInput updateMenuInput = default(UpdateMenuInput))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateMenuInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Result<Object>>("/api/app/menuPer/menuPer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPerPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>List&lt;MenuPerTree&gt;</returns>
        public Result<List<MenuPerTree>> ApiAppMenuPerMenuPersTreeSystemIdPost (string systemId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<MenuPerTree>>> localVarResponse = ApiAppMenuPerMenuPersTreeSystemIdPostWithHttpInfo(systemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>ApiResponse of List&lt;MenuPerTree&gt;</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< List<MenuPerTree> >> ApiAppMenuPerMenuPersTreeSystemIdPostWithHttpInfo (string systemId)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'systemId' when calling MenuPerApi->ApiAppMenuPerMenuPersTreeSystemIdPost");

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("systemId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(systemId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<MenuPerTree> >>("/api/app/menuPer/menuPersTree/{systemId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPersTreeSystemIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>Task of List&lt;MenuPerTree&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<MenuPerTree>>> ApiAppMenuPerMenuPersTreeSystemIdPostAsync (string systemId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<MenuPerTree>>> localVarResponse = await ApiAppMenuPerMenuPersTreeSystemIdPostAsyncWithHttpInfo(systemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取系统的菜单权限树 Get the menu permission tree of the system 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemId">系统ID system id</param>
        /// <returns>Task of ApiResponse (List&lt;MenuPerTree&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<MenuPerTree>>>> ApiAppMenuPerMenuPersTreeSystemIdPostAsyncWithHttpInfo (string systemId)
        {
            // verify the required parameter 'systemId' is set
            if (systemId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'systemId' when calling MenuPerApi->ApiAppMenuPerMenuPersTreeSystemIdPost");


            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("systemId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(systemId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<MenuPerTree>>>("/api/app/menuPer/menuPersTree/{systemId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPersTreeSystemIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>List&lt;MenuPerTree&gt;</returns>
        public Result<List<MenuPerTree>> ApiAppMenuPerMenuPersUnderRoleRoleIdPost (string roleId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<MenuPerTree>>> localVarResponse = ApiAppMenuPerMenuPersUnderRoleRoleIdPostWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>ApiResponse of List&lt;MenuPerTree&gt;</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< List<MenuPerTree> >> ApiAppMenuPerMenuPersUnderRoleRoleIdPostWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'roleId' when calling MenuPerApi->ApiAppMenuPerMenuPersUnderRoleRoleIdPost");

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roleId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<MenuPerTree> >>("/api/app/menuPer/menuPersUnderRole/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPersUnderRoleRoleIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>Task of List&lt;MenuPerTree&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<MenuPerTree>>> ApiAppMenuPerMenuPersUnderRoleRoleIdPostAsync (string roleId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<MenuPerTree>>> localVarResponse = await ApiAppMenuPerMenuPersUnderRoleRoleIdPostAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 角色所拥有的菜单权限 Menu permissions of role 已经拥有的菜单/按钮权限（IsCheck &#x3D; true） already owned menu / button permissions (IsCheck &#x3D; true)
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">角色ID role id</param>
        /// <returns>Task of ApiResponse (List&lt;MenuPerTree&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<MenuPerTree>>>> ApiAppMenuPerMenuPersUnderRoleRoleIdPostAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'roleId' when calling MenuPerApi->ApiAppMenuPerMenuPersUnderRoleRoleIdPost");


            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("roleId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<MenuPerTree>>>("/api/app/menuPer/menuPersUnderRole/{roleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerMenuPersUnderRoleRoleIdPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 角色拥有的权限明细 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>List&lt;PermissionTree&gt;</returns>
        public Result<List<PermissionTree>> ApiAppMenuPerPerDetailUnderRolePost (List<string> requestBody = default(List<string>))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<PermissionTree>>> localVarResponse = ApiAppMenuPerPerDetailUnderRolePostWithHttpInfo(requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 角色拥有的权限明细 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PermissionTree&gt;</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< List<PermissionTree> >> ApiAppMenuPerPerDetailUnderRolePostWithHttpInfo (List<string> requestBody = default(List<string>))
        {
            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<PermissionTree> >>("/api/app/menuPer/perDetailUnderRole", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerPerDetailUnderRolePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 角色拥有的权限明细 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of List&lt;PermissionTree&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<PermissionTree>>> ApiAppMenuPerPerDetailUnderRolePostAsync (List<string> requestBody = default(List<string>))
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<PermissionTree>>> localVarResponse = await ApiAppMenuPerPerDetailUnderRolePostAsyncWithHttpInfo(requestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 角色拥有的权限明细 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PermissionTree&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<List<PermissionTree>>>> ApiAppMenuPerPerDetailUnderRolePostAsyncWithHttpInfo (List<string> requestBody = default(List<string>))
        {

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = requestBody;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<PermissionTree>>>("/api/app/menuPer/perDetailUnderRole", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerPerDetailUnderRolePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMenuPerPerPerIdDelete (string perId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMenuPerPerPerIdDeleteWithHttpInfo(perId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result< Object >> ApiAppMenuPerPerPerIdDeleteWithHttpInfo (string perId)
        {
            // verify the required parameter 'perId' is set
            if (perId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'perId' when calling MenuPerApi->ApiAppMenuPerPerPerIdDelete");

            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.IdentityServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("perId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(perId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Result< Object >>("/api/app/menuPer/per/{perId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerPerPerIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMenuPerPerPerIdDeleteAsync (string perId)
        {
             DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMenuPerPerPerIdDeleteAsyncWithHttpInfo(perId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 删除菜单/按钮权限 Delete menu / button permissions 
        /// </summary>
        /// <exception cref="DHI.DSS.IdentityServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="perId">权限ID permission id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.IdentityServiceSDK.Client.ApiResponse<Result<Object>>> ApiAppMenuPerPerPerIdDeleteAsyncWithHttpInfo (string perId)
        {
            // verify the required parameter 'perId' is set
            if (perId == null)
                throw new DHI.DSS.IdentityServiceSDK.Client.ApiException(400, "Missing required parameter 'perId' when calling MenuPerApi->ApiAppMenuPerPerPerIdDelete");


            DHI.DSS.IdentityServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.IdentityServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("perId", DHI.DSS.IdentityServiceSDK.Client.ClientUtils.ParameterToString(perId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Result<Object>>("/api/app/menuPer/per/{perId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMenuPerPerPerIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
