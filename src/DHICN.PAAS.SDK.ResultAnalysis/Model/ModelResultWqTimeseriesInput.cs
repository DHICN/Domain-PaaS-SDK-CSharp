/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// ModelResultWqTimeseriesInput
    /// </summary>
    [DataContract]
    public partial class ModelResultWqTimeseriesInput :  IEquatable<ModelResultWqTimeseriesInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelResultWqTimeseriesInput" /> class.
        /// </summary>
        /// <param name="scenarioId">方案id scenario id.</param>
        /// <param name="wqItem">水质项 water quality item.</param>
        /// <param name="assetID">河道 river id.</param>
        /// <param name="chainage">里程 chainage.</param>
        public ModelResultWqTimeseriesInput(string scenarioId = default(string), string wqItem = default(string), string assetID = default(string), double chainage = default(double))
        {
            this.ScenarioId = scenarioId;
            this.WqItem = wqItem;
            this.AssetID = assetID;
            this.Chainage = chainage;
        }
        
        /// <summary>
        /// 方案id scenario id
        /// </summary>
        /// <value>方案id scenario id</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=true)]
        public string ScenarioId { get; set; }

        /// <summary>
        /// 水质项 water quality item
        /// </summary>
        /// <value>水质项 water quality item</value>
        [DataMember(Name="wqItem", EmitDefaultValue=true)]
        public string WqItem { get; set; }

        /// <summary>
        /// 河道 river id
        /// </summary>
        /// <value>河道 river id</value>
        [DataMember(Name="assetID", EmitDefaultValue=true)]
        public string AssetID { get; set; }

        /// <summary>
        /// 里程 chainage
        /// </summary>
        /// <value>里程 chainage</value>
        [DataMember(Name="chainage", EmitDefaultValue=false)]
        public double Chainage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelResultWqTimeseriesInput {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  WqItem: ").Append(WqItem).Append("\n");
            sb.Append("  AssetID: ").Append(AssetID).Append("\n");
            sb.Append("  Chainage: ").Append(Chainage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelResultWqTimeseriesInput);
        }

        /// <summary>
        /// Returns true if ModelResultWqTimeseriesInput instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelResultWqTimeseriesInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelResultWqTimeseriesInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.WqItem == input.WqItem ||
                    (this.WqItem != null &&
                    this.WqItem.Equals(input.WqItem))
                ) && 
                (
                    this.AssetID == input.AssetID ||
                    (this.AssetID != null &&
                    this.AssetID.Equals(input.AssetID))
                ) && 
                (
                    this.Chainage == input.Chainage ||
                    this.Chainage.Equals(input.Chainage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                if (this.WqItem != null)
                    hashCode = hashCode * 59 + this.WqItem.GetHashCode();
                if (this.AssetID != null)
                    hashCode = hashCode * 59 + this.AssetID.GetHashCode();
                hashCode = hashCode * 59 + this.Chainage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
