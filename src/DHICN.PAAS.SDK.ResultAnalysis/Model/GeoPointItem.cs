/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// GeoPointItem
    /// </summary>
    [DataContract]
    public partial class GeoPointItem :  IEquatable<GeoPointItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoPointItem" /> class.
        /// </summary>
        /// <param name="chainage">计算点里程 point chainage.</param>
        /// <param name="bottom">计算点底高程 bottom elevation at the point.</param>
        /// <param name="rightBank">计算点右岸高程 right bank elevation at the point.</param>
        /// <param name="leftBank">计算点左岸高程 left bank elevation at the point.</param>
        public GeoPointItem(double chainage = default(double), double bottom = default(double), double rightBank = default(double), double leftBank = default(double))
        {
            this.Chainage = chainage;
            this.Bottom = bottom;
            this.RightBank = rightBank;
            this.LeftBank = leftBank;
        }
        
        /// <summary>
        /// 计算点里程 point chainage
        /// </summary>
        /// <value>计算点里程 point chainage</value>
        [DataMember(Name="chainage", EmitDefaultValue=false)]
        public double Chainage { get; set; }

        /// <summary>
        /// 计算点底高程 bottom elevation at the point
        /// </summary>
        /// <value>计算点底高程 bottom elevation at the point</value>
        [DataMember(Name="bottom", EmitDefaultValue=false)]
        public double Bottom { get; set; }

        /// <summary>
        /// 计算点右岸高程 right bank elevation at the point
        /// </summary>
        /// <value>计算点右岸高程 right bank elevation at the point</value>
        [DataMember(Name="rightBank", EmitDefaultValue=false)]
        public double RightBank { get; set; }

        /// <summary>
        /// 计算点左岸高程 left bank elevation at the point
        /// </summary>
        /// <value>计算点左岸高程 left bank elevation at the point</value>
        [DataMember(Name="leftBank", EmitDefaultValue=false)]
        public double LeftBank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeoPointItem {\n");
            sb.Append("  Chainage: ").Append(Chainage).Append("\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("  RightBank: ").Append(RightBank).Append("\n");
            sb.Append("  LeftBank: ").Append(LeftBank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeoPointItem);
        }

        /// <summary>
        /// Returns true if GeoPointItem instances are equal
        /// </summary>
        /// <param name="input">Instance of GeoPointItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeoPointItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Chainage == input.Chainage ||
                    this.Chainage.Equals(input.Chainage)
                ) && 
                (
                    this.Bottom == input.Bottom ||
                    this.Bottom.Equals(input.Bottom)
                ) && 
                (
                    this.RightBank == input.RightBank ||
                    this.RightBank.Equals(input.RightBank)
                ) && 
                (
                    this.LeftBank == input.LeftBank ||
                    this.LeftBank.Equals(input.LeftBank)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Chainage.GetHashCode();
                hashCode = hashCode * 59 + this.Bottom.GetHashCode();
                hashCode = hashCode * 59 + this.RightBank.GetHashCode();
                hashCode = hashCode * 59 + this.LeftBank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
