/* 
 * scenario-manager-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.ScenarioManagerServiceSDK.Client;
using DHI.DSS.ScenarioManagerServiceSDK.Model;

namespace DHI.DSS.ScenarioManagerServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 创建新的方案库 Add new libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>List&lt;Library&gt;</returns>
        Result<List<Library>> ApiV2ScenarioManagerLibraryAddPost (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>));

        /// <summary>
        /// 创建新的方案库 Add new libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        ApiResponse<Result<List<Library>>> ApiV2ScenarioManagerLibraryAddPostWithHttpInfo (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>));
        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>bool</returns>
        Result<bool> ApiV2ScenarioManagerLibraryDeletePost (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara));

        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<Result<bool>> ApiV2ScenarioManagerLibraryDeletePostWithHttpInfo (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara));
        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Scenario</returns>
        Result<Scenario> ApiV2ScenarioManagerLibraryLatestscenarioGet (string version, string libraryId = default(string));

        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>ApiResponse of Scenario</returns>
        ApiResponse<Result<Scenario>> ApiV2ScenarioManagerLibraryLatestscenarioGetWithHttpInfo (string version, string libraryId = default(string));
        /// <summary>
        /// 获取所有方案库列表 Get all the libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Library&gt;</returns>
        Result<List<Library>> ApiV2ScenarioManagerLibraryListGet (string version);

        /// <summary>
        /// 获取所有方案库列表 Get all the libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        ApiResponse<Result<List<Library>>> ApiV2ScenarioManagerLibraryListGetWithHttpInfo (string version);
        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>Scenario</returns>
        Result<Scenario> ApiV2ScenarioManagerLibraryListGetcachedscenarioGet (string version, string type = default(string), string businessType = default(string));

        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>ApiResponse of Scenario</returns>
        ApiResponse<Result<Scenario>> ApiV2ScenarioManagerLibraryListGetcachedscenarioGetWithHttpInfo (string version, string type = default(string), string businessType = default(string));
        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>List&lt;Library&gt;</returns>
        Result<List<Library>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGet (string version, string type = default(string), string businessType = default(string));

        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        ApiResponse<Result<List<Library>>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetWithHttpInfo (string version, string type = default(string), string businessType = default(string));
        /// <summary>
        /// 根据类型查询方案库 Get libraries by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>List&lt;Library&gt;</returns>
        Result<List<Library>> ApiV2ScenarioManagerLibraryListTypeGet (string version, string type = default(string));

        /// <summary>
        /// 根据类型查询方案库 Get libraries by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        ApiResponse<Result<List<Library>>> ApiV2ScenarioManagerLibraryListTypeGetWithHttpInfo (string version, string type = default(string));
        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>List&lt;Scenario&gt;</returns>
        Result<List<Scenario>> ApiV2ScenarioManagerLibraryScenariolistGet (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>ApiResponse of List&lt;Scenario&gt;</returns>
        ApiResponse<Result<List<Scenario>>> ApiV2ScenarioManagerLibraryScenariolistGetWithHttpInfo (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library
        /// </summary>
        /// <remarks>
        /// 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>bool</returns>
        Result<bool> ApiV2ScenarioManagerLibraryTemplateSwitchPost (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara));

        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library
        /// </summary>
        /// <remarks>
        /// 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<Result<bool>> ApiV2ScenarioManagerLibraryTemplateSwitchPostWithHttpInfo (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara));
        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>List&lt;Scenario&gt;</returns>
        Result<List<Scenario>> ApiV2ScenarioManagerLibraryTemplatelistGet (string version, string libraryId = default(string));

        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Scenario&gt;</returns>
        ApiResponse<Result<List<Scenario>>> ApiV2ScenarioManagerLibraryTemplatelistGetWithHttpInfo (string version, string libraryId = default(string));
        /// <summary>
        /// 更新方案库信息 Update library information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>bool</returns>
        Result<bool> ApiV2ScenarioManagerLibraryUpdatePost (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara));

        /// <summary>
        /// 更新方案库信息 Update library information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<Result<bool>> ApiV2ScenarioManagerLibraryUpdatePostWithHttpInfo (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 创建新的方案库 Add new libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryAddPostAsync (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>));

        /// <summary>
        /// 创建新的方案库 Add new libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryAddPostAsyncWithHttpInfo (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>));
        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerLibraryDeletePostAsync (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara));

        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<bool>>> ApiV2ScenarioManagerLibraryDeletePostAsyncWithHttpInfo (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara));
        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of Scenario</returns>
        System.Threading.Tasks.Task<Result<Scenario>> ApiV2ScenarioManagerLibraryLatestscenarioGetAsync (string version, string libraryId = default(string));

        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (Scenario)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Scenario>>> ApiV2ScenarioManagerLibraryLatestscenarioGetAsyncWithHttpInfo (string version, string libraryId = default(string));
        /// <summary>
        /// 获取所有方案库列表 Get all the libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryListGetAsync (string version);

        /// <summary>
        /// 获取所有方案库列表 Get all the libraries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryListGetAsyncWithHttpInfo (string version);
        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>Task of Scenario</returns>
        System.Threading.Tasks.Task<Result<Scenario>> ApiV2ScenarioManagerLibraryListGetcachedscenarioGetAsync (string version, string type = default(string), string businessType = default(string));

        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>Task of ApiResponse (Scenario)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Scenario>>> ApiV2ScenarioManagerLibraryListGetcachedscenarioGetAsyncWithHttpInfo (string version, string type = default(string), string businessType = default(string));
        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetAsync (string version, string type = default(string), string businessType = default(string));

        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetAsyncWithHttpInfo (string version, string type = default(string), string businessType = default(string));
        /// <summary>
        /// 根据类型查询方案库 Get libraries by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryListTypeGetAsync (string version, string type = default(string));

        /// <summary>
        /// 根据类型查询方案库 Get libraries by type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryListTypeGetAsyncWithHttpInfo (string version, string type = default(string));
        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>Task of List&lt;Scenario&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Scenario>>> ApiV2ScenarioManagerLibraryScenariolistGetAsync (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Scenario&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Scenario>>>> ApiV2ScenarioManagerLibraryScenariolistGetAsyncWithHttpInfo (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library
        /// </summary>
        /// <remarks>
        /// 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerLibraryTemplateSwitchPostAsync (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara));

        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library
        /// </summary>
        /// <remarks>
        /// 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<bool>>> ApiV2ScenarioManagerLibraryTemplateSwitchPostAsyncWithHttpInfo (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara));
        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Scenario&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Scenario>>> ApiV2ScenarioManagerLibraryTemplatelistGetAsync (string version, string libraryId = default(string));

        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Scenario&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Scenario>>>> ApiV2ScenarioManagerLibraryTemplatelistGetAsyncWithHttpInfo (string version, string libraryId = default(string));
        /// <summary>
        /// 更新方案库信息 Update library information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerLibraryUpdatePostAsync (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara));

        /// <summary>
        /// 更新方案库信息 Update library information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<bool>>> ApiV2ScenarioManagerLibraryUpdatePostAsyncWithHttpInfo (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryApi : ILibraryApiSync, ILibraryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LibraryApi : ILibraryApi
    {
        private DHI.DSS.ScenarioManagerServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryApi(String basePath)
        {
            this.Configuration = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.ScenarioManagerServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibraryApi(DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.ScenarioManagerServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LibraryApi(DHI.DSS.ScenarioManagerServiceSDK.Client.ISynchronousClient client,DHI.DSS.ScenarioManagerServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.ScenarioManagerServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 创建新的方案库 Add new libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>List&lt;Library&gt;</returns>
        public Result<List<Library>> ApiV2ScenarioManagerLibraryAddPost (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = ApiV2ScenarioManagerLibraryAddPostWithHttpInfo(version, addLibrariesPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 创建新的方案库 Add new libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Library> >> ApiV2ScenarioManagerLibraryAddPostWithHttpInfo (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryAddPost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = addLibrariesPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<Library> >>("/api/v2/scenario-manager/library/add", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryAddPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 创建新的方案库 Add new libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryAddPostAsync (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = await ApiV2ScenarioManagerLibraryAddPostAsyncWithHttpInfo(version, addLibrariesPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 创建新的方案库 Add new libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="addLibrariesPara"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryAddPostAsyncWithHttpInfo (string version, List<AddLibrariesPara> addLibrariesPara = default(List<AddLibrariesPara>))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryAddPost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = addLibrariesPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<Library>>>("/api/v2/scenario-manager/library/add", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryAddPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>bool</returns>
        public Result<bool> ApiV2ScenarioManagerLibraryDeletePost (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = ApiV2ScenarioManagerLibraryDeletePostWithHttpInfo(version, deleteLibrariesPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< bool >> ApiV2ScenarioManagerLibraryDeletePostWithHttpInfo (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryDeletePost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = deleteLibrariesPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< bool >>("/api/v2/scenario-manager/library/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerLibraryDeletePostAsync (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = await ApiV2ScenarioManagerLibraryDeletePostAsyncWithHttpInfo(version, deleteLibrariesPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案库ID删除方案库 Delete libraries by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteLibrariesPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>>> ApiV2ScenarioManagerLibraryDeletePostAsyncWithHttpInfo (string version, DeleteLibrariesPara deleteLibrariesPara = default(DeleteLibrariesPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryDeletePost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = deleteLibrariesPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<bool>>("/api/v2/scenario-manager/library/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Scenario</returns>
        public Result<Scenario> ApiV2ScenarioManagerLibraryLatestscenarioGet (string version, string libraryId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Scenario>> localVarResponse = ApiV2ScenarioManagerLibraryLatestscenarioGetWithHttpInfo(version, libraryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>ApiResponse of Scenario</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< Scenario >> ApiV2ScenarioManagerLibraryLatestscenarioGetWithHttpInfo (string version, string libraryId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryLatestscenarioGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "libraryId", libraryId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< Scenario >>("/api/v2/scenario-manager/library/latestscenario", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryLatestscenarioGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of Scenario</returns>
        public async System.Threading.Tasks.Task<Result<Scenario>> ApiV2ScenarioManagerLibraryLatestscenarioGetAsync (string version, string libraryId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Scenario>> localVarResponse = await ApiV2ScenarioManagerLibraryLatestscenarioGetAsyncWithHttpInfo(version, libraryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案库ID获取其下最近一次计算完成的方案 Get latest calculated scenario by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (Scenario)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Scenario>>> ApiV2ScenarioManagerLibraryLatestscenarioGetAsyncWithHttpInfo (string version, string libraryId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryLatestscenarioGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "libraryId", libraryId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<Scenario>>("/api/v2/scenario-manager/library/latestscenario", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryLatestscenarioGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取所有方案库列表 Get all the libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Library&gt;</returns>
        public Result<List<Library>> ApiV2ScenarioManagerLibraryListGet (string version)
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = ApiV2ScenarioManagerLibraryListGetWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取所有方案库列表 Get all the libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Library> >> ApiV2ScenarioManagerLibraryListGetWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Library> >>("/api/v2/scenario-manager/library/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取所有方案库列表 Get all the libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryListGetAsync (string version)
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = await ApiV2ScenarioManagerLibraryListGetAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取所有方案库列表 Get all the libraries 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryListGetAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Library>>>("/api/v2/scenario-manager/library/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>Scenario</returns>
        public Result<Scenario> ApiV2ScenarioManagerLibraryListGetcachedscenarioGet (string version, string type = default(string), string businessType = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Scenario>> localVarResponse = ApiV2ScenarioManagerLibraryListGetcachedscenarioGetWithHttpInfo(version, type, businessType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>ApiResponse of Scenario</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< Scenario >> ApiV2ScenarioManagerLibraryListGetcachedscenarioGetWithHttpInfo (string version, string type = default(string), string businessType = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListGetcachedscenarioGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (businessType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "businessType", businessType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< Scenario >>("/api/v2/scenario-manager/library/list/getcachedscenario", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListGetcachedscenarioGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>Task of Scenario</returns>
        public async System.Threading.Tasks.Task<Result<Scenario>> ApiV2ScenarioManagerLibraryListGetcachedscenarioGetAsync (string version, string type = default(string), string businessType = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Scenario>> localVarResponse = await ApiV2ScenarioManagerLibraryListGetcachedscenarioGetAsyncWithHttpInfo(version, type, businessType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// /api/v2/scenario-manager/library/list/getcachedscenario 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="businessType"> (optional)</param>
        /// <returns>Task of ApiResponse (Scenario)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Scenario>>> ApiV2ScenarioManagerLibraryListGetcachedscenarioGetAsyncWithHttpInfo (string version, string type = default(string), string businessType = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListGetcachedscenarioGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (businessType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "businessType", businessType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<Scenario>>("/api/v2/scenario-manager/library/list/getcachedscenario", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListGetcachedscenarioGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>List&lt;Library&gt;</returns>
        public Result<List<Library>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGet (string version, string type = default(string), string businessType = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetWithHttpInfo(version, type, businessType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Library> >> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetWithHttpInfo (string version, string type = default(string), string businessType = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListTypeBusinesstypeGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (businessType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "businessType", businessType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Library> >>("/api/v2/scenario-manager/library/list/type_businesstype", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListTypeBusinesstypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetAsync (string version, string type = default(string), string businessType = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = await ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetAsyncWithHttpInfo(version, type, businessType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案库类型和业务类型查询方案库 Get libraries by type and business type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <param name="businessType">业务类型 Business type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryListTypeBusinesstypeGetAsyncWithHttpInfo (string version, string type = default(string), string businessType = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListTypeBusinesstypeGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (businessType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "businessType", businessType));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Library>>>("/api/v2/scenario-manager/library/list/type_businesstype", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListTypeBusinesstypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据类型查询方案库 Get libraries by type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>List&lt;Library&gt;</returns>
        public Result<List<Library>> ApiV2ScenarioManagerLibraryListTypeGet (string version, string type = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = ApiV2ScenarioManagerLibraryListTypeGetWithHttpInfo(version, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据类型查询方案库 Get libraries by type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>ApiResponse of List&lt;Library&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Library> >> ApiV2ScenarioManagerLibraryListTypeGetWithHttpInfo (string version, string type = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListTypeGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Library> >>("/api/v2/scenario-manager/library/list/type", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据类型查询方案库 Get libraries by type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>Task of List&lt;Library&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Library>>> ApiV2ScenarioManagerLibraryListTypeGetAsync (string version, string type = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>> localVarResponse = await ApiV2ScenarioManagerLibraryListTypeGetAsyncWithHttpInfo(version, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据类型查询方案库 Get libraries by type 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="type">方案库类型 Library type (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Library&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Library>>>> ApiV2ScenarioManagerLibraryListTypeGetAsyncWithHttpInfo (string version, string type = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryListTypeGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Library>>>("/api/v2/scenario-manager/library/list/type", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryListTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>List&lt;Scenario&gt;</returns>
        public Result<List<Scenario>> ApiV2ScenarioManagerLibraryScenariolistGet (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>> localVarResponse = ApiV2ScenarioManagerLibraryScenariolistGetWithHttpInfo(version, libraryId, pageIndex, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>ApiResponse of List&lt;Scenario&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Scenario> >> ApiV2ScenarioManagerLibraryScenariolistGetWithHttpInfo (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryScenariolistGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "libraryId", libraryId));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Scenario> >>("/api/v2/scenario-manager/library/scenariolist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryScenariolistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>Task of List&lt;Scenario&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Scenario>>> ApiV2ScenarioManagerLibraryScenariolistGetAsync (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>> localVarResponse = await ApiV2ScenarioManagerLibraryScenariolistGetAsyncWithHttpInfo(version, libraryId, pageIndex, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案库查询其下的方案列表，支持分页 Get scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库的ID Library&#39;s Id (optional)</param>
        /// <param name="pageIndex">分页序号，从1开始 Page index, start from 1 (optional)</param>
        /// <param name="pageSize">每一页的个数 Page size (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Scenario&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>>> ApiV2ScenarioManagerLibraryScenariolistGetAsyncWithHttpInfo (string version, string libraryId = default(string), int? pageIndex = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryScenariolistGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "libraryId", libraryId));
            }
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Scenario>>>("/api/v2/scenario-manager/library/scenariolist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryScenariolistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>bool</returns>
        public Result<bool> ApiV2ScenarioManagerLibraryTemplateSwitchPost (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = ApiV2ScenarioManagerLibraryTemplateSwitchPostWithHttpInfo(version, turnOnTemplatePara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< bool >> ApiV2ScenarioManagerLibraryTemplateSwitchPostWithHttpInfo (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryTemplateSwitchPost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = turnOnTemplatePara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< bool >>("/api/v2/scenario-manager/library/template/switch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryTemplateSwitchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerLibraryTemplateSwitchPostAsync (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = await ApiV2ScenarioManagerLibraryTemplateSwitchPostAsyncWithHttpInfo(version, turnOnTemplatePara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 启用库下面的模板方案 Turn on template by library 修改库下面启用的模板方案，一个模板方案启用后，库下的其他模板方案会自动禁用 Change enabled template by library, one template to be turned on, others will be turned off
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="turnOnTemplatePara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>>> ApiV2ScenarioManagerLibraryTemplateSwitchPostAsyncWithHttpInfo (string version, TurnOnTemplatePara turnOnTemplatePara = default(TurnOnTemplatePara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryTemplateSwitchPost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = turnOnTemplatePara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<bool>>("/api/v2/scenario-manager/library/template/switch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryTemplateSwitchPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>List&lt;Scenario&gt;</returns>
        public Result<List<Scenario>> ApiV2ScenarioManagerLibraryTemplatelistGet (string version, string libraryId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>> localVarResponse = ApiV2ScenarioManagerLibraryTemplatelistGetWithHttpInfo(version, libraryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Scenario&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Scenario> >> ApiV2ScenarioManagerLibraryTemplatelistGetWithHttpInfo (string version, string libraryId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryTemplatelistGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "libraryId", libraryId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Scenario> >>("/api/v2/scenario-manager/library/templatelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryTemplatelistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Scenario&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Scenario>>> ApiV2ScenarioManagerLibraryTemplatelistGetAsync (string version, string libraryId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>> localVarResponse = await ApiV2ScenarioManagerLibraryTemplatelistGetAsyncWithHttpInfo(version, libraryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案库ID获取其下所有的模板方案 Get all template scenarios by library&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="libraryId">方案库ID Library&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Scenario&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>>> ApiV2ScenarioManagerLibraryTemplatelistGetAsyncWithHttpInfo (string version, string libraryId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryTemplatelistGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (libraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "libraryId", libraryId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Scenario>>>("/api/v2/scenario-manager/library/templatelist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryTemplatelistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新方案库信息 Update library information 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>bool</returns>
        public Result<bool> ApiV2ScenarioManagerLibraryUpdatePost (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = ApiV2ScenarioManagerLibraryUpdatePostWithHttpInfo(version, updateLibraryPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新方案库信息 Update library information 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< bool >> ApiV2ScenarioManagerLibraryUpdatePostWithHttpInfo (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryUpdatePost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = updateLibraryPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< bool >>("/api/v2/scenario-manager/library/update", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryUpdatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新方案库信息 Update library information 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerLibraryUpdatePostAsync (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = await ApiV2ScenarioManagerLibraryUpdatePostAsyncWithHttpInfo(version, updateLibraryPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新方案库信息 Update library information 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="updateLibraryPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>>> ApiV2ScenarioManagerLibraryUpdatePostAsyncWithHttpInfo (string version, UpdateLibraryPara updateLibraryPara = default(UpdateLibraryPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling LibraryApi->ApiV2ScenarioManagerLibraryUpdatePost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = updateLibraryPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<bool>>("/api/v2/scenario-manager/library/update", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerLibraryUpdatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
