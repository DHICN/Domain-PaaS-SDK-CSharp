/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.Infrastrcuture.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.Infrastrcuture.Model
{
    /// <summary>
    /// BaseProductLineInOut
    /// </summary>
    [DataContract]
    public partial class BaseProductLineInOut :  IEquatable<BaseProductLineInOut>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseProductLineInOut" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="productionLineCode">工艺线代码 product line code.</param>
        /// <param name="name">工艺线名称 product line name.</param>
        /// <param name="inlet">进水口代码 inlet code.</param>
        /// <param name="inletName">进水口名称.</param>
        /// <param name="outlet">出水口代码 outlet code.</param>
        /// <param name="outletName">出水口名称.</param>
        /// <param name="hrtCode">HRT代码 hrt code.</param>
        /// <param name="hrt">水力停留时间（单位：小时） hrt value in hour.</param>
        /// <param name="modelName">模板模型名称 template model name.</param>
        /// <param name="dosageGroup">智能加药分组 dosage group.</param>
        /// <param name="dosageCategory">包含加药的类型，逗号分隔 dosing type, seperated by comma.</param>
        public BaseProductLineInOut(Guid id = default(Guid), string productionLineCode = default(string), string name = default(string), string inlet = default(string), string inletName = default(string), string outlet = default(string), string outletName = default(string), string hrtCode = default(string), double hrt = default(double), string modelName = default(string), string dosageGroup = default(string), string dosageCategory = default(string))
        {
            this.Id = id;
            this.ProductionLineCode = productionLineCode;
            this.Name = name;
            this.Inlet = inlet;
            this.InletName = inletName;
            this.Outlet = outlet;
            this.OutletName = outletName;
            this.HrtCode = hrtCode;
            this.Hrt = hrt;
            this.ModelName = modelName;
            this.DosageGroup = dosageGroup;
            this.DosageCategory = dosageCategory;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 工艺线代码 product line code
        /// </summary>
        /// <value>工艺线代码 product line code</value>
        [DataMember(Name="productionLineCode", EmitDefaultValue=true)]
        public string ProductionLineCode { get; set; }

        /// <summary>
        /// 工艺线名称 product line name
        /// </summary>
        /// <value>工艺线名称 product line name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// 进水口代码 inlet code
        /// </summary>
        /// <value>进水口代码 inlet code</value>
        [DataMember(Name="inlet", EmitDefaultValue=true)]
        public string Inlet { get; set; }

        /// <summary>
        /// 进水口名称
        /// </summary>
        /// <value>进水口名称</value>
        [DataMember(Name="inletName", EmitDefaultValue=true)]
        public string InletName { get; set; }

        /// <summary>
        /// 出水口代码 outlet code
        /// </summary>
        /// <value>出水口代码 outlet code</value>
        [DataMember(Name="outlet", EmitDefaultValue=true)]
        public string Outlet { get; set; }

        /// <summary>
        /// 出水口名称
        /// </summary>
        /// <value>出水口名称</value>
        [DataMember(Name="outletName", EmitDefaultValue=true)]
        public string OutletName { get; set; }

        /// <summary>
        /// HRT代码 hrt code
        /// </summary>
        /// <value>HRT代码 hrt code</value>
        [DataMember(Name="hrtCode", EmitDefaultValue=true)]
        public string HrtCode { get; set; }

        /// <summary>
        /// 水力停留时间（单位：小时） hrt value in hour
        /// </summary>
        /// <value>水力停留时间（单位：小时） hrt value in hour</value>
        [DataMember(Name="hrt", EmitDefaultValue=false)]
        public double Hrt { get; set; }

        /// <summary>
        /// 模板模型名称 template model name
        /// </summary>
        /// <value>模板模型名称 template model name</value>
        [DataMember(Name="modelName", EmitDefaultValue=true)]
        public string ModelName { get; set; }

        /// <summary>
        /// 智能加药分组 dosage group
        /// </summary>
        /// <value>智能加药分组 dosage group</value>
        [DataMember(Name="dosageGroup", EmitDefaultValue=true)]
        public string DosageGroup { get; set; }

        /// <summary>
        /// 包含加药的类型，逗号分隔 dosing type, seperated by comma
        /// </summary>
        /// <value>包含加药的类型，逗号分隔 dosing type, seperated by comma</value>
        [DataMember(Name="dosageCategory", EmitDefaultValue=true)]
        public string DosageCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseProductLineInOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductionLineCode: ").Append(ProductionLineCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Inlet: ").Append(Inlet).Append("\n");
            sb.Append("  InletName: ").Append(InletName).Append("\n");
            sb.Append("  Outlet: ").Append(Outlet).Append("\n");
            sb.Append("  OutletName: ").Append(OutletName).Append("\n");
            sb.Append("  HrtCode: ").Append(HrtCode).Append("\n");
            sb.Append("  Hrt: ").Append(Hrt).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  DosageGroup: ").Append(DosageGroup).Append("\n");
            sb.Append("  DosageCategory: ").Append(DosageCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseProductLineInOut);
        }

        /// <summary>
        /// Returns true if BaseProductLineInOut instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseProductLineInOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseProductLineInOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProductionLineCode == input.ProductionLineCode ||
                    (this.ProductionLineCode != null &&
                    this.ProductionLineCode.Equals(input.ProductionLineCode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Inlet == input.Inlet ||
                    (this.Inlet != null &&
                    this.Inlet.Equals(input.Inlet))
                ) && 
                (
                    this.InletName == input.InletName ||
                    (this.InletName != null &&
                    this.InletName.Equals(input.InletName))
                ) && 
                (
                    this.Outlet == input.Outlet ||
                    (this.Outlet != null &&
                    this.Outlet.Equals(input.Outlet))
                ) && 
                (
                    this.OutletName == input.OutletName ||
                    (this.OutletName != null &&
                    this.OutletName.Equals(input.OutletName))
                ) && 
                (
                    this.HrtCode == input.HrtCode ||
                    (this.HrtCode != null &&
                    this.HrtCode.Equals(input.HrtCode))
                ) && 
                (
                    this.Hrt == input.Hrt ||
                    this.Hrt.Equals(input.Hrt)
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.DosageGroup == input.DosageGroup ||
                    (this.DosageGroup != null &&
                    this.DosageGroup.Equals(input.DosageGroup))
                ) && 
                (
                    this.DosageCategory == input.DosageCategory ||
                    (this.DosageCategory != null &&
                    this.DosageCategory.Equals(input.DosageCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProductionLineCode != null)
                    hashCode = hashCode * 59 + this.ProductionLineCode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Inlet != null)
                    hashCode = hashCode * 59 + this.Inlet.GetHashCode();
                if (this.InletName != null)
                    hashCode = hashCode * 59 + this.InletName.GetHashCode();
                if (this.Outlet != null)
                    hashCode = hashCode * 59 + this.Outlet.GetHashCode();
                if (this.OutletName != null)
                    hashCode = hashCode * 59 + this.OutletName.GetHashCode();
                if (this.HrtCode != null)
                    hashCode = hashCode * 59 + this.HrtCode.GetHashCode();
                hashCode = hashCode * 59 + this.Hrt.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.DosageGroup != null)
                    hashCode = hashCode * 59 + this.DosageGroup.GetHashCode();
                if (this.DosageCategory != null)
                    hashCode = hashCode * 59 + this.DosageCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
