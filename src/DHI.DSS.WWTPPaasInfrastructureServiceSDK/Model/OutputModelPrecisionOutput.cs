/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.WWTPPaasInfrastructureServiceSDK.Model
{
    /// <summary>
    /// OutputModelPrecisionOutput
    /// </summary>
    [DataContract]
    public partial class OutputModelPrecisionOutput :  IEquatable<OutputModelPrecisionOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputModelPrecisionOutput" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="time">时间 time.</param>
        /// <param name="stepValue">精度百分比 precision ratio (onlineValue - modelResultValue / onlineValue).</param>
        /// <param name="precisionDiffValue">精度差值 precision difference (onlineValue - modelResultValue).</param>
        /// <param name="nodeCode">模型节点 model node.</param>
        public OutputModelPrecisionOutput(Guid id = default(Guid), DateTime time = default(DateTime), double stepValue = default(double), double precisionDiffValue = default(double), string nodeCode = default(string))
        {
            this.Id = id;
            this.Time = time;
            this.StepValue = stepValue;
            this.PrecisionDiffValue = precisionDiffValue;
            this.NodeCode = nodeCode;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 时间 time
        /// </summary>
        /// <value>时间 time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// 精度百分比 precision ratio (onlineValue - modelResultValue / onlineValue)
        /// </summary>
        /// <value>精度百分比 precision ratio (onlineValue - modelResultValue / onlineValue)</value>
        [DataMember(Name="stepValue", EmitDefaultValue=false)]
        public double StepValue { get; set; }

        /// <summary>
        /// 精度差值 precision difference (onlineValue - modelResultValue)
        /// </summary>
        /// <value>精度差值 precision difference (onlineValue - modelResultValue)</value>
        [DataMember(Name="precisionDiffValue", EmitDefaultValue=false)]
        public double PrecisionDiffValue { get; set; }

        /// <summary>
        /// 模型节点 model node
        /// </summary>
        /// <value>模型节点 model node</value>
        [DataMember(Name="nodeCode", EmitDefaultValue=true)]
        public string NodeCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutputModelPrecisionOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  StepValue: ").Append(StepValue).Append("\n");
            sb.Append("  PrecisionDiffValue: ").Append(PrecisionDiffValue).Append("\n");
            sb.Append("  NodeCode: ").Append(NodeCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputModelPrecisionOutput);
        }

        /// <summary>
        /// Returns true if OutputModelPrecisionOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputModelPrecisionOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputModelPrecisionOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.StepValue == input.StepValue ||
                    this.StepValue.Equals(input.StepValue)
                ) && 
                (
                    this.PrecisionDiffValue == input.PrecisionDiffValue ||
                    this.PrecisionDiffValue.Equals(input.PrecisionDiffValue)
                ) && 
                (
                    this.NodeCode == input.NodeCode ||
                    (this.NodeCode != null &&
                    this.NodeCode.Equals(input.NodeCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.StepValue.GetHashCode();
                hashCode = hashCode * 59 + this.PrecisionDiffValue.GetHashCode();
                if (this.NodeCode != null)
                    hashCode = hashCode * 59 + this.NodeCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
