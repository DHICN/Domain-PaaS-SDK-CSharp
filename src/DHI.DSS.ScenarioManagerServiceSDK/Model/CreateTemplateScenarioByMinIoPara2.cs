/* 
 * scenario-manager-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.ScenarioManagerServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.ScenarioManagerServiceSDK.Model
{
    /// <summary>
    /// CreateTemplateScenarioByMinIoPara2
    /// </summary>
    [DataContract]
    public partial class CreateTemplateScenarioByMinIoPara2 :  IEquatable<CreateTemplateScenarioByMinIoPara2>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ModelTypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTemplateScenarioByMinIoPara2" /> class.
        /// </summary>
        /// <param name="minIOPath">模型文件在分布式文件系统上的路径 path of the model file on distributed file system.</param>
        /// <param name="minIOBucket">模型文件在分布式文件系统上的桶 bucket of the model file on distributed file system.</param>
        /// <param name="projectFile">主模型文件相对于模型文件夹的路径 main model file&#39;s (eg. .mupp file) relative path to the model folder.</param>
        /// <param name="type">type.</param>
        /// <param name="groupId">模板的方案组ID template scenario&#39;s group Id.</param>
        /// <param name="newTemplateName">模板方案名称 template scenario name.</param>
        /// <param name="subType">模板方案子类型 template scenario subtype.</param>
        /// <param name="description">模板方案描述 template scenario description.</param>
        public CreateTemplateScenarioByMinIoPara2(string minIOPath = default(string), string minIOBucket = default(string), string projectFile = default(string), ModelTypeEnum? type = default(ModelTypeEnum?), string groupId = default(string), string newTemplateName = default(string), string subType = default(string), string description = default(string))
        {
            this.MinIOPath = minIOPath;
            this.MinIOBucket = minIOBucket;
            this.ProjectFile = projectFile;
            this.Type = type;
            this.GroupId = groupId;
            this.NewTemplateName = newTemplateName;
            this.SubType = subType;
            this.Description = description;
        }
        
        /// <summary>
        /// 模型文件在分布式文件系统上的路径 path of the model file on distributed file system
        /// </summary>
        /// <value>模型文件在分布式文件系统上的路径 path of the model file on distributed file system</value>
        [DataMember(Name="minIOPath", EmitDefaultValue=true)]
        public string MinIOPath { get; set; }

        /// <summary>
        /// 模型文件在分布式文件系统上的桶 bucket of the model file on distributed file system
        /// </summary>
        /// <value>模型文件在分布式文件系统上的桶 bucket of the model file on distributed file system</value>
        [DataMember(Name="minIOBucket", EmitDefaultValue=true)]
        public string MinIOBucket { get; set; }

        /// <summary>
        /// 主模型文件相对于模型文件夹的路径 main model file&#39;s (eg. .mupp file) relative path to the model folder
        /// </summary>
        /// <value>主模型文件相对于模型文件夹的路径 main model file&#39;s (eg. .mupp file) relative path to the model folder</value>
        [DataMember(Name="projectFile", EmitDefaultValue=true)]
        public string ProjectFile { get; set; }

        /// <summary>
        /// 模板的方案组ID template scenario&#39;s group Id
        /// </summary>
        /// <value>模板的方案组ID template scenario&#39;s group Id</value>
        [DataMember(Name="groupId", EmitDefaultValue=true)]
        public string GroupId { get; set; }

        /// <summary>
        /// 模板方案名称 template scenario name
        /// </summary>
        /// <value>模板方案名称 template scenario name</value>
        [DataMember(Name="newTemplateName", EmitDefaultValue=true)]
        public string NewTemplateName { get; set; }

        /// <summary>
        /// 模板方案子类型 template scenario subtype
        /// </summary>
        /// <value>模板方案子类型 template scenario subtype</value>
        [DataMember(Name="subType", EmitDefaultValue=true)]
        public string SubType { get; set; }

        /// <summary>
        /// 模板方案描述 template scenario description
        /// </summary>
        /// <value>模板方案描述 template scenario description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTemplateScenarioByMinIoPara2 {\n");
            sb.Append("  MinIOPath: ").Append(MinIOPath).Append("\n");
            sb.Append("  MinIOBucket: ").Append(MinIOBucket).Append("\n");
            sb.Append("  ProjectFile: ").Append(ProjectFile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  NewTemplateName: ").Append(NewTemplateName).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTemplateScenarioByMinIoPara2);
        }

        /// <summary>
        /// Returns true if CreateTemplateScenarioByMinIoPara2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTemplateScenarioByMinIoPara2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTemplateScenarioByMinIoPara2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinIOPath == input.MinIOPath ||
                    (this.MinIOPath != null &&
                    this.MinIOPath.Equals(input.MinIOPath))
                ) && 
                (
                    this.MinIOBucket == input.MinIOBucket ||
                    (this.MinIOBucket != null &&
                    this.MinIOBucket.Equals(input.MinIOBucket))
                ) && 
                (
                    this.ProjectFile == input.ProjectFile ||
                    (this.ProjectFile != null &&
                    this.ProjectFile.Equals(input.ProjectFile))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.NewTemplateName == input.NewTemplateName ||
                    (this.NewTemplateName != null &&
                    this.NewTemplateName.Equals(input.NewTemplateName))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinIOPath != null)
                    hashCode = hashCode * 59 + this.MinIOPath.GetHashCode();
                if (this.MinIOBucket != null)
                    hashCode = hashCode * 59 + this.MinIOBucket.GetHashCode();
                if (this.ProjectFile != null)
                    hashCode = hashCode * 59 + this.ProjectFile.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.NewTemplateName != null)
                    hashCode = hashCode * 59 + this.NewTemplateName.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
