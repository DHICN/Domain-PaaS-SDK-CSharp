/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.Infrastrcuture.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.Infrastrcuture.Model
{
    /// <summary>
    /// ModelInputFileConfigOutput
    /// </summary>
    [DataContract]
    public partial class ModelInputFileConfigOutput :  IEquatable<ModelInputFileConfigOutput>, IValidatableObject
    {
        /// <summary>
        /// 输入文件类型 input file type
        /// </summary>
        /// <value>输入文件类型 input file type</value>
        public enum InputFileTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// 输入文件类型 input file type
        /// </summary>
        /// <value>输入文件类型 input file type</value>
        [DataMember(Name="inputFileType", EmitDefaultValue=false)]
        public InputFileTypeEnum? InputFileType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelInputFileConfigOutput" /> class.
        /// </summary>
        /// <param name="id">模型输入文件配置ID config id.</param>
        /// <param name="modelName">模板模型名称（即模板方案名称） template scenario name.</param>
        /// <param name="inputFileName">输入文件名 input file name.</param>
        /// <param name="inputFileType">输入文件类型 input file type.</param>
        /// <param name="modelNode">对应模型点位编号 model node code.</param>
        /// <param name="onlinePoint">对应在线点位编号 online point code.</param>
        /// <param name="unit">单位(模型中的单位) unit.</param>
        /// <param name="unitConvertRatio">单位转换比率(在线点位与模型点位的单位转换比) unit convert ratio.</param>
        public ModelInputFileConfigOutput(Guid id = default(Guid), string modelName = default(string), string inputFileName = default(string), InputFileTypeEnum? inputFileType = default(InputFileTypeEnum?), string modelNode = default(string), string onlinePoint = default(string), string unit = default(string), double unitConvertRatio = default(double))
        {
            this.Id = id;
            this.ModelName = modelName;
            this.InputFileName = inputFileName;
            this.InputFileType = inputFileType;
            this.ModelNode = modelNode;
            this.OnlinePoint = onlinePoint;
            this.Unit = unit;
            this.UnitConvertRatio = unitConvertRatio;
        }
        
        /// <summary>
        /// 模型输入文件配置ID config id
        /// </summary>
        /// <value>模型输入文件配置ID config id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 模板模型名称（即模板方案名称） template scenario name
        /// </summary>
        /// <value>模板模型名称（即模板方案名称） template scenario name</value>
        [DataMember(Name="modelName", EmitDefaultValue=true)]
        public string ModelName { get; set; }

        /// <summary>
        /// 输入文件名 input file name
        /// </summary>
        /// <value>输入文件名 input file name</value>
        [DataMember(Name="inputFileName", EmitDefaultValue=true)]
        public string InputFileName { get; set; }

        /// <summary>
        /// 对应模型点位编号 model node code
        /// </summary>
        /// <value>对应模型点位编号 model node code</value>
        [DataMember(Name="modelNode", EmitDefaultValue=true)]
        public string ModelNode { get; set; }

        /// <summary>
        /// 对应在线点位编号 online point code
        /// </summary>
        /// <value>对应在线点位编号 online point code</value>
        [DataMember(Name="onlinePoint", EmitDefaultValue=true)]
        public string OnlinePoint { get; set; }

        /// <summary>
        /// 单位(模型中的单位) unit
        /// </summary>
        /// <value>单位(模型中的单位) unit</value>
        [DataMember(Name="unit", EmitDefaultValue=true)]
        public string Unit { get; set; }

        /// <summary>
        /// 单位转换比率(在线点位与模型点位的单位转换比) unit convert ratio
        /// </summary>
        /// <value>单位转换比率(在线点位与模型点位的单位转换比) unit convert ratio</value>
        [DataMember(Name="unitConvertRatio", EmitDefaultValue=false)]
        public double UnitConvertRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelInputFileConfigOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  InputFileName: ").Append(InputFileName).Append("\n");
            sb.Append("  InputFileType: ").Append(InputFileType).Append("\n");
            sb.Append("  ModelNode: ").Append(ModelNode).Append("\n");
            sb.Append("  OnlinePoint: ").Append(OnlinePoint).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitConvertRatio: ").Append(UnitConvertRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelInputFileConfigOutput);
        }

        /// <summary>
        /// Returns true if ModelInputFileConfigOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelInputFileConfigOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelInputFileConfigOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.InputFileName == input.InputFileName ||
                    (this.InputFileName != null &&
                    this.InputFileName.Equals(input.InputFileName))
                ) && 
                (
                    this.InputFileType == input.InputFileType ||
                    this.InputFileType.Equals(input.InputFileType)
                ) && 
                (
                    this.ModelNode == input.ModelNode ||
                    (this.ModelNode != null &&
                    this.ModelNode.Equals(input.ModelNode))
                ) && 
                (
                    this.OnlinePoint == input.OnlinePoint ||
                    (this.OnlinePoint != null &&
                    this.OnlinePoint.Equals(input.OnlinePoint))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.UnitConvertRatio == input.UnitConvertRatio ||
                    this.UnitConvertRatio.Equals(input.UnitConvertRatio)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.InputFileName != null)
                    hashCode = hashCode * 59 + this.InputFileName.GetHashCode();
                hashCode = hashCode * 59 + this.InputFileType.GetHashCode();
                if (this.ModelNode != null)
                    hashCode = hashCode * 59 + this.ModelNode.GetHashCode();
                if (this.OnlinePoint != null)
                    hashCode = hashCode * 59 + this.OnlinePoint.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                hashCode = hashCode * 59 + this.UnitConvertRatio.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
