/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// PerDetailsOutput
    /// </summary>
    [DataContract]
    public partial class PerDetailsOutput :  IEquatable<PerDetailsOutput>, IValidatableObject
    {
        /// <summary>
        /// 0-menu(menu) 1-button(button) 
        /// </summary>
        /// <value>0-menu(menu) 1-button(button) </value>
        public enum MenuTypeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }

        /// <summary>
        /// 0-menu(menu) 1-button(button) 
        /// </summary>
        /// <value>0-menu(menu) 1-button(button) </value>
        [DataMember(Name="menuType", EmitDefaultValue=false)]
        public MenuTypeEnum? MenuType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerDetailsOutput" /> class.
        /// </summary>
        /// <param name="id">权限ID permission id.</param>
        /// <param name="pid">父级Id parent id.</param>
        /// <param name="name">菜单名称 menu name.</param>
        /// <param name="menuType">0-menu(menu) 1-button(button) .</param>
        /// <param name="menuRouter">菜单路由,前端的路由走向 menu router.</param>
        /// <param name="regular">权限规则-正则 permission regular.</param>
        /// <param name="systemId">所属系统Id system id.</param>
        public PerDetailsOutput(Guid id = default(Guid), Guid? pid = default(Guid?), string name = default(string), MenuTypeEnum? menuType = default(MenuTypeEnum?), string menuRouter = default(string), string regular = default(string), Guid systemId = default(Guid))
        {
            this.Id = id;
            this.Pid = pid;
            this.Name = name;
            this.MenuType = menuType;
            this.MenuRouter = menuRouter;
            this.Regular = regular;
            this.SystemId = systemId;
        }
        
        /// <summary>
        /// 权限ID permission id
        /// </summary>
        /// <value>权限ID permission id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 父级Id parent id
        /// </summary>
        /// <value>父级Id parent id</value>
        [DataMember(Name="pid", EmitDefaultValue=true)]
        public Guid? Pid { get; set; }

        /// <summary>
        /// 菜单名称 menu name
        /// </summary>
        /// <value>菜单名称 menu name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// 菜单路由,前端的路由走向 menu router
        /// </summary>
        /// <value>菜单路由,前端的路由走向 menu router</value>
        [DataMember(Name="menuRouter", EmitDefaultValue=true)]
        public string MenuRouter { get; set; }

        /// <summary>
        /// 权限规则-正则 permission regular
        /// </summary>
        /// <value>权限规则-正则 permission regular</value>
        [DataMember(Name="regular", EmitDefaultValue=true)]
        public string Regular { get; set; }

        /// <summary>
        /// 所属系统Id system id
        /// </summary>
        /// <value>所属系统Id system id</value>
        [DataMember(Name="systemId", EmitDefaultValue=false)]
        public Guid SystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerDetailsOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MenuType: ").Append(MenuType).Append("\n");
            sb.Append("  MenuRouter: ").Append(MenuRouter).Append("\n");
            sb.Append("  Regular: ").Append(Regular).Append("\n");
            sb.Append("  SystemId: ").Append(SystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerDetailsOutput);
        }

        /// <summary>
        /// Returns true if PerDetailsOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of PerDetailsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerDetailsOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Pid == input.Pid ||
                    (this.Pid != null &&
                    this.Pid.Equals(input.Pid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MenuType == input.MenuType ||
                    this.MenuType.Equals(input.MenuType)
                ) && 
                (
                    this.MenuRouter == input.MenuRouter ||
                    (this.MenuRouter != null &&
                    this.MenuRouter.Equals(input.MenuRouter))
                ) && 
                (
                    this.Regular == input.Regular ||
                    (this.Regular != null &&
                    this.Regular.Equals(input.Regular))
                ) && 
                (
                    this.SystemId == input.SystemId ||
                    (this.SystemId != null &&
                    this.SystemId.Equals(input.SystemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Pid != null)
                    hashCode = hashCode * 59 + this.Pid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.MenuType.GetHashCode();
                if (this.MenuRouter != null)
                    hashCode = hashCode * 59 + this.MenuRouter.GetHashCode();
                if (this.Regular != null)
                    hashCode = hashCode * 59 + this.Regular.GetHashCode();
                if (this.SystemId != null)
                    hashCode = hashCode * 59 + this.SystemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
