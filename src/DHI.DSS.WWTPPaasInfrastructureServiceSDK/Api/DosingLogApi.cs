/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client;
using DHI.DSS.WWTPPaasInfrastructureServiceSDK.Model;

namespace DHI.DSS.WWTPPaasInfrastructureServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDosingLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 添加加药日志 Add dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiDosingLogAddDosingLogsPost (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));

        /// <summary>
        /// 添加加药日志 Add dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiDosingLogAddDosingLogsPostWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));
        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiDosingLogDeleteDosingLogsPost (List<Guid> requestBody = default(List<Guid>));

        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiDosingLogDeleteDosingLogsPostWithHttpInfo (List<Guid> requestBody = default(List<Guid>));
        /// <summary>
        /// 获取所有加药日志 Get all dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DosingLogDto&gt;</returns>
        Result<List<DosingLogDto>> ApiDosingLogGetAllDosingLogsGet ();

        /// <summary>
        /// 获取所有加药日志 Get all dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DosingLogDto&gt;</returns>
        ApiResponse<Result<List<DosingLogDto>>> ApiDosingLogGetAllDosingLogsGetWithHttpInfo ();
        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions
        /// </summary>
        /// <remarks>
        /// 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>List&lt;DosingLogDto&gt;</returns>
        Result<List<DosingLogDto>> ApiDosingLogGetDosingLogsByConditionsGet (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions
        /// </summary>
        /// <remarks>
        /// 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>ApiResponse of List&lt;DosingLogDto&gt;</returns>
        ApiResponse<Result<List<DosingLogDto>>> ApiDosingLogGetDosingLogsByConditionsGetWithHttpInfo (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>List&lt;DosingLogDto&gt;</returns>
        Result<List<DosingLogDto>> ApiDosingLogGetDosingLogsByTimePost (QueryByTime queryByTime = default(QueryByTime));

        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DosingLogDto&gt;</returns>
        ApiResponse<Result<List<DosingLogDto>>> ApiDosingLogGetDosingLogsByTimePostWithHttpInfo (QueryByTime queryByTime = default(QueryByTime));
        /// <summary>
        /// 更新加药日志 Update dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiDosingLogUpdateDosingLogsPost (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));

        /// <summary>
        /// 更新加药日志 Update dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiDosingLogUpdateDosingLogsPostWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDosingLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 添加加药日志 Add dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiDosingLogAddDosingLogsPostAsync (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));

        /// <summary>
        /// 添加加药日志 Add dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiDosingLogAddDosingLogsPostAsyncWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));
        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiDosingLogDeleteDosingLogsPostAsync (List<Guid> requestBody = default(List<Guid>));

        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiDosingLogDeleteDosingLogsPostAsyncWithHttpInfo (List<Guid> requestBody = default(List<Guid>));
        /// <summary>
        /// 获取所有加药日志 Get all dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DosingLogDto&gt;</returns>
        System.Threading.Tasks.Task<Result<List<DosingLogDto>>> ApiDosingLogGetAllDosingLogsGetAsync ();

        /// <summary>
        /// 获取所有加药日志 Get all dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DosingLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<DosingLogDto>>>> ApiDosingLogGetAllDosingLogsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions
        /// </summary>
        /// <remarks>
        /// 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of List&lt;DosingLogDto&gt;</returns>
        System.Threading.Tasks.Task<Result<List<DosingLogDto>>> ApiDosingLogGetDosingLogsByConditionsGetAsync (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions
        /// </summary>
        /// <remarks>
        /// 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DosingLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<DosingLogDto>>>> ApiDosingLogGetDosingLogsByConditionsGetAsyncWithHttpInfo (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>Task of List&lt;DosingLogDto&gt;</returns>
        System.Threading.Tasks.Task<Result<List<DosingLogDto>>> ApiDosingLogGetDosingLogsByTimePostAsync (QueryByTime queryByTime = default(QueryByTime));

        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DosingLogDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<DosingLogDto>>>> ApiDosingLogGetDosingLogsByTimePostAsyncWithHttpInfo (QueryByTime queryByTime = default(QueryByTime));
        /// <summary>
        /// 更新加药日志 Update dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiDosingLogUpdateDosingLogsPostAsync (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));

        /// <summary>
        /// 更新加药日志 Update dosing logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiDosingLogUpdateDosingLogsPostAsyncWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDosingLogApi : IDosingLogApiSync, IDosingLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DosingLogApi : IDosingLogApi
    {
        private DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DosingLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DosingLogApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DosingLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DosingLogApi(String basePath)
        {
            this.Configuration = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DosingLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DosingLogApi(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DosingLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DosingLogApi(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ISynchronousClient client,DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 添加加药日志 Add dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiDosingLogAddDosingLogsPost (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiDosingLogAddDosingLogsPostWithHttpInfo(dosingLogDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加加药日志 Add dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< Object >> ApiDosingLogAddDosingLogsPostWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dosingLogDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/DosingLog/AddDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogAddDosingLogsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加加药日志 Add dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiDosingLogAddDosingLogsPostAsync (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiDosingLogAddDosingLogsPostAsyncWithHttpInfo(dosingLogDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加加药日志 Add dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>>> ApiDosingLogAddDosingLogsPostAsyncWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = dosingLogDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/DosingLog/AddDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogAddDosingLogsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiDosingLogDeleteDosingLogsPost (List<Guid> requestBody = default(List<Guid>))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiDosingLogDeleteDosingLogsPostWithHttpInfo(requestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< Object >> ApiDosingLogDeleteDosingLogsPostWithHttpInfo (List<Guid> requestBody = default(List<Guid>))
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = requestBody;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/DosingLog/DeleteDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogDeleteDosingLogsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiDosingLogDeleteDosingLogsPostAsync (List<Guid> requestBody = default(List<Guid>))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiDosingLogDeleteDosingLogsPostAsyncWithHttpInfo(requestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 删除加药日志 Delete dosing logs by ids 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>>> ApiDosingLogDeleteDosingLogsPostAsyncWithHttpInfo (List<Guid> requestBody = default(List<Guid>))
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = requestBody;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/DosingLog/DeleteDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogDeleteDosingLogsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取所有加药日志 Get all dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DosingLogDto&gt;</returns>
        public Result<List<DosingLogDto>> ApiDosingLogGetAllDosingLogsGet ()
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>> localVarResponse = ApiDosingLogGetAllDosingLogsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取所有加药日志 Get all dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DosingLogDto&gt;</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< List<DosingLogDto> >> ApiDosingLogGetAllDosingLogsGetWithHttpInfo ()
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<DosingLogDto> >>("/api/DosingLog/GetAllDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogGetAllDosingLogsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取所有加药日志 Get all dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DosingLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<DosingLogDto>>> ApiDosingLogGetAllDosingLogsGetAsync ()
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>> localVarResponse = await ApiDosingLogGetAllDosingLogsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取所有加药日志 Get all dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DosingLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>>> ApiDosingLogGetAllDosingLogsGetAsyncWithHttpInfo ()
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<DosingLogDto>>>("/api/DosingLog/GetAllDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogGetAllDosingLogsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>List&lt;DosingLogDto&gt;</returns>
        public Result<List<DosingLogDto>> ApiDosingLogGetDosingLogsByConditionsGet (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>> localVarResponse = ApiDosingLogGetDosingLogsByConditionsGetWithHttpInfo(productLine, category, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>ApiResponse of List&lt;DosingLogDto&gt;</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< List<DosingLogDto> >> ApiDosingLogGetDosingLogsByConditionsGetWithHttpInfo (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string))
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "ProductLine", productLine));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "Category", category));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<DosingLogDto> >>("/api/DosingLog/GetDosingLogsByConditions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogGetDosingLogsByConditionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of List&lt;DosingLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<DosingLogDto>>> ApiDosingLogGetDosingLogsByConditionsGetAsync (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>> localVarResponse = await ApiDosingLogGetDosingLogsByConditionsGetAsyncWithHttpInfo(productLine, category, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过条件获取加药日志 Get dosing logs by conditions 通过工艺线、类别、时间等条件获取加药日志 Get dosing logs by product line, category and time
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productLine">生产线 product line code (optional)</param>
        /// <param name="category">药剂类型 chemical category (optional)</param>
        /// <param name="startTime">开始时间 start time (optional)</param>
        /// <param name="endTime">结束时间 end time (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DosingLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>>> ApiDosingLogGetDosingLogsByConditionsGetAsyncWithHttpInfo (string productLine = default(string), int? category = default(int?), string startTime = default(string), string endTime = default(string))
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (productLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "ProductLine", productLine));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "Category", category));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<DosingLogDto>>>("/api/DosingLog/GetDosingLogsByConditions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogGetDosingLogsByConditionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>List&lt;DosingLogDto&gt;</returns>
        public Result<List<DosingLogDto>> ApiDosingLogGetDosingLogsByTimePost (QueryByTime queryByTime = default(QueryByTime))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>> localVarResponse = ApiDosingLogGetDosingLogsByTimePostWithHttpInfo(queryByTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DosingLogDto&gt;</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< List<DosingLogDto> >> ApiDosingLogGetDosingLogsByTimePostWithHttpInfo (QueryByTime queryByTime = default(QueryByTime))
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = queryByTime;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< List<DosingLogDto> >>("/api/DosingLog/GetDosingLogsByTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogGetDosingLogsByTimePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>Task of List&lt;DosingLogDto&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<DosingLogDto>>> ApiDosingLogGetDosingLogsByTimePostAsync (QueryByTime queryByTime = default(QueryByTime))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>> localVarResponse = await ApiDosingLogGetDosingLogsByTimePostAsyncWithHttpInfo(queryByTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过时间获取加药日志 Get dosing logs by time 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryByTime"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DosingLogDto&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<List<DosingLogDto>>>> ApiDosingLogGetDosingLogsByTimePostAsyncWithHttpInfo (QueryByTime queryByTime = default(QueryByTime))
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = queryByTime;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<List<DosingLogDto>>>("/api/DosingLog/GetDosingLogsByTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogGetDosingLogsByTimePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新加药日志 Update dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiDosingLogUpdateDosingLogsPost (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = ApiDosingLogUpdateDosingLogsPostWithHttpInfo(dosingLogDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新加药日志 Update dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result< Object >> ApiDosingLogUpdateDosingLogsPostWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {
            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dosingLogDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/DosingLog/UpdateDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogUpdateDosingLogsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新加药日志 Update dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiDosingLogUpdateDosingLogsPostAsync (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {
             DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>> localVarResponse = await ApiDosingLogUpdateDosingLogsPostAsyncWithHttpInfo(dosingLogDto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新加药日志 Update dosing logs 
        /// </summary>
        /// <exception cref="DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dosingLogDto"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.ApiResponse<Result<Object>>> ApiDosingLogUpdateDosingLogsPostAsyncWithHttpInfo (List<DosingLogDto> dosingLogDto = default(List<DosingLogDto>))
        {

            DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.WWTPPaasInfrastructureServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = dosingLogDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/DosingLog/UpdateDosingLogs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDosingLogUpdateDosingLogsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
