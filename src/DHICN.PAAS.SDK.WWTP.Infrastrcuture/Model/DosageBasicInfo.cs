/* 
 * wwtp-paas-infrastructure-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.Infrastrcuture.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.Infrastrcuture.Model
{
    /// <summary>
    /// DosageBasicInfo
    /// </summary>
    [DataContract]
    public partial class DosageBasicInfo :  IEquatable<DosageBasicInfo>, IValidatableObject
    {
        /// <summary>
        /// 加药类型 dosing type
        /// </summary>
        /// <value>加药类型 dosing type</value>
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4

        }

        /// <summary>
        /// 加药类型 dosing type
        /// </summary>
        /// <value>加药类型 dosing type</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DosageBasicInfo" /> class.
        /// </summary>
        /// <param name="productionLine">该租户下的产线 product line.</param>
        /// <param name="isIntelligence">是否为智能加药，如果是则调用加药算法，如果不是则使用手动加药量发送给下一个接口 if use intelligent dosage.</param>
        /// <param name="code">加药量编码 dosing code.</param>
        /// <param name="dosage">加药量 dosage.</param>
        /// <param name="category">加药类型 dosing type.</param>
        public DosageBasicInfo(string productionLine = default(string), bool isIntelligence = default(bool), string code = default(string), double dosage = default(double), CategoryEnum? category = default(CategoryEnum?))
        {
            this.ProductionLine = productionLine;
            this.IsIntelligence = isIntelligence;
            this.Code = code;
            this.Dosage = dosage;
            this.Category = category;
        }
        
        /// <summary>
        /// 该租户下的产线 product line
        /// </summary>
        /// <value>该租户下的产线 product line</value>
        [DataMember(Name="productionLine", EmitDefaultValue=true)]
        public string ProductionLine { get; set; }

        /// <summary>
        /// 是否为智能加药，如果是则调用加药算法，如果不是则使用手动加药量发送给下一个接口 if use intelligent dosage
        /// </summary>
        /// <value>是否为智能加药，如果是则调用加药算法，如果不是则使用手动加药量发送给下一个接口 if use intelligent dosage</value>
        [DataMember(Name="isIntelligence", EmitDefaultValue=false)]
        public bool IsIntelligence { get; set; }

        /// <summary>
        /// 加药量编码 dosing code
        /// </summary>
        /// <value>加药量编码 dosing code</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// 加药量 dosage
        /// </summary>
        /// <value>加药量 dosage</value>
        [DataMember(Name="dosage", EmitDefaultValue=false)]
        public double Dosage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DosageBasicInfo {\n");
            sb.Append("  ProductionLine: ").Append(ProductionLine).Append("\n");
            sb.Append("  IsIntelligence: ").Append(IsIntelligence).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Dosage: ").Append(Dosage).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DosageBasicInfo);
        }

        /// <summary>
        /// Returns true if DosageBasicInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DosageBasicInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DosageBasicInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductionLine == input.ProductionLine ||
                    (this.ProductionLine != null &&
                    this.ProductionLine.Equals(input.ProductionLine))
                ) && 
                (
                    this.IsIntelligence == input.IsIntelligence ||
                    this.IsIntelligence.Equals(input.IsIntelligence)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Dosage == input.Dosage ||
                    this.Dosage.Equals(input.Dosage)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductionLine != null)
                    hashCode = hashCode * 59 + this.ProductionLine.GetHashCode();
                hashCode = hashCode * 59 + this.IsIntelligence.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                hashCode = hashCode * 59 + this.Dosage.GetHashCode();
                hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
