/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// PipeProfileItem
    /// </summary>
    [DataContract]
    public partial class PipeProfileItem :  IEquatable<PipeProfileItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipeProfileItem" /> class.
        /// </summary>
        /// <param name="pipeID">管段ID pipe ID.</param>
        /// <param name="diameter">管径或管高 pipe diameter or height.</param>
        /// <param name="length">管长 pipe length.</param>
        /// <param name="fromNode">fromNode.</param>
        /// <param name="toNode">toNode.</param>
        public PipeProfileItem(string pipeID = default(string), double diameter = default(double), double length = default(double), NodeItem fromNode = default(NodeItem), NodeItem toNode = default(NodeItem))
        {
            this.PipeID = pipeID;
            this.Diameter = diameter;
            this.Length = length;
            this.FromNode = fromNode;
            this.ToNode = toNode;
        }
        
        /// <summary>
        /// 管段ID pipe ID
        /// </summary>
        /// <value>管段ID pipe ID</value>
        [DataMember(Name="pipeID", EmitDefaultValue=true)]
        public string PipeID { get; set; }

        /// <summary>
        /// 管径或管高 pipe diameter or height
        /// </summary>
        /// <value>管径或管高 pipe diameter or height</value>
        [DataMember(Name="diameter", EmitDefaultValue=false)]
        public double Diameter { get; set; }

        /// <summary>
        /// 管长 pipe length
        /// </summary>
        /// <value>管长 pipe length</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public double Length { get; set; }

        /// <summary>
        /// Gets or Sets FromNode
        /// </summary>
        [DataMember(Name="fromNode", EmitDefaultValue=false)]
        public NodeItem FromNode { get; set; }

        /// <summary>
        /// Gets or Sets ToNode
        /// </summary>
        [DataMember(Name="toNode", EmitDefaultValue=false)]
        public NodeItem ToNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PipeProfileItem {\n");
            sb.Append("  PipeID: ").Append(PipeID).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  FromNode: ").Append(FromNode).Append("\n");
            sb.Append("  ToNode: ").Append(ToNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PipeProfileItem);
        }

        /// <summary>
        /// Returns true if PipeProfileItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PipeProfileItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PipeProfileItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PipeID == input.PipeID ||
                    (this.PipeID != null &&
                    this.PipeID.Equals(input.PipeID))
                ) && 
                (
                    this.Diameter == input.Diameter ||
                    this.Diameter.Equals(input.Diameter)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.FromNode == input.FromNode ||
                    (this.FromNode != null &&
                    this.FromNode.Equals(input.FromNode))
                ) && 
                (
                    this.ToNode == input.ToNode ||
                    (this.ToNode != null &&
                    this.ToNode.Equals(input.ToNode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PipeID != null)
                    hashCode = hashCode * 59 + this.PipeID.GetHashCode();
                hashCode = hashCode * 59 + this.Diameter.GetHashCode();
                hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.FromNode != null)
                    hashCode = hashCode * 59 + this.FromNode.GetHashCode();
                if (this.ToNode != null)
                    hashCode = hashCode * 59 + this.ToNode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
