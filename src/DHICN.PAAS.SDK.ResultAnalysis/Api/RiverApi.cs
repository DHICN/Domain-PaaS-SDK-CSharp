/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHICN.PAAS.SDK.ResultAnalysis.Client;
using DHICN.PAAS.SDK.ResultAnalysis.Model;

namespace DHICN.PAAS.SDK.ResultAnalysis.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRiverApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river
        /// </summary>
        /// <remarks>
        /// 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>BaseDynamicOutput</returns>
        Result<BaseDynamicOutput> ApiV1ResultRiverDynamicGet (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river
        /// </summary>
        /// <remarks>
        /// 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>ApiResponse of BaseDynamicOutput</returns>
        ApiResponse<Result<BaseDynamicOutput>> ApiV1ResultRiverDynamicGetWithHttpInfo (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates
        /// </summary>
        /// <remarks>
        /// 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;GateStatisticsOutput&gt;</returns>
        Result<List<GateStatisticsOutput>> ApiV1ResultRiverGateStatisticsGet (string scenarioId);

        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates
        /// </summary>
        /// <remarks>
        /// 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;GateStatisticsOutput&gt;</returns>
        ApiResponse<Result<List<GateStatisticsOutput>>> ApiV1ResultRiverGateStatisticsGetWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data
        /// </summary>
        /// <remarks>
        /// 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>RiverProfile</returns>
        Result<RiverProfile> ApiV1ResultRiverProfileTimeseriesGet (string scenarioId, List<string> riverID = default(List<string>));

        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data
        /// </summary>
        /// <remarks>
        /// 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>ApiResponse of RiverProfile</returns>
        ApiResponse<Result<RiverProfile>> ApiV1ResultRiverProfileTimeseriesGetWithHttpInfo (string scenarioId, List<string> riverID = default(List<string>));
        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;PumpStatisticsOutput&gt;</returns>
        Result<List<PumpStatisticsOutput>> ApiV1ResultRiverPumpStatisticsGet (string scenarioId);

        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;PumpStatisticsOutput&gt;</returns>
        ApiResponse<Result<List<PumpStatisticsOutput>>> ApiV1ResultRiverPumpStatisticsGetWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        Result<BaseTimeseriesOutput> ApiV1ResultRiverPumpTimeseriesGet (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));

        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        ApiResponse<Result<BaseTimeseriesOutput>> ApiV1ResultRiverPumpTimeseriesGetWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));
        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river
        /// </summary>
        /// <remarks>
        /// 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>BaseStaticOutput</returns>
        Result<BaseStaticOutput> ApiV1ResultRiverStaticGet (string scenarioId, string riverDataType = default(string), string statisticType = default(string));

        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river
        /// </summary>
        /// <remarks>
        /// 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>ApiResponse of BaseStaticOutput</returns>
        ApiResponse<Result<BaseStaticOutput>> ApiV1ResultRiverStaticGetWithHttpInfo (string scenarioId, string riverDataType = default(string), string statisticType = default(string));
        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river
        /// </summary>
        /// <remarks>
        /// 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        Result<BaseTimeseriesOutput> ApiV1ResultRiverTimeseriesGet (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?));

        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river
        /// </summary>
        /// <remarks>
        /// 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        ApiResponse<Result<BaseTimeseriesOutput>> ApiV1ResultRiverTimeseriesGetWithHttpInfo (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRiverApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river
        /// </summary>
        /// <remarks>
        /// 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of BaseDynamicOutput</returns>
        System.Threading.Tasks.Task<Result<BaseDynamicOutput>> ApiV1ResultRiverDynamicGetAsync (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river
        /// </summary>
        /// <remarks>
        /// 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of ApiResponse (BaseDynamicOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseDynamicOutput>>> ApiV1ResultRiverDynamicGetAsyncWithHttpInfo (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates
        /// </summary>
        /// <remarks>
        /// 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;GateStatisticsOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<GateStatisticsOutput>>> ApiV1ResultRiverGateStatisticsGetAsync (string scenarioId);

        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates
        /// </summary>
        /// <remarks>
        /// 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;GateStatisticsOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<GateStatisticsOutput>>>> ApiV1ResultRiverGateStatisticsGetAsyncWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data
        /// </summary>
        /// <remarks>
        /// 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>Task of RiverProfile</returns>
        System.Threading.Tasks.Task<Result<RiverProfile>> ApiV1ResultRiverProfileTimeseriesGetAsync (string scenarioId, List<string> riverID = default(List<string>));

        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data
        /// </summary>
        /// <remarks>
        /// 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>Task of ApiResponse (RiverProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<RiverProfile>>> ApiV1ResultRiverProfileTimeseriesGetAsyncWithHttpInfo (string scenarioId, List<string> riverID = default(List<string>));
        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;PumpStatisticsOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<PumpStatisticsOutput>>> ApiV1ResultRiverPumpStatisticsGetAsync (string scenarioId);

        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;PumpStatisticsOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<PumpStatisticsOutput>>>> ApiV1ResultRiverPumpStatisticsGetAsyncWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultRiverPumpTimeseriesGetAsync (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));

        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps
        /// </summary>
        /// <remarks>
        /// 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultRiverPumpTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));
        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river
        /// </summary>
        /// <remarks>
        /// 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>Task of BaseStaticOutput</returns>
        System.Threading.Tasks.Task<Result<BaseStaticOutput>> ApiV1ResultRiverStaticGetAsync (string scenarioId, string riverDataType = default(string), string statisticType = default(string));

        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river
        /// </summary>
        /// <remarks>
        /// 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>Task of ApiResponse (BaseStaticOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseStaticOutput>>> ApiV1ResultRiverStaticGetAsyncWithHttpInfo (string scenarioId, string riverDataType = default(string), string statisticType = default(string));
        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river
        /// </summary>
        /// <remarks>
        /// 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultRiverTimeseriesGetAsync (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?));

        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river
        /// </summary>
        /// <remarks>
        /// 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultRiverTimeseriesGetAsyncWithHttpInfo (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRiverApi : IRiverApiSync, IRiverApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RiverApi : IRiverApi
    {
        private DHICN.PAAS.SDK.ResultAnalysis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RiverApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RiverApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RiverApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RiverApi(String basePath)
        {
            this.Configuration = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.ResultAnalysis.Client.GlobalConfiguration.Instance,
                new DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RiverApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RiverApi(DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.ResultAnalysis.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RiverApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RiverApi(DHICN.PAAS.SDK.ResultAnalysis.Client.ISynchronousClient client,DHICN.PAAS.SDK.ResultAnalysis.Client.IAsynchronousClient asyncClient, DHICN.PAAS.SDK.ResultAnalysis.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>BaseDynamicOutput</returns>
        public Result<BaseDynamicOutput> ApiV1ResultRiverDynamicGet (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>> localVarResponse = ApiV1ResultRiverDynamicGetWithHttpInfo(scenarioId, riverDataType, frequency, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>ApiResponse of BaseDynamicOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseDynamicOutput >> ApiV1ResultRiverDynamicGetWithHttpInfo (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverDynamicGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (riverDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverDataType", riverDataType));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Frequency", frequency));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseDynamicOutput >>("/api/v1/result/river/dynamic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverDynamicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of BaseDynamicOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseDynamicOutput>> ApiV1ResultRiverDynamicGetAsync (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>> localVarResponse = await ApiV1ResultRiverDynamicGetAsyncWithHttpInfo(scenarioId, riverDataType, frequency, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道动态结果数据 Get 1D dynamic results of river 获取河道水位、流量的动态变化结果 Get river dynamic results including water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="frequency">提取结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">提取结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">提取结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of ApiResponse (BaseDynamicOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>>> ApiV1ResultRiverDynamicGetAsyncWithHttpInfo (string scenarioId, string riverDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverDynamicGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (riverDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverDataType", riverDataType));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Frequency", frequency));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseDynamicOutput>>("/api/v1/result/river/dynamic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverDynamicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;GateStatisticsOutput&gt;</returns>
        public Result<List<GateStatisticsOutput>> ApiV1ResultRiverGateStatisticsGet (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<GateStatisticsOutput>>> localVarResponse = ApiV1ResultRiverGateStatisticsGetWithHttpInfo(scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;GateStatisticsOutput&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<GateStatisticsOutput> >> ApiV1ResultRiverGateStatisticsGetWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverGateStatisticsGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<GateStatisticsOutput> >>("/api/v1/result/river/gate-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverGateStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;GateStatisticsOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<GateStatisticsOutput>>> ApiV1ResultRiverGateStatisticsGetAsync (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<GateStatisticsOutput>>> localVarResponse = await ApiV1ResultRiverGateStatisticsGetAsyncWithHttpInfo(scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道闸门的统计结果 Get statistic result of river gates 获取河道闸门的统计结果数据，包括累计开启时长等 Get river structure gates statistic results, including gate accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;GateStatisticsOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<GateStatisticsOutput>>>> ApiV1ResultRiverGateStatisticsGetAsyncWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverGateStatisticsGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<GateStatisticsOutput>>>("/api/v1/result/river/gate-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverGateStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>RiverProfile</returns>
        public Result<RiverProfile> ApiV1ResultRiverProfileTimeseriesGet (string scenarioId, List<string> riverID = default(List<string>))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<RiverProfile>> localVarResponse = ApiV1ResultRiverProfileTimeseriesGetWithHttpInfo(scenarioId, riverID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>ApiResponse of RiverProfile</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< RiverProfile >> ApiV1ResultRiverProfileTimeseriesGetWithHttpInfo (string scenarioId, List<string> riverID = default(List<string>))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverProfileTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (riverID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("multi", "RiverID", riverID));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< RiverProfile >>("/api/v1/result/river/profile-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverProfileTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>Task of RiverProfile</returns>
        public async System.Threading.Tasks.Task<Result<RiverProfile>> ApiV1ResultRiverProfileTimeseriesGetAsync (string scenarioId, List<string> riverID = default(List<string>))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<RiverProfile>> localVarResponse = await ApiV1ResultRiverProfileTimeseriesGetAsyncWithHttpInfo(scenarioId, riverID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道剖面图数据 Get river profile plot data 获取指定河段上的剖面图数据 Get profile plot data of a river branch of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverID">河道ID (optional)</param>
        /// <returns>Task of ApiResponse (RiverProfile)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<RiverProfile>>> ApiV1ResultRiverProfileTimeseriesGetAsyncWithHttpInfo (string scenarioId, List<string> riverID = default(List<string>))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverProfileTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (riverID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("multi", "RiverID", riverID));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<RiverProfile>>("/api/v1/result/river/profile-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverProfileTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;PumpStatisticsOutput&gt;</returns>
        public Result<List<PumpStatisticsOutput>> ApiV1ResultRiverPumpStatisticsGet (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<PumpStatisticsOutput>>> localVarResponse = ApiV1ResultRiverPumpStatisticsGetWithHttpInfo(scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;PumpStatisticsOutput&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<PumpStatisticsOutput> >> ApiV1ResultRiverPumpStatisticsGetWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverPumpStatisticsGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<PumpStatisticsOutput> >>("/api/v1/result/river/pump-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverPumpStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;PumpStatisticsOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<PumpStatisticsOutput>>> ApiV1ResultRiverPumpStatisticsGetAsync (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<PumpStatisticsOutput>>> localVarResponse = await ApiV1ResultRiverPumpStatisticsGetAsyncWithHttpInfo(scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道泵站统计结果 Get statistic result of river pumps 获取河道泵站的统计结果数据，包括累计流量、累计开启时长等 Get river structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;PumpStatisticsOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<PumpStatisticsOutput>>>> ApiV1ResultRiverPumpStatisticsGetAsyncWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverPumpStatisticsGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<PumpStatisticsOutput>>>("/api/v1/result/river/pump-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverPumpStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        public Result<BaseTimeseriesOutput> ApiV1ResultRiverPumpTimeseriesGet (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = ApiV1ResultRiverPumpTimeseriesGetWithHttpInfo(scenarioId, pumpID, pumpDataType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseTimeseriesOutput >> ApiV1ResultRiverPumpTimeseriesGetWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverPumpTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pumpID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpID", pumpID));
            }
            if (pumpDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpDataType", pumpDataType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseTimeseriesOutput >>("/api/v1/result/river/pump-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverPumpTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultRiverPumpTimeseriesGetAsync (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = await ApiV1ResultRiverPumpTimeseriesGetAsyncWithHttpInfo(scenarioId, pumpID, pumpDataType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道泵站的时间序列结果 Get time-series result of river pumps 获取河道泵站的水位、流量时间序列结果 Get water level or discharge time series result of a single river pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultRiverPumpTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverPumpTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pumpID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpID", pumpID));
            }
            if (pumpDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpDataType", pumpDataType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseTimeseriesOutput>>("/api/v1/result/river/pump-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverPumpTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>BaseStaticOutput</returns>
        public Result<BaseStaticOutput> ApiV1ResultRiverStaticGet (string scenarioId, string riverDataType = default(string), string statisticType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>> localVarResponse = ApiV1ResultRiverStaticGetWithHttpInfo(scenarioId, riverDataType, statisticType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>ApiResponse of BaseStaticOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseStaticOutput >> ApiV1ResultRiverStaticGetWithHttpInfo (string scenarioId, string riverDataType = default(string), string statisticType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverStaticGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (riverDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverDataType", riverDataType));
            }
            if (statisticType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StatisticType", statisticType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseStaticOutput >>("/api/v1/result/river/static", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverStaticGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>Task of BaseStaticOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseStaticOutput>> ApiV1ResultRiverStaticGetAsync (string scenarioId, string riverDataType = default(string), string statisticType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>> localVarResponse = await ApiV1ResultRiverStaticGetAsyncWithHttpInfo(scenarioId, riverDataType, statisticType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道静态结果数据 Get 1D static results of river 获取河道统计结果，包括最大水位、流量，最小水位、流量 Get river statistic results including maximum and minimum of water level, discharge of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max (optional)</param>
        /// <returns>Task of ApiResponse (BaseStaticOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>>> ApiV1ResultRiverStaticGetAsyncWithHttpInfo (string scenarioId, string riverDataType = default(string), string statisticType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverStaticGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (riverDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverDataType", riverDataType));
            }
            if (statisticType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StatisticType", statisticType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseStaticOutput>>("/api/v1/result/river/static", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverStaticGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        public Result<BaseTimeseriesOutput> ApiV1ResultRiverTimeseriesGet (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = ApiV1ResultRiverTimeseriesGetWithHttpInfo(scenarioId, riverDataType, riverId, chainage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseTimeseriesOutput >> ApiV1ResultRiverTimeseriesGetWithHttpInfo (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (riverDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverDataType", riverDataType));
            }
            if (riverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverId", riverId));
            }
            if (chainage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Chainage", chainage));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseTimeseriesOutput >>("/api/v1/result/river/timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultRiverTimeseriesGetAsync (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = await ApiV1ResultRiverTimeseriesGetAsyncWithHttpInfo(scenarioId, riverDataType, riverId, chainage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取河道单点时间序列结果 Get single-point time-series result on the river 获取指定河道计算点上的水位、流量时间序列结果数据 Get river water level or discharge time series result on a single river point of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="riverDataType">河道结果类型 river result type:  0-WaterLevel;  1-Discharge (optional)</param>
        /// <param name="riverId">河道ID river ID (optional)</param>
        /// <param name="chainage">河道计算点里程 river point chainage (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultRiverTimeseriesGetAsyncWithHttpInfo (string scenarioId, string riverDataType = default(string), string riverId = default(string), decimal? chainage = default(decimal?))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling RiverApi->ApiV1ResultRiverTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (riverDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverDataType", riverDataType));
            }
            if (riverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "RiverId", riverId));
            }
            if (chainage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Chainage", chainage));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseTimeseriesOutput>>("/api/v1/result/river/timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultRiverTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
