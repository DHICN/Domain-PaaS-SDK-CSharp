/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHICN.PAAS.SDK.Identity.Client;
using DHICN.PAAS.SDK.Identity.Model;

namespace DHICN.PAAS.SDK.Identity.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMicroServicesManagerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>MicroServiceOutput</returns>
        Result<MicroServiceOutput> ApiAppMicroServicesManagerIdMicroServiceByIdGet (string id);

        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>ApiResponse of MicroServiceOutput</returns>
        ApiResponse<Result<MicroServiceOutput>> ApiAppMicroServicesManagerIdMicroServiceByIdGetWithHttpInfo (string id);
        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>GetRolePermissionsOutput</returns>
        Result<GetRolePermissionsOutput> ApiAppMicroServicesManagerIdRolePermissionsByIdGet (string id);

        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>ApiResponse of GetRolePermissionsOutput</returns>
        ApiResponse<Result<GetRolePermissionsOutput>> ApiAppMicroServicesManagerIdRolePermissionsByIdGetWithHttpInfo (string id);
        /// <summary>
        /// 删除微服务 Delete micro service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMicroServicesManagerMicroServiceDelete (List<string> ids);

        /// <summary>
        /// 删除微服务 Delete micro service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMicroServicesManagerMicroServiceDeleteWithHttpInfo (List<string> ids);
        /// <summary>
        /// 添加微服务 Add microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMicroServicesManagerMicroServicePost (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput));

        /// <summary>
        /// 添加微服务 Add microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMicroServicesManagerMicroServicePostWithHttpInfo (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput));
        /// <summary>
        /// 更新微服务 Update microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMicroServicesManagerMicroServicePut (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput));

        /// <summary>
        /// 更新微服务 Update microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMicroServicesManagerMicroServicePutWithHttpInfo (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput));
        /// <summary>
        /// 获取微服务 Get micro services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>List&lt;MicroServiceOutput&gt;</returns>
        Result<List<MicroServiceOutput>> ApiAppMicroServicesManagerMicroServicesGet (string keywords = default(string));

        /// <summary>
        /// 获取微服务 Get micro services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>ApiResponse of List&lt;MicroServiceOutput&gt;</returns>
        ApiResponse<Result<List<MicroServiceOutput>>> ApiAppMicroServicesManagerMicroServicesGetWithHttpInfo (string keywords = default(string));
        /// <summary>
        /// 删除角色权限 Delete role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMicroServicesManagerRolePermissionsDelete (List<string> ids);

        /// <summary>
        /// 删除角色权限 Delete role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMicroServicesManagerRolePermissionsDeleteWithHttpInfo (List<string> ids);
        /// <summary>
        /// 获取角色权限 Get role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>List&lt;GetRolePermissionsOutput&gt;</returns>
        Result<List<GetRolePermissionsOutput>> ApiAppMicroServicesManagerRolePermissionsGet (string tenantId = default(string), string role = default(string));

        /// <summary>
        /// 获取角色权限 Get role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>ApiResponse of List&lt;GetRolePermissionsOutput&gt;</returns>
        ApiResponse<Result<List<GetRolePermissionsOutput>>> ApiAppMicroServicesManagerRolePermissionsGetWithHttpInfo (string tenantId = default(string), string role = default(string));
        /// <summary>
        /// 添加角色权限 Add role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMicroServicesManagerRolePermissionsPost (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput));

        /// <summary>
        /// 添加角色权限 Add role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMicroServicesManagerRolePermissionsPostWithHttpInfo (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput));
        /// <summary>
        /// 更新角色权限 Update role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>Object</returns>
        Result<Object> ApiAppMicroServicesManagerRolePermissionsPut (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput));

        /// <summary>
        /// 更新角色权限 Update role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Result<Object>> ApiAppMicroServicesManagerRolePermissionsPutWithHttpInfo (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMicroServicesManagerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>Task of MicroServiceOutput</returns>
        System.Threading.Tasks.Task<Result<MicroServiceOutput>> ApiAppMicroServicesManagerIdMicroServiceByIdGetAsync (string id);

        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>Task of ApiResponse (MicroServiceOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<MicroServiceOutput>>> ApiAppMicroServicesManagerIdMicroServiceByIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>Task of GetRolePermissionsOutput</returns>
        System.Threading.Tasks.Task<Result<GetRolePermissionsOutput>> ApiAppMicroServicesManagerIdRolePermissionsByIdGetAsync (string id);

        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>Task of ApiResponse (GetRolePermissionsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<GetRolePermissionsOutput>>> ApiAppMicroServicesManagerIdRolePermissionsByIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 删除微服务 Delete micro service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerMicroServiceDeleteAsync (List<string> ids);

        /// <summary>
        /// 删除微服务 Delete micro service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMicroServicesManagerMicroServiceDeleteAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// 添加微服务 Add microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerMicroServicePostAsync (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput));

        /// <summary>
        /// 添加微服务 Add microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMicroServicesManagerMicroServicePostAsyncWithHttpInfo (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput));
        /// <summary>
        /// 更新微服务 Update microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerMicroServicePutAsync (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput));

        /// <summary>
        /// 更新微服务 Update microservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMicroServicesManagerMicroServicePutAsyncWithHttpInfo (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput));
        /// <summary>
        /// 获取微服务 Get micro services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>Task of List&lt;MicroServiceOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<MicroServiceOutput>>> ApiAppMicroServicesManagerMicroServicesGetAsync (string keywords = default(string));

        /// <summary>
        /// 获取微服务 Get micro services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MicroServiceOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<MicroServiceOutput>>>> ApiAppMicroServicesManagerMicroServicesGetAsyncWithHttpInfo (string keywords = default(string));
        /// <summary>
        /// 删除角色权限 Delete role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerRolePermissionsDeleteAsync (List<string> ids);

        /// <summary>
        /// 删除角色权限 Delete role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMicroServicesManagerRolePermissionsDeleteAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// 获取角色权限 Get role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>Task of List&lt;GetRolePermissionsOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<GetRolePermissionsOutput>>> ApiAppMicroServicesManagerRolePermissionsGetAsync (string tenantId = default(string), string role = default(string));

        /// <summary>
        /// 获取角色权限 Get role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetRolePermissionsOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<GetRolePermissionsOutput>>>> ApiAppMicroServicesManagerRolePermissionsGetAsyncWithHttpInfo (string tenantId = default(string), string role = default(string));
        /// <summary>
        /// 添加角色权限 Add role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerRolePermissionsPostAsync (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput));

        /// <summary>
        /// 添加角色权限 Add role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMicroServicesManagerRolePermissionsPostAsyncWithHttpInfo (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput));
        /// <summary>
        /// 更新角色权限 Update role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerRolePermissionsPutAsync (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput));

        /// <summary>
        /// 更新角色权限 Update role permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Object>>> ApiAppMicroServicesManagerRolePermissionsPutAsyncWithHttpInfo (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMicroServicesManagerApi : IMicroServicesManagerApiSync, IMicroServicesManagerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MicroServicesManagerApi : IMicroServicesManagerApi
    {
        private DHICN.PAAS.SDK.Identity.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MicroServicesManagerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MicroServicesManagerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MicroServicesManagerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MicroServicesManagerApi(String basePath)
        {
            this.Configuration = DHICN.PAAS.SDK.Identity.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.Identity.Client.GlobalConfiguration.Instance,
                new DHICN.PAAS.SDK.Identity.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHICN.PAAS.SDK.Identity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.Identity.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHICN.PAAS.SDK.Identity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MicroServicesManagerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MicroServicesManagerApi(DHICN.PAAS.SDK.Identity.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHICN.PAAS.SDK.Identity.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.Identity.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHICN.PAAS.SDK.Identity.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.Identity.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHICN.PAAS.SDK.Identity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MicroServicesManagerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MicroServicesManagerApi(DHICN.PAAS.SDK.Identity.Client.ISynchronousClient client,DHICN.PAAS.SDK.Identity.Client.IAsynchronousClient asyncClient, DHICN.PAAS.SDK.Identity.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHICN.PAAS.SDK.Identity.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHICN.PAAS.SDK.Identity.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHICN.PAAS.SDK.Identity.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHICN.PAAS.SDK.Identity.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHICN.PAAS.SDK.Identity.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>MicroServiceOutput</returns>
        public Result<MicroServiceOutput> ApiAppMicroServicesManagerIdMicroServiceByIdGet (string id)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<MicroServiceOutput>> localVarResponse = ApiAppMicroServicesManagerIdMicroServiceByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>ApiResponse of MicroServiceOutput</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< MicroServiceOutput >> ApiAppMicroServicesManagerIdMicroServiceByIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'id' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerIdMicroServiceByIdGet");

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< MicroServiceOutput >>("/api/app/microServicesManager/{id}/microServiceById", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerIdMicroServiceByIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>Task of MicroServiceOutput</returns>
        public async System.Threading.Tasks.Task<Result<MicroServiceOutput>> ApiAppMicroServicesManagerIdMicroServiceByIdGetAsync (string id)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<MicroServiceOutput>> localVarResponse = await ApiAppMicroServicesManagerIdMicroServiceByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过微服务Id获取微服务 Get microservice through microservice ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">微服务ID micro service id</param>
        /// <returns>Task of ApiResponse (MicroServiceOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<MicroServiceOutput>>> ApiAppMicroServicesManagerIdMicroServiceByIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'id' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerIdMicroServiceByIdGet");


            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<MicroServiceOutput>>("/api/app/microServicesManager/{id}/microServiceById", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerIdMicroServiceByIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>GetRolePermissionsOutput</returns>
        public Result<GetRolePermissionsOutput> ApiAppMicroServicesManagerIdRolePermissionsByIdGet (string id)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<GetRolePermissionsOutput>> localVarResponse = ApiAppMicroServicesManagerIdRolePermissionsByIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>ApiResponse of GetRolePermissionsOutput</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< GetRolePermissionsOutput >> ApiAppMicroServicesManagerIdRolePermissionsByIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'id' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerIdRolePermissionsByIdGet");

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< GetRolePermissionsOutput >>("/api/app/microServicesManager/{id}/rolePermissionsById", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerIdRolePermissionsByIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>Task of GetRolePermissionsOutput</returns>
        public async System.Threading.Tasks.Task<Result<GetRolePermissionsOutput>> ApiAppMicroServicesManagerIdRolePermissionsByIdGetAsync (string id)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<GetRolePermissionsOutput>> localVarResponse = await ApiAppMicroServicesManagerIdRolePermissionsByIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 通过d获取角色权限 Get role permissions through ID 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">角色权限ID role permission id</param>
        /// <returns>Task of ApiResponse (GetRolePermissionsOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<GetRolePermissionsOutput>>> ApiAppMicroServicesManagerIdRolePermissionsByIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'id' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerIdRolePermissionsByIdGet");


            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<GetRolePermissionsOutput>>("/api/app/microServicesManager/{id}/rolePermissionsById", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerIdRolePermissionsByIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除微服务 Delete micro service 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMicroServicesManagerMicroServiceDelete (List<string> ids)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMicroServicesManagerMicroServiceDeleteWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 删除微服务 Delete micro service 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>ApiResponse of Object</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< Object >> ApiAppMicroServicesManagerMicroServiceDeleteWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'ids' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerMicroServiceDelete");

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("multi", "Ids", ids));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Result< Object >>("/api/app/microServicesManager/microService", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServiceDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除微服务 Delete micro service 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerMicroServiceDeleteAsync (List<string> ids)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMicroServicesManagerMicroServiceDeleteAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 删除微服务 Delete micro service 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>>> ApiAppMicroServicesManagerMicroServiceDeleteAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'ids' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerMicroServiceDelete");


            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("multi", "Ids", ids));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Result<Object>>("/api/app/microServicesManager/microService", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServiceDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加微服务 Add microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMicroServicesManagerMicroServicePost (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMicroServicesManagerMicroServicePostWithHttpInfo(addMicroServiceInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加微服务 Add microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< Object >> ApiAppMicroServicesManagerMicroServicePostWithHttpInfo (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput))
        {
            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addMicroServiceInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/microServicesManager/microService", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServicePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加微服务 Add microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerMicroServicePostAsync (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMicroServicesManagerMicroServicePostAsyncWithHttpInfo(addMicroServiceInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加微服务 Add microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMicroServiceInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>>> ApiAppMicroServicesManagerMicroServicePostAsyncWithHttpInfo (AddMicroServiceInput addMicroServiceInput = default(AddMicroServiceInput))
        {

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = addMicroServiceInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/microServicesManager/microService", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServicePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新微服务 Update microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMicroServicesManagerMicroServicePut (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMicroServicesManagerMicroServicePutWithHttpInfo(updateMicroServiceInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新微服务 Update microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< Object >> ApiAppMicroServicesManagerMicroServicePutWithHttpInfo (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput))
        {
            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateMicroServiceInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Result< Object >>("/api/app/microServicesManager/microService", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServicePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新微服务 Update microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerMicroServicePutAsync (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMicroServicesManagerMicroServicePutAsyncWithHttpInfo(updateMicroServiceInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新微服务 Update microservices 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMicroServiceInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>>> ApiAppMicroServicesManagerMicroServicePutAsyncWithHttpInfo (UpdateMicroServiceInput updateMicroServiceInput = default(UpdateMicroServiceInput))
        {

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateMicroServiceInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Result<Object>>("/api/app/microServicesManager/microService", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServicePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取微服务 Get micro services 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>List&lt;MicroServiceOutput&gt;</returns>
        public Result<List<MicroServiceOutput>> ApiAppMicroServicesManagerMicroServicesGet (string keywords = default(string))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<List<MicroServiceOutput>>> localVarResponse = ApiAppMicroServicesManagerMicroServicesGetWithHttpInfo(keywords);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取微服务 Get micro services 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>ApiResponse of List&lt;MicroServiceOutput&gt;</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< List<MicroServiceOutput> >> ApiAppMicroServicesManagerMicroServicesGetWithHttpInfo (string keywords = default(string))
        {
            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("", "Keywords", keywords));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<MicroServiceOutput> >>("/api/app/microServicesManager/microServices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取微服务 Get micro services 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>Task of List&lt;MicroServiceOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<MicroServiceOutput>>> ApiAppMicroServicesManagerMicroServicesGetAsync (string keywords = default(string))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<List<MicroServiceOutput>>> localVarResponse = await ApiAppMicroServicesManagerMicroServicesGetAsyncWithHttpInfo(keywords);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取微服务 Get micro services 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">根据关键字检索 query key words (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MicroServiceOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<List<MicroServiceOutput>>>> ApiAppMicroServicesManagerMicroServicesGetAsyncWithHttpInfo (string keywords = default(string))
        {

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("", "Keywords", keywords));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<MicroServiceOutput>>>("/api/app/microServicesManager/microServices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerMicroServicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除角色权限 Delete role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMicroServicesManagerRolePermissionsDelete (List<string> ids)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMicroServicesManagerRolePermissionsDeleteWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 删除角色权限 Delete role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>ApiResponse of Object</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< Object >> ApiAppMicroServicesManagerRolePermissionsDeleteWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'ids' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerRolePermissionsDelete");

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("multi", "Ids", ids));


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Result< Object >>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除角色权限 Delete role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerRolePermissionsDeleteAsync (List<string> ids)
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMicroServicesManagerRolePermissionsDeleteAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 删除角色权限 Delete role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">ID列表 ids</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>>> ApiAppMicroServicesManagerRolePermissionsDeleteAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new DHICN.PAAS.SDK.Identity.Client.ApiException(400, "Missing required parameter 'ids' when calling MicroServicesManagerApi->ApiAppMicroServicesManagerRolePermissionsDelete");


            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("multi", "Ids", ids));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Result<Object>>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取角色权限 Get role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>List&lt;GetRolePermissionsOutput&gt;</returns>
        public Result<List<GetRolePermissionsOutput>> ApiAppMicroServicesManagerRolePermissionsGet (string tenantId = default(string), string role = default(string))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<List<GetRolePermissionsOutput>>> localVarResponse = ApiAppMicroServicesManagerRolePermissionsGetWithHttpInfo(tenantId, role);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取角色权限 Get role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>ApiResponse of List&lt;GetRolePermissionsOutput&gt;</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< List<GetRolePermissionsOutput> >> ApiAppMicroServicesManagerRolePermissionsGetWithHttpInfo (string tenantId = default(string), string role = default(string))
        {
            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("", "TenantId", tenantId));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("", "Role", role));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<GetRolePermissionsOutput> >>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取角色权限 Get role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>Task of List&lt;GetRolePermissionsOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<GetRolePermissionsOutput>>> ApiAppMicroServicesManagerRolePermissionsGetAsync (string tenantId = default(string), string role = default(string))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<List<GetRolePermissionsOutput>>> localVarResponse = await ApiAppMicroServicesManagerRolePermissionsGetAsyncWithHttpInfo(tenantId, role);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取角色权限 Get role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">租户Id tenant id (optional)</param>
        /// <param name="role">角色 role name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GetRolePermissionsOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<List<GetRolePermissionsOutput>>>> ApiAppMicroServicesManagerRolePermissionsGetAsyncWithHttpInfo (string tenantId = default(string), string role = default(string))
        {

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("", "TenantId", tenantId));
            }
            if (role != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.Identity.Client.ClientUtils.ParameterToMultiMap("", "Role", role));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<GetRolePermissionsOutput>>>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加角色权限 Add role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMicroServicesManagerRolePermissionsPost (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMicroServicesManagerRolePermissionsPostWithHttpInfo(addRolePermissionsInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 添加角色权限 Add role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< Object >> ApiAppMicroServicesManagerRolePermissionsPostWithHttpInfo (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput))
        {
            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addRolePermissionsInput;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Object >>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 添加角色权限 Add role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerRolePermissionsPostAsync (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMicroServicesManagerRolePermissionsPostAsyncWithHttpInfo(addRolePermissionsInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 添加角色权限 Add role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRolePermissionsInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>>> ApiAppMicroServicesManagerRolePermissionsPostAsyncWithHttpInfo (AddRolePermissionsInput addRolePermissionsInput = default(AddRolePermissionsInput))
        {

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = addRolePermissionsInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Object>>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新角色权限 Update role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>Object</returns>
        public Result<Object> ApiAppMicroServicesManagerRolePermissionsPut (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = ApiAppMicroServicesManagerRolePermissionsPutWithHttpInfo(updateRolePermissionsInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 更新角色权限 Update role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result< Object >> ApiAppMicroServicesManagerRolePermissionsPutWithHttpInfo (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput))
        {
            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.Identity.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateRolePermissionsInput;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Result< Object >>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新角色权限 Update role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Result<Object>> ApiAppMicroServicesManagerRolePermissionsPutAsync (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput))
        {
             DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>> localVarResponse = await ApiAppMicroServicesManagerRolePermissionsPutAsyncWithHttpInfo(updateRolePermissionsInput);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 更新角色权限 Update role permissions 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.Identity.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRolePermissionsInput"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.Identity.Client.ApiResponse<Result<Object>>> ApiAppMicroServicesManagerRolePermissionsPutAsyncWithHttpInfo (UpdateRolePermissionsInput updateRolePermissionsInput = default(UpdateRolePermissionsInput))
        {

            DHICN.PAAS.SDK.Identity.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.Identity.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateRolePermissionsInput;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Result<Object>>("/api/app/microServicesManager/rolePermissions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAppMicroServicesManagerRolePermissionsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
