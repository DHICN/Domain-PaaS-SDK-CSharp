/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Identity.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Identity.Model
{
    /// <summary>
    /// BuildCalcDosageConfigInOut
    /// </summary>
    [DataContract]
    public partial class BuildCalcDosageConfigInOut :  IEquatable<BuildCalcDosageConfigInOut>, IValidatableObject
    {
        /// <summary>
        /// 药剂投加类别
        /// </summary>
        /// <value>药剂投加类别</value>
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4

        }

        /// <summary>
        /// 药剂投加类别
        /// </summary>
        /// <value>药剂投加类别</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildCalcDosageConfigInOut" /> class.
        /// </summary>
        /// <param name="id">配置ID config id.</param>
        /// <param name="param">参数名 parameter name.</param>
        /// <param name="sysCode">系统代码 system code.</param>
        /// <param name="extInfo">生化池序号 biochemical pool index.</param>
        /// <param name="category">药剂投加类别.</param>
        /// <param name="action">该参数用途 parameter usage.</param>
        /// <param name="code">系统点位编码 system point code.</param>
        /// <param name="pointType">点位类型 point type.</param>
        /// <param name="isInputPoint">是否为输入点位 if it is an online point for input.</param>
        /// <param name="productLine">生产线代码 product line code.</param>
        public BuildCalcDosageConfigInOut(Guid id = default(Guid), string param = default(string), string sysCode = default(string), string extInfo = default(string), CategoryEnum? category = default(CategoryEnum?), string action = default(string), string code = default(string), string pointType = default(string), bool isInputPoint = default(bool), string productLine = default(string))
        {
            this.Id = id;
            this.Param = param;
            this.SysCode = sysCode;
            this.ExtInfo = extInfo;
            this.Category = category;
            this.Action = action;
            this.Code = code;
            this.PointType = pointType;
            this.IsInputPoint = isInputPoint;
            this.ProductLine = productLine;
        }
        
        /// <summary>
        /// 配置ID config id
        /// </summary>
        /// <value>配置ID config id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 参数名 parameter name
        /// </summary>
        /// <value>参数名 parameter name</value>
        [DataMember(Name="param", EmitDefaultValue=true)]
        public string Param { get; set; }

        /// <summary>
        /// 系统代码 system code
        /// </summary>
        /// <value>系统代码 system code</value>
        [DataMember(Name="sysCode", EmitDefaultValue=true)]
        public string SysCode { get; set; }

        /// <summary>
        /// 生化池序号 biochemical pool index
        /// </summary>
        /// <value>生化池序号 biochemical pool index</value>
        [DataMember(Name="extInfo", EmitDefaultValue=true)]
        public string ExtInfo { get; set; }

        /// <summary>
        /// 该参数用途 parameter usage
        /// </summary>
        /// <value>该参数用途 parameter usage</value>
        [DataMember(Name="action", EmitDefaultValue=true)]
        public string Action { get; set; }

        /// <summary>
        /// 系统点位编码 system point code
        /// </summary>
        /// <value>系统点位编码 system point code</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// 点位类型 point type
        /// </summary>
        /// <value>点位类型 point type</value>
        [DataMember(Name="pointType", EmitDefaultValue=true)]
        public string PointType { get; set; }

        /// <summary>
        /// 是否为输入点位 if it is an online point for input
        /// </summary>
        /// <value>是否为输入点位 if it is an online point for input</value>
        [DataMember(Name="isInputPoint", EmitDefaultValue=false)]
        public bool IsInputPoint { get; set; }

        /// <summary>
        /// 生产线代码 product line code
        /// </summary>
        /// <value>生产线代码 product line code</value>
        [DataMember(Name="productLine", EmitDefaultValue=true)]
        public string ProductLine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildCalcDosageConfigInOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  SysCode: ").Append(SysCode).Append("\n");
            sb.Append("  ExtInfo: ").Append(ExtInfo).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  PointType: ").Append(PointType).Append("\n");
            sb.Append("  IsInputPoint: ").Append(IsInputPoint).Append("\n");
            sb.Append("  ProductLine: ").Append(ProductLine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildCalcDosageConfigInOut);
        }

        /// <summary>
        /// Returns true if BuildCalcDosageConfigInOut instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildCalcDosageConfigInOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildCalcDosageConfigInOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Param == input.Param ||
                    (this.Param != null &&
                    this.Param.Equals(input.Param))
                ) && 
                (
                    this.SysCode == input.SysCode ||
                    (this.SysCode != null &&
                    this.SysCode.Equals(input.SysCode))
                ) && 
                (
                    this.ExtInfo == input.ExtInfo ||
                    (this.ExtInfo != null &&
                    this.ExtInfo.Equals(input.ExtInfo))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.PointType == input.PointType ||
                    (this.PointType != null &&
                    this.PointType.Equals(input.PointType))
                ) && 
                (
                    this.IsInputPoint == input.IsInputPoint ||
                    this.IsInputPoint.Equals(input.IsInputPoint)
                ) && 
                (
                    this.ProductLine == input.ProductLine ||
                    (this.ProductLine != null &&
                    this.ProductLine.Equals(input.ProductLine))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Param != null)
                    hashCode = hashCode * 59 + this.Param.GetHashCode();
                if (this.SysCode != null)
                    hashCode = hashCode * 59 + this.SysCode.GetHashCode();
                if (this.ExtInfo != null)
                    hashCode = hashCode * 59 + this.ExtInfo.GetHashCode();
                hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.PointType != null)
                    hashCode = hashCode * 59 + this.PointType.GetHashCode();
                hashCode = hashCode * 59 + this.IsInputPoint.GetHashCode();
                if (this.ProductLine != null)
                    hashCode = hashCode * 59 + this.ProductLine.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
