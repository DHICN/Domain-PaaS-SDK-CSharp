/* 
 * model-driver-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.ModelDriverSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.ModelDriverSDK.Model
{
    /// <summary>
    /// ModelDriverDto
    /// </summary>
    [DataContract]
    public partial class ModelDriverDto :  IEquatable<ModelDriverDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public EnumStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelDriverDto" /> class.
        /// </summary>
        /// <param name="id">Id.</param>
        /// <param name="projectName">项目名称.</param>
        /// <param name="tenantId">租户ID.</param>
        /// <param name="scenarioId">方案Id.</param>
        /// <param name="modelType">模型类型.</param>
        /// <param name="priority">优先级.</param>
        /// <param name="modelInfo">模型信息.</param>
        /// <param name="computeBeginTime">计算开始时间.</param>
        /// <param name="computeEndTime">计算结束时间.</param>
        /// <param name="computeNode">计算节点.</param>
        /// <param name="createTime">创建时间.</param>
        /// <param name="status">status.</param>
        /// <param name="sequenceNumber">Todo.</param>
        /// <param name="logPath">日志存储路径.</param>
        public ModelDriverDto(Guid id = default(Guid), string projectName = default(string), Guid tenantId = default(Guid), Guid scenarioId = default(Guid), string modelType = default(string), int priority = default(int), string modelInfo = default(string), DateTime computeBeginTime = default(DateTime), DateTime computeEndTime = default(DateTime), string computeNode = default(string), DateTime createTime = default(DateTime), EnumStatus? status = default(EnumStatus?), int sequenceNumber = default(int), string logPath = default(string))
        {
            this.Id = id;
            this.ProjectName = projectName;
            this.TenantId = tenantId;
            this.ScenarioId = scenarioId;
            this.ModelType = modelType;
            this.Priority = priority;
            this.ModelInfo = modelInfo;
            this.ComputeBeginTime = computeBeginTime;
            this.ComputeEndTime = computeEndTime;
            this.ComputeNode = computeNode;
            this.CreateTime = createTime;
            this.Status = status;
            this.SequenceNumber = sequenceNumber;
            this.LogPath = logPath;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 项目名称
        /// </summary>
        /// <value>项目名称</value>
        [DataMember(Name="projectName", EmitDefaultValue=true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// 租户ID
        /// </summary>
        /// <value>租户ID</value>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public Guid TenantId { get; set; }

        /// <summary>
        /// 方案Id
        /// </summary>
        /// <value>方案Id</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=false)]
        public Guid ScenarioId { get; set; }

        /// <summary>
        /// 模型类型
        /// </summary>
        /// <value>模型类型</value>
        [DataMember(Name="modelType", EmitDefaultValue=true)]
        public string ModelType { get; set; }

        /// <summary>
        /// 优先级
        /// </summary>
        /// <value>优先级</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int Priority { get; set; }

        /// <summary>
        /// 模型信息
        /// </summary>
        /// <value>模型信息</value>
        [DataMember(Name="modelInfo", EmitDefaultValue=true)]
        public string ModelInfo { get; set; }

        /// <summary>
        /// 计算开始时间
        /// </summary>
        /// <value>计算开始时间</value>
        [DataMember(Name="computeBeginTime", EmitDefaultValue=false)]
        public DateTime ComputeBeginTime { get; set; }

        /// <summary>
        /// 计算结束时间
        /// </summary>
        /// <value>计算结束时间</value>
        [DataMember(Name="computeEndTime", EmitDefaultValue=false)]
        public DateTime ComputeEndTime { get; set; }

        /// <summary>
        /// 计算节点
        /// </summary>
        /// <value>计算节点</value>
        [DataMember(Name="computeNode", EmitDefaultValue=true)]
        public string ComputeNode { get; set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        /// <value>创建时间</value>
        [DataMember(Name="createTime", EmitDefaultValue=false)]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// Todo
        /// </summary>
        /// <value>Todo</value>
        [DataMember(Name="sequenceNumber", EmitDefaultValue=false)]
        public int SequenceNumber { get; set; }

        /// <summary>
        /// 日志存储路径
        /// </summary>
        /// <value>日志存储路径</value>
        [DataMember(Name="logPath", EmitDefaultValue=true)]
        public string LogPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelDriverDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ModelInfo: ").Append(ModelInfo).Append("\n");
            sb.Append("  ComputeBeginTime: ").Append(ComputeBeginTime).Append("\n");
            sb.Append("  ComputeEndTime: ").Append(ComputeEndTime).Append("\n");
            sb.Append("  ComputeNode: ").Append(ComputeNode).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  LogPath: ").Append(LogPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelDriverDto);
        }

        /// <summary>
        /// Returns true if ModelDriverDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelDriverDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelDriverDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.ModelType == input.ModelType ||
                    (this.ModelType != null &&
                    this.ModelType.Equals(input.ModelType))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.ModelInfo == input.ModelInfo ||
                    (this.ModelInfo != null &&
                    this.ModelInfo.Equals(input.ModelInfo))
                ) && 
                (
                    this.ComputeBeginTime == input.ComputeBeginTime ||
                    (this.ComputeBeginTime != null &&
                    this.ComputeBeginTime.Equals(input.ComputeBeginTime))
                ) && 
                (
                    this.ComputeEndTime == input.ComputeEndTime ||
                    (this.ComputeEndTime != null &&
                    this.ComputeEndTime.Equals(input.ComputeEndTime))
                ) && 
                (
                    this.ComputeNode == input.ComputeNode ||
                    (this.ComputeNode != null &&
                    this.ComputeNode.Equals(input.ComputeNode))
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    (this.CreateTime != null &&
                    this.CreateTime.Equals(input.CreateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    this.SequenceNumber.Equals(input.SequenceNumber)
                ) && 
                (
                    this.LogPath == input.LogPath ||
                    (this.LogPath != null &&
                    this.LogPath.Equals(input.LogPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                if (this.ModelType != null)
                    hashCode = hashCode * 59 + this.ModelType.GetHashCode();
                hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ModelInfo != null)
                    hashCode = hashCode * 59 + this.ModelInfo.GetHashCode();
                if (this.ComputeBeginTime != null)
                    hashCode = hashCode * 59 + this.ComputeBeginTime.GetHashCode();
                if (this.ComputeEndTime != null)
                    hashCode = hashCode * 59 + this.ComputeEndTime.GetHashCode();
                if (this.ComputeNode != null)
                    hashCode = hashCode * 59 + this.ComputeNode.GetHashCode();
                if (this.CreateTime != null)
                    hashCode = hashCode * 59 + this.CreateTime.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.LogPath != null)
                    hashCode = hashCode * 59 + this.LogPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
