/* 
 * model-driver-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelDriver.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelDriver.Model
{
    /// <summary>
    /// 模型操作结果
    /// </summary>
    [DataContract]
    public partial class ModelOperationResult :  IEquatable<ModelOperationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperationResult" /> class.
        /// </summary>
        /// <param name="scenarioId">方案ID scenario ID.</param>
        /// <param name="hasError">是否存在错误 if error existed.</param>
        /// <param name="message">消息 message.</param>
        /// <param name="queueId">排队Id.</param>
        public ModelOperationResult(Guid scenarioId = default(Guid), bool hasError = default(bool), string message = default(string), string queueId = default(string))
        {
            this.ScenarioId = scenarioId;
            this.HasError = hasError;
            this.Message = message;
            this.QueueId = queueId;
        }
        
        /// <summary>
        /// 方案ID scenario ID
        /// </summary>
        /// <value>方案ID scenario ID</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=false)]
        public Guid ScenarioId { get; set; }

        /// <summary>
        /// 是否存在错误 if error existed
        /// </summary>
        /// <value>是否存在错误 if error existed</value>
        [DataMember(Name="hasError", EmitDefaultValue=false)]
        public bool HasError { get; set; }

        /// <summary>
        /// 消息 message
        /// </summary>
        /// <value>消息 message</value>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// 排队Id
        /// </summary>
        /// <value>排队Id</value>
        [DataMember(Name="queueId", EmitDefaultValue=true)]
        public string QueueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelOperationResult {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  HasError: ").Append(HasError).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelOperationResult);
        }

        /// <summary>
        /// Returns true if ModelOperationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelOperationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelOperationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.HasError == input.HasError ||
                    this.HasError.Equals(input.HasError)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.QueueId == input.QueueId ||
                    (this.QueueId != null &&
                    this.QueueId.Equals(input.QueueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                hashCode = hashCode * 59 + this.HasError.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.QueueId != null)
                    hashCode = hashCode * 59 + this.QueueId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
