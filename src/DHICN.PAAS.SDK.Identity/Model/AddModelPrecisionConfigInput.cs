/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Identity.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Identity.Model
{
    /// <summary>
    /// AddModelPrecisionConfigInput
    /// </summary>
    [DataContract]
    public partial class AddModelPrecisionConfigInput :  IEquatable<AddModelPrecisionConfigInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddModelPrecisionConfigInput" /> class.
        /// </summary>
        /// <param name="regionName">百分比区间名称,如:80-100(优秀) precision region name.</param>
        /// <param name="recProbability">百分比区间推荐:如:&gt;70 precison region recommended proportion.</param>
        /// <param name="regionSValue">百分比区间开始,如:80 precision region start value.</param>
        /// <param name="regionEValue">百分比区间截止,如:100 precision region end value.</param>
        /// <param name="sort">排序号,越小越靠前 precision region index.</param>
        /// <param name="code">指标 system point code.</param>
        public AddModelPrecisionConfigInput(string regionName = default(string), string recProbability = default(string), double regionSValue = default(double), double regionEValue = default(double), int sort = default(int), string code = default(string))
        {
            this.RegionName = regionName;
            this.RecProbability = recProbability;
            this.RegionSValue = regionSValue;
            this.RegionEValue = regionEValue;
            this.Sort = sort;
            this.Code = code;
        }
        
        /// <summary>
        /// 百分比区间名称,如:80-100(优秀) precision region name
        /// </summary>
        /// <value>百分比区间名称,如:80-100(优秀) precision region name</value>
        [DataMember(Name="regionName", EmitDefaultValue=true)]
        public string RegionName { get; set; }

        /// <summary>
        /// 百分比区间推荐:如:&gt;70 precison region recommended proportion
        /// </summary>
        /// <value>百分比区间推荐:如:&gt;70 precison region recommended proportion</value>
        [DataMember(Name="recProbability", EmitDefaultValue=true)]
        public string RecProbability { get; set; }

        /// <summary>
        /// 百分比区间开始,如:80 precision region start value
        /// </summary>
        /// <value>百分比区间开始,如:80 precision region start value</value>
        [DataMember(Name="regionSValue", EmitDefaultValue=false)]
        public double RegionSValue { get; set; }

        /// <summary>
        /// 百分比区间截止,如:100 precision region end value
        /// </summary>
        /// <value>百分比区间截止,如:100 precision region end value</value>
        [DataMember(Name="regionEValue", EmitDefaultValue=false)]
        public double RegionEValue { get; set; }

        /// <summary>
        /// 排序号,越小越靠前 precision region index
        /// </summary>
        /// <value>排序号,越小越靠前 precision region index</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public int Sort { get; set; }

        /// <summary>
        /// 指标 system point code
        /// </summary>
        /// <value>指标 system point code</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddModelPrecisionConfigInput {\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  RecProbability: ").Append(RecProbability).Append("\n");
            sb.Append("  RegionSValue: ").Append(RegionSValue).Append("\n");
            sb.Append("  RegionEValue: ").Append(RegionEValue).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddModelPrecisionConfigInput);
        }

        /// <summary>
        /// Returns true if AddModelPrecisionConfigInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AddModelPrecisionConfigInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddModelPrecisionConfigInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.RecProbability == input.RecProbability ||
                    (this.RecProbability != null &&
                    this.RecProbability.Equals(input.RecProbability))
                ) && 
                (
                    this.RegionSValue == input.RegionSValue ||
                    this.RegionSValue.Equals(input.RegionSValue)
                ) && 
                (
                    this.RegionEValue == input.RegionEValue ||
                    this.RegionEValue.Equals(input.RegionEValue)
                ) && 
                (
                    this.Sort == input.Sort ||
                    this.Sort.Equals(input.Sort)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegionName != null)
                    hashCode = hashCode * 59 + this.RegionName.GetHashCode();
                if (this.RecProbability != null)
                    hashCode = hashCode * 59 + this.RecProbability.GetHashCode();
                hashCode = hashCode * 59 + this.RegionSValue.GetHashCode();
                hashCode = hashCode * 59 + this.RegionEValue.GetHashCode();
                hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
