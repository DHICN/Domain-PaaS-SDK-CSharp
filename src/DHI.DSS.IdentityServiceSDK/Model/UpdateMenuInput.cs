/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// UpdateMenuInput
    /// </summary>
    [DataContract]
    public partial class UpdateMenuInput :  IEquatable<UpdateMenuInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMenuInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateMenuInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateMenuInput" /> class.
        /// </summary>
        /// <param name="id">菜单ID menu id (required).</param>
        /// <param name="name">菜单名称 menu name (required).</param>
        /// <param name="menuRouter">菜单路由,前端的路由走向 menu router.</param>
        public UpdateMenuInput(Guid id = default(Guid), string name = default(string), string menuRouter = default(string))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for UpdateMenuInput and cannot be null");
            this.MenuRouter = menuRouter;
        }
        
        /// <summary>
        /// 菜单ID menu id
        /// </summary>
        /// <value>菜单ID menu id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 菜单名称 menu name
        /// </summary>
        /// <value>菜单名称 menu name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 菜单路由,前端的路由走向 menu router
        /// </summary>
        /// <value>菜单路由,前端的路由走向 menu router</value>
        [DataMember(Name="menuRouter", EmitDefaultValue=true)]
        public string MenuRouter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateMenuInput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MenuRouter: ").Append(MenuRouter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateMenuInput);
        }

        /// <summary>
        /// Returns true if UpdateMenuInput instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateMenuInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateMenuInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MenuRouter == input.MenuRouter ||
                    (this.MenuRouter != null &&
                    this.MenuRouter.Equals(input.MenuRouter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MenuRouter != null)
                    hashCode = hashCode * 59 + this.MenuRouter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
