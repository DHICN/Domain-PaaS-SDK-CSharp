/* 
 * model-information-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelInformation.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelInformation.Model
{
    /// <summary>
    /// GetInitialConditionOutput
    /// </summary>
    [DataContract]
    public partial class GetInitialConditionOutput :  IEquatable<GetInitialConditionOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInitialConditionOutput" /> class.
        /// </summary>
        /// <param name="hotstartScenario">热启动方案ID hotstart scenario ID.</param>
        /// <param name="riverHotstartFile">河道模型热启动文件 river hotstart file.</param>
        /// <param name="pipeHotstartFile">管网模型热启动文件 pipe hotstart file.</param>
        /// <param name="m2DHotstartFile">二维模型热启动文件 2D hotstart file.</param>
        public GetInitialConditionOutput(string hotstartScenario = default(string), string riverHotstartFile = default(string), string pipeHotstartFile = default(string), string m2DHotstartFile = default(string))
        {
            this.HotstartScenario = hotstartScenario;
            this.RiverHotstartFile = riverHotstartFile;
            this.PipeHotstartFile = pipeHotstartFile;
            this.M2DHotstartFile = m2DHotstartFile;
        }
        
        /// <summary>
        /// 热启动方案ID hotstart scenario ID
        /// </summary>
        /// <value>热启动方案ID hotstart scenario ID</value>
        [DataMember(Name="hotstartScenario", EmitDefaultValue=true)]
        public string HotstartScenario { get; set; }

        /// <summary>
        /// 河道模型热启动文件 river hotstart file
        /// </summary>
        /// <value>河道模型热启动文件 river hotstart file</value>
        [DataMember(Name="riverHotstartFile", EmitDefaultValue=true)]
        public string RiverHotstartFile { get; set; }

        /// <summary>
        /// 管网模型热启动文件 pipe hotstart file
        /// </summary>
        /// <value>管网模型热启动文件 pipe hotstart file</value>
        [DataMember(Name="pipeHotstartFile", EmitDefaultValue=true)]
        public string PipeHotstartFile { get; set; }

        /// <summary>
        /// 二维模型热启动文件 2D hotstart file
        /// </summary>
        /// <value>二维模型热启动文件 2D hotstart file</value>
        [DataMember(Name="m2DHotstartFile", EmitDefaultValue=true)]
        public string M2DHotstartFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInitialConditionOutput {\n");
            sb.Append("  HotstartScenario: ").Append(HotstartScenario).Append("\n");
            sb.Append("  RiverHotstartFile: ").Append(RiverHotstartFile).Append("\n");
            sb.Append("  PipeHotstartFile: ").Append(PipeHotstartFile).Append("\n");
            sb.Append("  M2DHotstartFile: ").Append(M2DHotstartFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInitialConditionOutput);
        }

        /// <summary>
        /// Returns true if GetInitialConditionOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInitialConditionOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInitialConditionOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HotstartScenario == input.HotstartScenario ||
                    (this.HotstartScenario != null &&
                    this.HotstartScenario.Equals(input.HotstartScenario))
                ) && 
                (
                    this.RiverHotstartFile == input.RiverHotstartFile ||
                    (this.RiverHotstartFile != null &&
                    this.RiverHotstartFile.Equals(input.RiverHotstartFile))
                ) && 
                (
                    this.PipeHotstartFile == input.PipeHotstartFile ||
                    (this.PipeHotstartFile != null &&
                    this.PipeHotstartFile.Equals(input.PipeHotstartFile))
                ) && 
                (
                    this.M2DHotstartFile == input.M2DHotstartFile ||
                    (this.M2DHotstartFile != null &&
                    this.M2DHotstartFile.Equals(input.M2DHotstartFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HotstartScenario != null)
                    hashCode = hashCode * 59 + this.HotstartScenario.GetHashCode();
                if (this.RiverHotstartFile != null)
                    hashCode = hashCode * 59 + this.RiverHotstartFile.GetHashCode();
                if (this.PipeHotstartFile != null)
                    hashCode = hashCode * 59 + this.PipeHotstartFile.GetHashCode();
                if (this.M2DHotstartFile != null)
                    hashCode = hashCode * 59 + this.M2DHotstartFile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
