/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// 突发水污染事故，统计某个计算点上的污染物浓度变化曲线，以及污染物的到达时间、离开时间、最大浓度值，
    /// </summary>
    [DataContract]
    public partial class ModelResultStationWqStatisticOutput :  IEquatable<ModelResultStationWqStatisticOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelResultStationWqStatisticOutput" /> class.
        /// </summary>
        /// <param name="keySectionLocation">考核断面（河道名，里程）assessment section (river name, chainage).</param>
        /// <param name="arriveTime">到达时间 arrive time.</param>
        /// <param name="leaveTime">离开时间 leave time.</param>
        /// <param name="maxValue">最大浓度值 maximum concentration value.</param>
        /// <param name="maxTime">最大浓度时刻 time of maximum concentration.</param>
        /// <param name="tsPairs">污染物浓度变化过程 time series of pollutant concentration change process.</param>
        public ModelResultStationWqStatisticOutput(string keySectionLocation = default(string), string arriveTime = default(string), string leaveTime = default(string), double maxValue = default(double), string maxTime = default(string), List<TsPairObject> tsPairs = default(List<TsPairObject>))
        {
            this.KeySectionLocation = keySectionLocation;
            this.ArriveTime = arriveTime;
            this.LeaveTime = leaveTime;
            this.MaxValue = maxValue;
            this.MaxTime = maxTime;
            this.TsPairs = tsPairs;
        }
        
        /// <summary>
        /// 考核断面（河道名，里程）assessment section (river name, chainage)
        /// </summary>
        /// <value>考核断面（河道名，里程）assessment section (river name, chainage)</value>
        [DataMember(Name="keySectionLocation", EmitDefaultValue=true)]
        public string KeySectionLocation { get; set; }

        /// <summary>
        /// 到达时间 arrive time
        /// </summary>
        /// <value>到达时间 arrive time</value>
        [DataMember(Name="arriveTime", EmitDefaultValue=true)]
        public string ArriveTime { get; set; }

        /// <summary>
        /// 离开时间 leave time
        /// </summary>
        /// <value>离开时间 leave time</value>
        [DataMember(Name="leaveTime", EmitDefaultValue=true)]
        public string LeaveTime { get; set; }

        /// <summary>
        /// 最大浓度值 maximum concentration value
        /// </summary>
        /// <value>最大浓度值 maximum concentration value</value>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public double MaxValue { get; set; }

        /// <summary>
        /// 最大浓度时刻 time of maximum concentration
        /// </summary>
        /// <value>最大浓度时刻 time of maximum concentration</value>
        [DataMember(Name="maxTime", EmitDefaultValue=true)]
        public string MaxTime { get; set; }

        /// <summary>
        /// 污染物浓度变化过程 time series of pollutant concentration change process
        /// </summary>
        /// <value>污染物浓度变化过程 time series of pollutant concentration change process</value>
        [DataMember(Name="tsPairs", EmitDefaultValue=true)]
        public List<TsPairObject> TsPairs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelResultStationWqStatisticOutput {\n");
            sb.Append("  KeySectionLocation: ").Append(KeySectionLocation).Append("\n");
            sb.Append("  ArriveTime: ").Append(ArriveTime).Append("\n");
            sb.Append("  LeaveTime: ").Append(LeaveTime).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  MaxTime: ").Append(MaxTime).Append("\n");
            sb.Append("  TsPairs: ").Append(TsPairs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelResultStationWqStatisticOutput);
        }

        /// <summary>
        /// Returns true if ModelResultStationWqStatisticOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelResultStationWqStatisticOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelResultStationWqStatisticOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeySectionLocation == input.KeySectionLocation ||
                    (this.KeySectionLocation != null &&
                    this.KeySectionLocation.Equals(input.KeySectionLocation))
                ) && 
                (
                    this.ArriveTime == input.ArriveTime ||
                    (this.ArriveTime != null &&
                    this.ArriveTime.Equals(input.ArriveTime))
                ) && 
                (
                    this.LeaveTime == input.LeaveTime ||
                    (this.LeaveTime != null &&
                    this.LeaveTime.Equals(input.LeaveTime))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    this.MaxValue.Equals(input.MaxValue)
                ) && 
                (
                    this.MaxTime == input.MaxTime ||
                    (this.MaxTime != null &&
                    this.MaxTime.Equals(input.MaxTime))
                ) && 
                (
                    this.TsPairs == input.TsPairs ||
                    this.TsPairs != null &&
                    input.TsPairs != null &&
                    this.TsPairs.SequenceEqual(input.TsPairs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeySectionLocation != null)
                    hashCode = hashCode * 59 + this.KeySectionLocation.GetHashCode();
                if (this.ArriveTime != null)
                    hashCode = hashCode * 59 + this.ArriveTime.GetHashCode();
                if (this.LeaveTime != null)
                    hashCode = hashCode * 59 + this.LeaveTime.GetHashCode();
                hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                if (this.MaxTime != null)
                    hashCode = hashCode * 59 + this.MaxTime.GetHashCode();
                if (this.TsPairs != null)
                    hashCode = hashCode * 59 + this.TsPairs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
