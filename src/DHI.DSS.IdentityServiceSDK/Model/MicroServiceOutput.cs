/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// MicroServiceOutput
    /// </summary>
    [DataContract]
    public partial class MicroServiceOutput :  IEquatable<MicroServiceOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MicroServiceOutput" /> class.
        /// </summary>
        /// <param name="id">微服务Id micro service id.</param>
        /// <param name="serviceKey">微服务标识 micro service key.</param>
        /// <param name="serviceName">微服务名称 micro service name.</param>
        /// <param name="developVoice">开发语言 develop language.</param>
        /// <param name="isGatewayAuth">是否需要网关鉴权 if require gateway authentication.</param>
        /// <param name="managerName">负责人 micro service manager.</param>
        /// <param name="remarks">备注 remarks.</param>
        /// <param name="creationTime">创建时间 create time.</param>
        public MicroServiceOutput(Guid id = default(Guid), string serviceKey = default(string), string serviceName = default(string), string developVoice = default(string), bool isGatewayAuth = default(bool), string managerName = default(string), string remarks = default(string), DateTime creationTime = default(DateTime))
        {
            this.Id = id;
            this.ServiceKey = serviceKey;
            this.ServiceName = serviceName;
            this.DevelopVoice = developVoice;
            this.IsGatewayAuth = isGatewayAuth;
            this.ManagerName = managerName;
            this.Remarks = remarks;
            this.CreationTime = creationTime;
        }
        
        /// <summary>
        /// 微服务Id micro service id
        /// </summary>
        /// <value>微服务Id micro service id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 微服务标识 micro service key
        /// </summary>
        /// <value>微服务标识 micro service key</value>
        [DataMember(Name="serviceKey", EmitDefaultValue=true)]
        public string ServiceKey { get; set; }

        /// <summary>
        /// 微服务名称 micro service name
        /// </summary>
        /// <value>微服务名称 micro service name</value>
        [DataMember(Name="serviceName", EmitDefaultValue=true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// 开发语言 develop language
        /// </summary>
        /// <value>开发语言 develop language</value>
        [DataMember(Name="developVoice", EmitDefaultValue=true)]
        public string DevelopVoice { get; set; }

        /// <summary>
        /// 是否需要网关鉴权 if require gateway authentication
        /// </summary>
        /// <value>是否需要网关鉴权 if require gateway authentication</value>
        [DataMember(Name="isGatewayAuth", EmitDefaultValue=false)]
        public bool IsGatewayAuth { get; set; }

        /// <summary>
        /// 负责人 micro service manager
        /// </summary>
        /// <value>负责人 micro service manager</value>
        [DataMember(Name="managerName", EmitDefaultValue=true)]
        public string ManagerName { get; set; }

        /// <summary>
        /// 备注 remarks
        /// </summary>
        /// <value>备注 remarks</value>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// 创建时间 create time
        /// </summary>
        /// <value>创建时间 create time</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime CreationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MicroServiceOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServiceKey: ").Append(ServiceKey).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  DevelopVoice: ").Append(DevelopVoice).Append("\n");
            sb.Append("  IsGatewayAuth: ").Append(IsGatewayAuth).Append("\n");
            sb.Append("  ManagerName: ").Append(ManagerName).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MicroServiceOutput);
        }

        /// <summary>
        /// Returns true if MicroServiceOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of MicroServiceOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MicroServiceOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ServiceKey == input.ServiceKey ||
                    (this.ServiceKey != null &&
                    this.ServiceKey.Equals(input.ServiceKey))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.DevelopVoice == input.DevelopVoice ||
                    (this.DevelopVoice != null &&
                    this.DevelopVoice.Equals(input.DevelopVoice))
                ) && 
                (
                    this.IsGatewayAuth == input.IsGatewayAuth ||
                    this.IsGatewayAuth.Equals(input.IsGatewayAuth)
                ) && 
                (
                    this.ManagerName == input.ManagerName ||
                    (this.ManagerName != null &&
                    this.ManagerName.Equals(input.ManagerName))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ServiceKey != null)
                    hashCode = hashCode * 59 + this.ServiceKey.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.DevelopVoice != null)
                    hashCode = hashCode * 59 + this.DevelopVoice.GetHashCode();
                hashCode = hashCode * 59 + this.IsGatewayAuth.GetHashCode();
                if (this.ManagerName != null)
                    hashCode = hashCode * 59 + this.ManagerName.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
