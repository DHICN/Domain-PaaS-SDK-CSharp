/* 
 * scenario-manager-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.ScenarioManagerServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.ScenarioManagerServiceSDK.Model
{
    /// <summary>
    /// Group
    /// </summary>
    [DataContract]
    public partial class Group :  IEquatable<Group>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Group" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Group() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Group" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="parentId">parentId (required).</param>
        /// <param name="groupType">groupType.</param>
        /// <param name="itemRef">itemRef.</param>
        /// <param name="groupFamily">groupFamily (required).</param>
        /// <param name="groupLevel">groupLevel (required).</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="version">version.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="parent">parent.</param>
        public Group(Guid id = default(Guid), string name = default(string), Guid parentId = default(Guid), int groupType = default(int), string itemRef = default(string), string groupFamily = default(string), string groupLevel = default(string), Guid itemId = default(Guid), Guid version = default(Guid), string tenantId = default(string), Group parent = default(Group))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Group and cannot be null");
            this.ParentId = parentId;
            // to ensure "groupFamily" is required (not null)
            this.GroupFamily = groupFamily ?? throw new ArgumentNullException("groupFamily is a required property for Group and cannot be null");
            // to ensure "groupLevel" is required (not null)
            this.GroupLevel = groupLevel ?? throw new ArgumentNullException("groupLevel is a required property for Group and cannot be null");
            this.GroupType = groupType;
            this.ItemRef = itemRef;
            this.ItemId = itemId;
            this.Version = version;
            this.TenantId = tenantId;
            this.Parent = parent;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public Guid ParentId { get; set; }

        /// <summary>
        /// Gets or Sets GroupType
        /// </summary>
        [DataMember(Name="groupType", EmitDefaultValue=false)]
        public int GroupType { get; set; }

        /// <summary>
        /// Gets or Sets ItemRef
        /// </summary>
        [DataMember(Name="itemRef", EmitDefaultValue=true)]
        public string ItemRef { get; set; }

        /// <summary>
        /// Gets or Sets GroupFamily
        /// </summary>
        [DataMember(Name="groupFamily", EmitDefaultValue=false)]
        public string GroupFamily { get; set; }

        /// <summary>
        /// Gets or Sets GroupLevel
        /// </summary>
        [DataMember(Name="groupLevel", EmitDefaultValue=false)]
        public string GroupLevel { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public Guid ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public Guid Version { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public Group Parent { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=true)]
        public string Path { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Group {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  GroupType: ").Append(GroupType).Append("\n");
            sb.Append("  ItemRef: ").Append(ItemRef).Append("\n");
            sb.Append("  GroupFamily: ").Append(GroupFamily).Append("\n");
            sb.Append("  GroupLevel: ").Append(GroupLevel).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Group);
        }

        /// <summary>
        /// Returns true if Group instances are equal
        /// </summary>
        /// <param name="input">Instance of Group to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Group input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.GroupType == input.GroupType ||
                    this.GroupType.Equals(input.GroupType)
                ) && 
                (
                    this.ItemRef == input.ItemRef ||
                    (this.ItemRef != null &&
                    this.ItemRef.Equals(input.ItemRef))
                ) && 
                (
                    this.GroupFamily == input.GroupFamily ||
                    (this.GroupFamily != null &&
                    this.GroupFamily.Equals(input.GroupFamily))
                ) && 
                (
                    this.GroupLevel == input.GroupLevel ||
                    (this.GroupLevel != null &&
                    this.GroupLevel.Equals(input.GroupLevel))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                hashCode = hashCode * 59 + this.GroupType.GetHashCode();
                if (this.ItemRef != null)
                    hashCode = hashCode * 59 + this.ItemRef.GetHashCode();
                if (this.GroupFamily != null)
                    hashCode = hashCode * 59 + this.GroupFamily.GetHashCode();
                if (this.GroupLevel != null)
                    hashCode = hashCode * 59 + this.GroupLevel.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 0.", new [] { "Name" });
            }

  
            // ItemRef (string) maxLength
            if(this.ItemRef != null && this.ItemRef.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemRef, length must be less than 100.", new [] { "ItemRef" });
            }

            // ItemRef (string) minLength
            if(this.ItemRef != null && this.ItemRef.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ItemRef, length must be greater than 0.", new [] { "ItemRef" });
            }

  
            // GroupFamily (string) maxLength
            if(this.GroupFamily != null && this.GroupFamily.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupFamily, length must be less than 100.", new [] { "GroupFamily" });
            }

            // GroupFamily (string) minLength
            if(this.GroupFamily != null && this.GroupFamily.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupFamily, length must be greater than 0.", new [] { "GroupFamily" });
            }

  
            // GroupLevel (string) maxLength
            if(this.GroupLevel != null && this.GroupLevel.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupLevel, length must be less than 1000.", new [] { "GroupLevel" });
            }

            // GroupLevel (string) minLength
            if(this.GroupLevel != null && this.GroupLevel.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GroupLevel, length must be greater than 0.", new [] { "GroupLevel" });
            }

  
            yield break;
        }
    }

}
