/* 
 * scenario-manager-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHI.DSS.ScenarioManagerServiceSDK.Client;
using DHI.DSS.ScenarioManagerServiceSDK.Model;

namespace DHI.DSS.ScenarioManagerServiceSDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenarioGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>List&lt;Group&gt;</returns>
        Result<List<Group>> ApiV2ScenarioManagerScenariogroupChildrenGet (string version, string parentGroupId = default(string));

        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupChildrenGetWithHttpInfo (string version, string parentGroupId = default(string));
        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>Group</returns>
        Result<Group> ApiV2ScenarioManagerScenariogroupCreatePost (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara));

        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Result<Group>> ApiV2ScenarioManagerScenariogroupCreatePostWithHttpInfo (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara));
        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>Group</returns>
        Result<Group> ApiV2ScenarioManagerScenariogroupCreateRootPost (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara));

        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Result<Group>> ApiV2ScenarioManagerScenariogroupCreateRootPostWithHttpInfo (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara));
        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>bool</returns>
        Result<bool> ApiV2ScenarioManagerScenariogroupDeletePost (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));

        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<Result<bool>> ApiV2ScenarioManagerScenariogroupDeletePostWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));
        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>bool</returns>
        Result<bool> ApiV2ScenarioManagerScenariogroupDfsDeletePost (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));

        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<Result<bool>> ApiV2ScenarioManagerScenariogroupDfsDeletePostWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));
        /// <summary>
        /// 重命名方案组 Rename a scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>Group</returns>
        Result<Group> ApiV2ScenarioManagerScenariogroupRenamePost (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara));

        /// <summary>
        /// 重命名方案组 Rename a scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Result<Group>> ApiV2ScenarioManagerScenariogroupRenamePostWithHttpInfo (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara));
        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Group&gt;</returns>
        Result<List<Group>> ApiV2ScenarioManagerScenariogroupRootGet (string version);

        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupRootGetWithHttpInfo (string version);
        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>Group</returns>
        Result<Group> ApiV2ScenarioManagerScenariogroupScenarioGet (string version, string scenarioId = default(string));

        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Result<Group>> ApiV2ScenarioManagerScenariogroupScenarioGetWithHttpInfo (string version, string scenarioId = default(string));
        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>List&lt;Scenario&gt;</returns>
        Result<List<Scenario>> ApiV2ScenarioManagerScenariogroupScenariolistGet (string version, string groupId = default(string));

        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Scenario&gt;</returns>
        ApiResponse<Result<List<Scenario>>> ApiV2ScenarioManagerScenariogroupScenariolistGetWithHttpInfo (string version, string groupId = default(string));
        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>List&lt;Group&gt;</returns>
        Result<List<Group>> ApiV2ScenarioManagerScenariogroupTemplateGet (string version, string groupId = default(string));

        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupTemplateGetWithHttpInfo (string version, string groupId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenarioGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupChildrenGetAsync (string version, string parentGroupId = default(string));

        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Group>>>> ApiV2ScenarioManagerScenariogroupChildrenGetAsyncWithHttpInfo (string version, string parentGroupId = default(string));
        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupCreatePostAsync (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara));

        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupCreatePostAsyncWithHttpInfo (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara));
        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupCreateRootPostAsync (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara));

        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupCreateRootPostAsyncWithHttpInfo (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara));
        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerScenariogroupDeletePostAsync (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));

        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<bool>>> ApiV2ScenarioManagerScenariogroupDeletePostAsyncWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));
        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerScenariogroupDfsDeletePostAsync (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));

        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<bool>>> ApiV2ScenarioManagerScenariogroupDfsDeletePostAsyncWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara));
        /// <summary>
        /// 重命名方案组 Rename a scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupRenamePostAsync (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara));

        /// <summary>
        /// 重命名方案组 Rename a scenario group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupRenamePostAsyncWithHttpInfo (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara));
        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupRootGetAsync (string version);

        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Group>>>> ApiV2ScenarioManagerScenariogroupRootGetAsyncWithHttpInfo (string version);
        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupScenarioGetAsync (string version, string scenarioId = default(string));

        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupScenarioGetAsyncWithHttpInfo (string version, string scenarioId = default(string));
        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Scenario&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Scenario>>> ApiV2ScenarioManagerScenariogroupScenariolistGetAsync (string version, string groupId = default(string));

        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Scenario&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Scenario>>>> ApiV2ScenarioManagerScenariogroupScenariolistGetAsyncWithHttpInfo (string version, string groupId = default(string));
        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupTemplateGetAsync (string version, string groupId = default(string));

        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<Group>>>> ApiV2ScenarioManagerScenariogroupTemplateGetAsyncWithHttpInfo (string version, string groupId = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScenarioGroupApi : IScenarioGroupApiSync, IScenarioGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScenarioGroupApi : IScenarioGroupApi
    {
        private DHI.DSS.ScenarioManagerServiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioGroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScenarioGroupApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioGroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScenarioGroupApi(String basePath)
        {
            this.Configuration = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.ScenarioManagerServiceSDK.Client.GlobalConfiguration.Instance,
                new DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioGroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScenarioGroupApi(DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.MergeConfigurations(
                DHI.DSS.ScenarioManagerServiceSDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioGroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScenarioGroupApi(DHI.DSS.ScenarioManagerServiceSDK.Client.ISynchronousClient client,DHI.DSS.ScenarioManagerServiceSDK.Client.IAsynchronousClient asyncClient, DHI.DSS.ScenarioManagerServiceSDK.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHI.DSS.ScenarioManagerServiceSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>List&lt;Group&gt;</returns>
        public Result<List<Group>> ApiV2ScenarioManagerScenariogroupChildrenGet (string version, string parentGroupId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>> localVarResponse = ApiV2ScenarioManagerScenariogroupChildrenGetWithHttpInfo(version, parentGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Group> >> ApiV2ScenarioManagerScenariogroupChildrenGetWithHttpInfo (string version, string parentGroupId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupChildrenGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (parentGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "parentGroupId", parentGroupId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Group> >>("/api/v2/scenario-manager/scenariogroup/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupChildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupChildrenGetAsync (string version, string parentGroupId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>> localVarResponse = await ApiV2ScenarioManagerScenariogroupChildrenGetAsyncWithHttpInfo(version, parentGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据父方案组ID获取其下所有的子方案组 Get child scenario groups by parent group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="parentGroupId">父方案组ID Parent group&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>>> ApiV2ScenarioManagerScenariogroupChildrenGetAsyncWithHttpInfo (string version, string parentGroupId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupChildrenGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (parentGroupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "parentGroupId", parentGroupId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Group>>>("/api/v2/scenario-manager/scenariogroup/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupChildrenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>Group</returns>
        public Result<Group> ApiV2ScenarioManagerScenariogroupCreatePost (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = ApiV2ScenarioManagerScenariogroupCreatePostWithHttpInfo(version, createScenarioGroupPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< Group >> ApiV2ScenarioManagerScenariogroupCreatePostWithHttpInfo (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupCreatePost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = createScenarioGroupPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Group >>("/api/v2/scenario-manager/scenariogroup/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupCreatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupCreatePostAsync (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = await ApiV2ScenarioManagerScenariogroupCreatePostAsyncWithHttpInfo(version, createScenarioGroupPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 创建一个新的方案组 Create a new scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupCreatePostAsyncWithHttpInfo (string version, CreateScenarioGroupPara createScenarioGroupPara = default(CreateScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupCreatePost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = createScenarioGroupPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Group>>("/api/v2/scenario-manager/scenariogroup/create", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupCreatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>Group</returns>
        public Result<Group> ApiV2ScenarioManagerScenariogroupCreateRootPost (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = ApiV2ScenarioManagerScenariogroupCreateRootPostWithHttpInfo(version, createRootScenarioGroupPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< Group >> ApiV2ScenarioManagerScenariogroupCreateRootPostWithHttpInfo (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupCreateRootPost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = createRootScenarioGroupPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Group >>("/api/v2/scenario-manager/scenariogroup/create-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupCreateRootPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupCreateRootPostAsync (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = await ApiV2ScenarioManagerScenariogroupCreateRootPostAsyncWithHttpInfo(version, createRootScenarioGroupPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 创建一个新的根方案组 Create a new root scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="createRootScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupCreateRootPostAsyncWithHttpInfo (string version, CreateRootScenarioGroupPara createRootScenarioGroupPara = default(CreateRootScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupCreateRootPost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = createRootScenarioGroupPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Group>>("/api/v2/scenario-manager/scenariogroup/create-root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupCreateRootPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>bool</returns>
        public Result<bool> ApiV2ScenarioManagerScenariogroupDeletePost (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = ApiV2ScenarioManagerScenariogroupDeletePostWithHttpInfo(version, deleteScenarioGroupPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< bool >> ApiV2ScenarioManagerScenariogroupDeletePostWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupDeletePost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = deleteScenarioGroupPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< bool >>("/api/v2/scenario-manager/scenariogroup/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerScenariogroupDeletePostAsync (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = await ApiV2ScenarioManagerScenariogroupDeletePostAsyncWithHttpInfo(version, deleteScenarioGroupPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>>> ApiV2ScenarioManagerScenariogroupDeletePostAsyncWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupDeletePost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = deleteScenarioGroupPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<bool>>("/api/v2/scenario-manager/scenariogroup/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>bool</returns>
        public Result<bool> ApiV2ScenarioManagerScenariogroupDfsDeletePost (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = ApiV2ScenarioManagerScenariogroupDfsDeletePostWithHttpInfo(version, deleteScenarioGroupPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< bool >> ApiV2ScenarioManagerScenariogroupDfsDeletePostWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupDfsDeletePost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = deleteScenarioGroupPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< bool >>("/api/v2/scenario-manager/scenariogroup/dfs/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupDfsDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<Result<bool>> ApiV2ScenarioManagerScenariogroupDfsDeletePostAsync (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>> localVarResponse = await ApiV2ScenarioManagerScenariogroupDfsDeletePostAsyncWithHttpInfo(version, deleteScenarioGroupPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 基于分布式文件系统，删除方案组，同时删除其下的方案 Delete a scenario group along with it&#39;s scenarios based on the distributed file system 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="deleteScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<bool>>> ApiV2ScenarioManagerScenariogroupDfsDeletePostAsyncWithHttpInfo (string version, DeleteScenarioGroupPara deleteScenarioGroupPara = default(DeleteScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupDfsDeletePost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = deleteScenarioGroupPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<bool>>("/api/v2/scenario-manager/scenariogroup/dfs/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupDfsDeletePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 重命名方案组 Rename a scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>Group</returns>
        public Result<Group> ApiV2ScenarioManagerScenariogroupRenamePost (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = ApiV2ScenarioManagerScenariogroupRenamePostWithHttpInfo(version, renameScenarioGroupPara);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 重命名方案组 Rename a scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< Group >> ApiV2ScenarioManagerScenariogroupRenamePostWithHttpInfo (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupRenamePost");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = renameScenarioGroupPara;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Result< Group >>("/api/v2/scenario-manager/scenariogroup/rename", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupRenamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 重命名方案组 Rename a scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupRenamePostAsync (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = await ApiV2ScenarioManagerScenariogroupRenamePostAsyncWithHttpInfo(version, renameScenarioGroupPara);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 重命名方案组 Rename a scenario group 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="renameScenarioGroupPara"> (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupRenamePostAsyncWithHttpInfo (string version, RenameScenarioGroupPara renameScenarioGroupPara = default(RenameScenarioGroupPara))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupRenamePost");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = renameScenarioGroupPara;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Result<Group>>("/api/v2/scenario-manager/scenariogroup/rename", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupRenamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>List&lt;Group&gt;</returns>
        public Result<List<Group>> ApiV2ScenarioManagerScenariogroupRootGet (string version)
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>> localVarResponse = ApiV2ScenarioManagerScenariogroupRootGetWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Group> >> ApiV2ScenarioManagerScenariogroupRootGetWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupRootGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Group> >>("/api/v2/scenario-manager/scenariogroup/root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupRootGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupRootGetAsync (string version)
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>> localVarResponse = await ApiV2ScenarioManagerScenariogroupRootGetAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取所有的根方案组 Get all the root scenario groups 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>>> ApiV2ScenarioManagerScenariogroupRootGetAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupRootGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Group>>>("/api/v2/scenario-manager/scenariogroup/root", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupRootGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>Group</returns>
        public Result<Group> ApiV2ScenarioManagerScenariogroupScenarioGet (string version, string scenarioId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = ApiV2ScenarioManagerScenariogroupScenarioGetWithHttpInfo(version, scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>ApiResponse of Group</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< Group >> ApiV2ScenarioManagerScenariogroupScenarioGetWithHttpInfo (string version, string scenarioId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupScenarioGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (scenarioId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "scenarioId", scenarioId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< Group >>("/api/v2/scenario-manager/scenariogroup/scenario", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupScenarioGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Result<Group>> ApiV2ScenarioManagerScenariogroupScenarioGetAsync (string version, string scenarioId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>> localVarResponse = await ApiV2ScenarioManagerScenariogroupScenarioGetAsyncWithHttpInfo(version, scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案ID获取其对应的方案组 Get scenario group by scenario&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="scenarioId">方案ID Scenario&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<Group>>> ApiV2ScenarioManagerScenariogroupScenarioGetAsyncWithHttpInfo (string version, string scenarioId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupScenarioGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (scenarioId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "scenarioId", scenarioId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<Group>>("/api/v2/scenario-manager/scenariogroup/scenario", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupScenarioGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>List&lt;Scenario&gt;</returns>
        public Result<List<Scenario>> ApiV2ScenarioManagerScenariogroupScenariolistGet (string version, string groupId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>> localVarResponse = ApiV2ScenarioManagerScenariogroupScenariolistGetWithHttpInfo(version, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Scenario&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Scenario> >> ApiV2ScenarioManagerScenariogroupScenariolistGetWithHttpInfo (string version, string groupId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupScenariolistGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Scenario> >>("/api/v2/scenario-manager/scenariogroup/scenariolist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupScenariolistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Scenario&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Scenario>>> ApiV2ScenarioManagerScenariogroupScenariolistGetAsync (string version, string groupId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>> localVarResponse = await ApiV2ScenarioManagerScenariogroupScenariolistGetAsyncWithHttpInfo(version, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案组ID获取对应的方案列表 Get scenarios by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Scenario&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Scenario>>>> ApiV2ScenarioManagerScenariogroupScenariolistGetAsyncWithHttpInfo (string version, string groupId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupScenariolistGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Scenario>>>("/api/v2/scenario-manager/scenariogroup/scenariolist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupScenariolistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>List&lt;Group&gt;</returns>
        public Result<List<Group>> ApiV2ScenarioManagerScenariogroupTemplateGet (string version, string groupId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>> localVarResponse = ApiV2ScenarioManagerScenariogroupTemplateGetWithHttpInfo(version, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result< List<Group> >> ApiV2ScenarioManagerScenariogroupTemplateGetWithHttpInfo (string version, string groupId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupTemplateGet");

            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<Group> >>("/api/v2/scenario-manager/scenariogroup/template", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupTemplateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<Group>>> ApiV2ScenarioManagerScenariogroupTemplateGetAsync (string version, string groupId = default(string))
        {
             DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>> localVarResponse = await ApiV2ScenarioManagerScenariogroupTemplateGetAsyncWithHttpInfo(version, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 根据方案组ID获取其下所有的模板方案组 Get all the template groups by group&#39;s Id 
        /// </summary>
        /// <exception cref="DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version"></param>
        /// <param name="groupId">方案组ID Group&#39;s Id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<DHI.DSS.ScenarioManagerServiceSDK.Client.ApiResponse<Result<List<Group>>>> ApiV2ScenarioManagerScenariogroupTemplateGetAsyncWithHttpInfo (string version, string groupId = default(string))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new DHI.DSS.ScenarioManagerServiceSDK.Client.ApiException(400, "Missing required parameter 'version' when calling ScenarioGroupApi->ApiV2ScenarioManagerScenariogroupTemplateGet");


            DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions localVarRequestOptions = new DHI.DSS.ScenarioManagerServiceSDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("version", DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (groupId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHI.DSS.ScenarioManagerServiceSDK.Client.ClientUtils.ParameterToMultiMap("", "groupId", groupId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<Group>>>("/api/v2/scenario-manager/scenariogroup/template", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV2ScenarioManagerScenariogroupTemplateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
