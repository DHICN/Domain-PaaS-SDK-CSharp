/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// PumpStatisticsOutput
    /// </summary>
    [DataContract]
    public partial class PumpStatisticsOutput :  IEquatable<PumpStatisticsOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PumpStatisticsOutput" /> class.
        /// </summary>
        /// <param name="pumpID">泵站ID pump id.</param>
        /// <param name="accDischarge">累计流量（单位：m3） accumulated discharge (unit: m3).</param>
        /// <param name="accOpenTime">累计开启时长（单位：分钟） accumulated open time(unit: minute).</param>
        public PumpStatisticsOutput(string pumpID = default(string), double accDischarge = default(double), double accOpenTime = default(double))
        {
            this.PumpID = pumpID;
            this.AccDischarge = accDischarge;
            this.AccOpenTime = accOpenTime;
        }
        
        /// <summary>
        /// 泵站ID pump id
        /// </summary>
        /// <value>泵站ID pump id</value>
        [DataMember(Name="pumpID", EmitDefaultValue=true)]
        public string PumpID { get; set; }

        /// <summary>
        /// 累计流量（单位：m3） accumulated discharge (unit: m3)
        /// </summary>
        /// <value>累计流量（单位：m3） accumulated discharge (unit: m3)</value>
        [DataMember(Name="accDischarge", EmitDefaultValue=false)]
        public double AccDischarge { get; set; }

        /// <summary>
        /// 累计开启时长（单位：分钟） accumulated open time(unit: minute)
        /// </summary>
        /// <value>累计开启时长（单位：分钟） accumulated open time(unit: minute)</value>
        [DataMember(Name="accOpenTime", EmitDefaultValue=false)]
        public double AccOpenTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PumpStatisticsOutput {\n");
            sb.Append("  PumpID: ").Append(PumpID).Append("\n");
            sb.Append("  AccDischarge: ").Append(AccDischarge).Append("\n");
            sb.Append("  AccOpenTime: ").Append(AccOpenTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PumpStatisticsOutput);
        }

        /// <summary>
        /// Returns true if PumpStatisticsOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of PumpStatisticsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PumpStatisticsOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PumpID == input.PumpID ||
                    (this.PumpID != null &&
                    this.PumpID.Equals(input.PumpID))
                ) && 
                (
                    this.AccDischarge == input.AccDischarge ||
                    this.AccDischarge.Equals(input.AccDischarge)
                ) && 
                (
                    this.AccOpenTime == input.AccOpenTime ||
                    this.AccOpenTime.Equals(input.AccOpenTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PumpID != null)
                    hashCode = hashCode * 59 + this.PumpID.GetHashCode();
                hashCode = hashCode * 59 + this.AccDischarge.GetHashCode();
                hashCode = hashCode * 59 + this.AccOpenTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
