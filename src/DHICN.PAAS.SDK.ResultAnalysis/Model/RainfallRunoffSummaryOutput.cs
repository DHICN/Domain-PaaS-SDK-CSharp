/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// RainfallRunoffSummaryOutput
    /// </summary>
    [DataContract]
    public partial class RainfallRunoffSummaryOutput :  IEquatable<RainfallRunoffSummaryOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RainfallRunoffSummaryOutput" /> class.
        /// </summary>
        /// <param name="startVolume">初始水量 start Volume.</param>
        /// <param name="totalInflow">总入流量 total inflow.</param>
        /// <param name="netRainfall">总降雨量 net rainfall.</param>
        /// <param name="totalLosses">总流失量 total losses.</param>
        /// <param name="runoffDischarge">汇水区的径流总量 total runoff discharge.</param>
        /// <param name="endVolume">终止水量 end volume.</param>
        /// <param name="summaryPerCatchment">每个汇水区的降雨径流统计结果 summary of each catchment.</param>
        public RainfallRunoffSummaryOutput(double startVolume = default(double), double totalInflow = default(double), double netRainfall = default(double), double totalLosses = default(double), double runoffDischarge = default(double), double endVolume = default(double), List<RrSummaryPerCatchment> summaryPerCatchment = default(List<RrSummaryPerCatchment>))
        {
            this.StartVolume = startVolume;
            this.TotalInflow = totalInflow;
            this.NetRainfall = netRainfall;
            this.TotalLosses = totalLosses;
            this.RunoffDischarge = runoffDischarge;
            this.EndVolume = endVolume;
            this.SummaryPerCatchment = summaryPerCatchment;
        }
        
        /// <summary>
        /// 初始水量 start Volume
        /// </summary>
        /// <value>初始水量 start Volume</value>
        [DataMember(Name="startVolume", EmitDefaultValue=false)]
        public double StartVolume { get; set; }

        /// <summary>
        /// 总入流量 total inflow
        /// </summary>
        /// <value>总入流量 total inflow</value>
        [DataMember(Name="totalInflow", EmitDefaultValue=false)]
        public double TotalInflow { get; set; }

        /// <summary>
        /// 总降雨量 net rainfall
        /// </summary>
        /// <value>总降雨量 net rainfall</value>
        [DataMember(Name="netRainfall", EmitDefaultValue=false)]
        public double NetRainfall { get; set; }

        /// <summary>
        /// 总流失量 total losses
        /// </summary>
        /// <value>总流失量 total losses</value>
        [DataMember(Name="totalLosses", EmitDefaultValue=false)]
        public double TotalLosses { get; set; }

        /// <summary>
        /// 汇水区的径流总量 total runoff discharge
        /// </summary>
        /// <value>汇水区的径流总量 total runoff discharge</value>
        [DataMember(Name="runoffDischarge", EmitDefaultValue=false)]
        public double RunoffDischarge { get; set; }

        /// <summary>
        /// 终止水量 end volume
        /// </summary>
        /// <value>终止水量 end volume</value>
        [DataMember(Name="endVolume", EmitDefaultValue=false)]
        public double EndVolume { get; set; }

        /// <summary>
        /// 每个汇水区的降雨径流统计结果 summary of each catchment
        /// </summary>
        /// <value>每个汇水区的降雨径流统计结果 summary of each catchment</value>
        [DataMember(Name="summaryPerCatchment", EmitDefaultValue=true)]
        public List<RrSummaryPerCatchment> SummaryPerCatchment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RainfallRunoffSummaryOutput {\n");
            sb.Append("  StartVolume: ").Append(StartVolume).Append("\n");
            sb.Append("  TotalInflow: ").Append(TotalInflow).Append("\n");
            sb.Append("  NetRainfall: ").Append(NetRainfall).Append("\n");
            sb.Append("  TotalLosses: ").Append(TotalLosses).Append("\n");
            sb.Append("  RunoffDischarge: ").Append(RunoffDischarge).Append("\n");
            sb.Append("  EndVolume: ").Append(EndVolume).Append("\n");
            sb.Append("  SummaryPerCatchment: ").Append(SummaryPerCatchment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RainfallRunoffSummaryOutput);
        }

        /// <summary>
        /// Returns true if RainfallRunoffSummaryOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of RainfallRunoffSummaryOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RainfallRunoffSummaryOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartVolume == input.StartVolume ||
                    this.StartVolume.Equals(input.StartVolume)
                ) && 
                (
                    this.TotalInflow == input.TotalInflow ||
                    this.TotalInflow.Equals(input.TotalInflow)
                ) && 
                (
                    this.NetRainfall == input.NetRainfall ||
                    this.NetRainfall.Equals(input.NetRainfall)
                ) && 
                (
                    this.TotalLosses == input.TotalLosses ||
                    this.TotalLosses.Equals(input.TotalLosses)
                ) && 
                (
                    this.RunoffDischarge == input.RunoffDischarge ||
                    this.RunoffDischarge.Equals(input.RunoffDischarge)
                ) && 
                (
                    this.EndVolume == input.EndVolume ||
                    this.EndVolume.Equals(input.EndVolume)
                ) && 
                (
                    this.SummaryPerCatchment == input.SummaryPerCatchment ||
                    this.SummaryPerCatchment != null &&
                    input.SummaryPerCatchment != null &&
                    this.SummaryPerCatchment.SequenceEqual(input.SummaryPerCatchment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.StartVolume.GetHashCode();
                hashCode = hashCode * 59 + this.TotalInflow.GetHashCode();
                hashCode = hashCode * 59 + this.NetRainfall.GetHashCode();
                hashCode = hashCode * 59 + this.TotalLosses.GetHashCode();
                hashCode = hashCode * 59 + this.RunoffDischarge.GetHashCode();
                hashCode = hashCode * 59 + this.EndVolume.GetHashCode();
                if (this.SummaryPerCatchment != null)
                    hashCode = hashCode * 59 + this.SummaryPerCatchment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
