/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// GetFilterModelResultInput
    /// </summary>
    [DataContract]
    public partial class GetFilterModelResultInput :  IEquatable<GetFilterModelResultInput>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public SysWdDataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Gets or Sets FilterConditions
        /// </summary>
        [DataMember(Name="filterConditions", EmitDefaultValue=false)]
        public FilterConditionEnum? FilterConditions { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetFilterModelResultInput" /> class.
        /// </summary>
        /// <param name="scenarioId">scenarioId.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="time">time.</param>
        /// <param name="filterConditions">filterConditions.</param>
        /// <param name="conditionValue">conditionValue.</param>
        public GetFilterModelResultInput(string scenarioId = default(string), SysWdDataTypeEnum? dataType = default(SysWdDataTypeEnum?), DateTime time = default(DateTime), FilterConditionEnum? filterConditions = default(FilterConditionEnum?), List<double> conditionValue = default(List<double>))
        {
            this.ScenarioId = scenarioId;
            this.DataType = dataType;
            this.Time = time;
            this.FilterConditions = filterConditions;
            this.ConditionValue = conditionValue;
        }
        
        /// <summary>
        /// Gets or Sets ScenarioId
        /// </summary>
        [DataMember(Name="scenarioId", EmitDefaultValue=true)]
        public string ScenarioId { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Gets or Sets ConditionValue
        /// </summary>
        [DataMember(Name="conditionValue", EmitDefaultValue=true)]
        public List<double> ConditionValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetFilterModelResultInput {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  FilterConditions: ").Append(FilterConditions).Append("\n");
            sb.Append("  ConditionValue: ").Append(ConditionValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetFilterModelResultInput);
        }

        /// <summary>
        /// Returns true if GetFilterModelResultInput instances are equal
        /// </summary>
        /// <param name="input">Instance of GetFilterModelResultInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetFilterModelResultInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.FilterConditions == input.FilterConditions ||
                    this.FilterConditions.Equals(input.FilterConditions)
                ) && 
                (
                    this.ConditionValue == input.ConditionValue ||
                    this.ConditionValue != null &&
                    input.ConditionValue != null &&
                    this.ConditionValue.SequenceEqual(input.ConditionValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.FilterConditions.GetHashCode();
                if (this.ConditionValue != null)
                    hashCode = hashCode * 59 + this.ConditionValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
