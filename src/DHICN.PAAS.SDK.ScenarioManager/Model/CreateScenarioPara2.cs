/* 
 * scenario-manager-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ScenarioManager.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ScenarioManager.Model
{
    /// <summary>
    /// CreateScenarioPara2
    /// </summary>
    [DataContract]
    public partial class CreateScenarioPara2 :  IEquatable<CreateScenarioPara2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateScenarioPara2" /> class.
        /// </summary>
        /// <param name="parentScenarioId">父方案ID parent scenario&#39;s Id.</param>
        /// <param name="newScenarioName">方案名称 scenario name.</param>
        /// <param name="startTime">模型开始时刻 model start time.</param>
        /// <param name="endTime">模型结束时刻 model end time.</param>
        /// <param name="subType">方案的子类型 scenario subtype.</param>
        /// <param name="description">方案的描述 scenario description.</param>
        public CreateScenarioPara2(string parentScenarioId = default(string), string newScenarioName = default(string), DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), string subType = default(string), string description = default(string))
        {
            this.ParentScenarioId = parentScenarioId;
            this.NewScenarioName = newScenarioName;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.SubType = subType;
            this.Description = description;
        }
        
        /// <summary>
        /// 父方案ID parent scenario&#39;s Id
        /// </summary>
        /// <value>父方案ID parent scenario&#39;s Id</value>
        [DataMember(Name="parentScenarioId", EmitDefaultValue=true)]
        public string ParentScenarioId { get; set; }

        /// <summary>
        /// 方案名称 scenario name
        /// </summary>
        /// <value>方案名称 scenario name</value>
        [DataMember(Name="newScenarioName", EmitDefaultValue=true)]
        public string NewScenarioName { get; set; }

        /// <summary>
        /// 模型开始时刻 model start time
        /// </summary>
        /// <value>模型开始时刻 model start time</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// 模型结束时刻 model end time
        /// </summary>
        /// <value>模型结束时刻 model end time</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// 方案的子类型 scenario subtype
        /// </summary>
        /// <value>方案的子类型 scenario subtype</value>
        [DataMember(Name="subType", EmitDefaultValue=true)]
        public string SubType { get; set; }

        /// <summary>
        /// 方案的描述 scenario description
        /// </summary>
        /// <value>方案的描述 scenario description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateScenarioPara2 {\n");
            sb.Append("  ParentScenarioId: ").Append(ParentScenarioId).Append("\n");
            sb.Append("  NewScenarioName: ").Append(NewScenarioName).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateScenarioPara2);
        }

        /// <summary>
        /// Returns true if CreateScenarioPara2 instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateScenarioPara2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateScenarioPara2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParentScenarioId == input.ParentScenarioId ||
                    (this.ParentScenarioId != null &&
                    this.ParentScenarioId.Equals(input.ParentScenarioId))
                ) && 
                (
                    this.NewScenarioName == input.NewScenarioName ||
                    (this.NewScenarioName != null &&
                    this.NewScenarioName.Equals(input.NewScenarioName))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParentScenarioId != null)
                    hashCode = hashCode * 59 + this.ParentScenarioId.GetHashCode();
                if (this.NewScenarioName != null)
                    hashCode = hashCode * 59 + this.NewScenarioName.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
