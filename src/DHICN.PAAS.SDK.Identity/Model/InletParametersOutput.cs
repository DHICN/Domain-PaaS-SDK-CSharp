/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Identity.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Identity.Model
{
    /// <summary>
    /// InletParametersOutput
    /// </summary>
    [DataContract]
    public partial class InletParametersOutput :  IEquatable<InletParametersOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InletParametersOutput" /> class.
        /// </summary>
        /// <param name="id">参数ID parameter id.</param>
        /// <param name="inletComponent">参数代码 parameter code.</param>
        /// <param name="description">参数描述 parameter description.</param>
        /// <param name="value">参数值 parameter value.</param>
        public InletParametersOutput(Guid id = default(Guid), string inletComponent = default(string), string description = default(string), double value = default(double))
        {
            this.Id = id;
            this.InletComponent = inletComponent;
            this.Description = description;
            this.Value = value;
        }
        
        /// <summary>
        /// 参数ID parameter id
        /// </summary>
        /// <value>参数ID parameter id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 参数代码 parameter code
        /// </summary>
        /// <value>参数代码 parameter code</value>
        [DataMember(Name="inletComponent", EmitDefaultValue=true)]
        public string InletComponent { get; set; }

        /// <summary>
        /// 参数描述 parameter description
        /// </summary>
        /// <value>参数描述 parameter description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 参数值 parameter value
        /// </summary>
        /// <value>参数值 parameter value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InletParametersOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InletComponent: ").Append(InletComponent).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InletParametersOutput);
        }

        /// <summary>
        /// Returns true if InletParametersOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of InletParametersOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InletParametersOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InletComponent == input.InletComponent ||
                    (this.InletComponent != null &&
                    this.InletComponent.Equals(input.InletComponent))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InletComponent != null)
                    hashCode = hashCode * 59 + this.InletComponent.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
