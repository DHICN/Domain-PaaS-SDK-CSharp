/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// OutletResult
    /// </summary>
    [DataContract]
    public partial class OutletResult :  IEquatable<OutletResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutletResult" /> class.
        /// </summary>
        /// <param name="outletID">outletID.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="flushingDuration">flushingDuration.</param>
        /// <param name="requiredDuration">requiredDuration.</param>
        /// <param name="staticPressure">staticPressure.</param>
        /// <param name="residualPressure">residualPressure.</param>
        /// <param name="avgDischarge">avgDischarge.</param>
        /// <param name="waterVolume">waterVolume.</param>
        /// <param name="avgFlushSuccess">avgFlushSuccess.</param>
        /// <param name="avgFlushVelocity">avgFlushVelocity.</param>
        /// <param name="comment">comment.</param>
        public OutletResult(string outletID = default(string), string start = default(string), string end = default(string), string flushingDuration = default(string), string requiredDuration = default(string), double staticPressure = default(double), double residualPressure = default(double), double avgDischarge = default(double), double waterVolume = default(double), double avgFlushSuccess = default(double), double avgFlushVelocity = default(double), string comment = default(string))
        {
            this.OutletID = outletID;
            this.Start = start;
            this.End = end;
            this.FlushingDuration = flushingDuration;
            this.RequiredDuration = requiredDuration;
            this.StaticPressure = staticPressure;
            this.ResidualPressure = residualPressure;
            this.AvgDischarge = avgDischarge;
            this.WaterVolume = waterVolume;
            this.AvgFlushSuccess = avgFlushSuccess;
            this.AvgFlushVelocity = avgFlushVelocity;
            this.Comment = comment;
        }
        
        /// <summary>
        /// Gets or Sets OutletID
        /// </summary>
        [DataMember(Name="outletID", EmitDefaultValue=true)]
        public string OutletID { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=true)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=true)]
        public string End { get; set; }

        /// <summary>
        /// Gets or Sets FlushingDuration
        /// </summary>
        [DataMember(Name="flushingDuration", EmitDefaultValue=true)]
        public string FlushingDuration { get; set; }

        /// <summary>
        /// Gets or Sets RequiredDuration
        /// </summary>
        [DataMember(Name="requiredDuration", EmitDefaultValue=true)]
        public string RequiredDuration { get; set; }

        /// <summary>
        /// Gets or Sets StaticPressure
        /// </summary>
        [DataMember(Name="staticPressure", EmitDefaultValue=false)]
        public double StaticPressure { get; set; }

        /// <summary>
        /// Gets or Sets ResidualPressure
        /// </summary>
        [DataMember(Name="residualPressure", EmitDefaultValue=false)]
        public double ResidualPressure { get; set; }

        /// <summary>
        /// Gets or Sets AvgDischarge
        /// </summary>
        [DataMember(Name="avgDischarge", EmitDefaultValue=false)]
        public double AvgDischarge { get; set; }

        /// <summary>
        /// Gets or Sets WaterVolume
        /// </summary>
        [DataMember(Name="waterVolume", EmitDefaultValue=false)]
        public double WaterVolume { get; set; }

        /// <summary>
        /// Gets or Sets AvgFlushSuccess
        /// </summary>
        [DataMember(Name="avgFlushSuccess", EmitDefaultValue=false)]
        public double AvgFlushSuccess { get; set; }

        /// <summary>
        /// Gets or Sets AvgFlushVelocity
        /// </summary>
        [DataMember(Name="avgFlushVelocity", EmitDefaultValue=false)]
        public double AvgFlushVelocity { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutletResult {\n");
            sb.Append("  OutletID: ").Append(OutletID).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  FlushingDuration: ").Append(FlushingDuration).Append("\n");
            sb.Append("  RequiredDuration: ").Append(RequiredDuration).Append("\n");
            sb.Append("  StaticPressure: ").Append(StaticPressure).Append("\n");
            sb.Append("  ResidualPressure: ").Append(ResidualPressure).Append("\n");
            sb.Append("  AvgDischarge: ").Append(AvgDischarge).Append("\n");
            sb.Append("  WaterVolume: ").Append(WaterVolume).Append("\n");
            sb.Append("  AvgFlushSuccess: ").Append(AvgFlushSuccess).Append("\n");
            sb.Append("  AvgFlushVelocity: ").Append(AvgFlushVelocity).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutletResult);
        }

        /// <summary>
        /// Returns true if OutletResult instances are equal
        /// </summary>
        /// <param name="input">Instance of OutletResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutletResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutletID == input.OutletID ||
                    (this.OutletID != null &&
                    this.OutletID.Equals(input.OutletID))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.FlushingDuration == input.FlushingDuration ||
                    (this.FlushingDuration != null &&
                    this.FlushingDuration.Equals(input.FlushingDuration))
                ) && 
                (
                    this.RequiredDuration == input.RequiredDuration ||
                    (this.RequiredDuration != null &&
                    this.RequiredDuration.Equals(input.RequiredDuration))
                ) && 
                (
                    this.StaticPressure == input.StaticPressure ||
                    this.StaticPressure.Equals(input.StaticPressure)
                ) && 
                (
                    this.ResidualPressure == input.ResidualPressure ||
                    this.ResidualPressure.Equals(input.ResidualPressure)
                ) && 
                (
                    this.AvgDischarge == input.AvgDischarge ||
                    this.AvgDischarge.Equals(input.AvgDischarge)
                ) && 
                (
                    this.WaterVolume == input.WaterVolume ||
                    this.WaterVolume.Equals(input.WaterVolume)
                ) && 
                (
                    this.AvgFlushSuccess == input.AvgFlushSuccess ||
                    this.AvgFlushSuccess.Equals(input.AvgFlushSuccess)
                ) && 
                (
                    this.AvgFlushVelocity == input.AvgFlushVelocity ||
                    this.AvgFlushVelocity.Equals(input.AvgFlushVelocity)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutletID != null)
                    hashCode = hashCode * 59 + this.OutletID.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.FlushingDuration != null)
                    hashCode = hashCode * 59 + this.FlushingDuration.GetHashCode();
                if (this.RequiredDuration != null)
                    hashCode = hashCode * 59 + this.RequiredDuration.GetHashCode();
                hashCode = hashCode * 59 + this.StaticPressure.GetHashCode();
                hashCode = hashCode * 59 + this.ResidualPressure.GetHashCode();
                hashCode = hashCode * 59 + this.AvgDischarge.GetHashCode();
                hashCode = hashCode * 59 + this.WaterVolume.GetHashCode();
                hashCode = hashCode * 59 + this.AvgFlushSuccess.GetHashCode();
                hashCode = hashCode * 59 + this.AvgFlushVelocity.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
