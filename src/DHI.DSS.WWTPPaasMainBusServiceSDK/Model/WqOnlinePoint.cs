/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.WWTPPaasMainBusServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.WWTPPaasMainBusServiceSDK.Model
{
    /// <summary>
    /// WqOnlinePoint
    /// </summary>
    [DataContract]
    public partial class WqOnlinePoint :  IEquatable<WqOnlinePoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WqOnlinePoint" /> class.
        /// </summary>
        /// <param name="productLine">进水点或工艺线 inlet name or product line name.</param>
        /// <param name="codes">系统点位列表 system point codes/indicators.</param>
        /// <param name="units">单位列表 units.</param>
        /// <param name="pointCodes">在线点位列表 corresponding online point codes.</param>
        public WqOnlinePoint(string productLine = default(string), List<string> codes = default(List<string>), List<string> units = default(List<string>), List<string> pointCodes = default(List<string>))
        {
            this.ProductLine = productLine;
            this.Codes = codes;
            this.Units = units;
            this.PointCodes = pointCodes;
        }
        
        /// <summary>
        /// 进水点或工艺线 inlet name or product line name
        /// </summary>
        /// <value>进水点或工艺线 inlet name or product line name</value>
        [DataMember(Name="productLine", EmitDefaultValue=true)]
        public string ProductLine { get; set; }

        /// <summary>
        /// 系统点位列表 system point codes/indicators
        /// </summary>
        /// <value>系统点位列表 system point codes/indicators</value>
        [DataMember(Name="codes", EmitDefaultValue=true)]
        public List<string> Codes { get; set; }

        /// <summary>
        /// 单位列表 units
        /// </summary>
        /// <value>单位列表 units</value>
        [DataMember(Name="units", EmitDefaultValue=true)]
        public List<string> Units { get; set; }

        /// <summary>
        /// 在线点位列表 corresponding online point codes
        /// </summary>
        /// <value>在线点位列表 corresponding online point codes</value>
        [DataMember(Name="pointCodes", EmitDefaultValue=true)]
        public List<string> PointCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WqOnlinePoint {\n");
            sb.Append("  ProductLine: ").Append(ProductLine).Append("\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  PointCodes: ").Append(PointCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WqOnlinePoint);
        }

        /// <summary>
        /// Returns true if WqOnlinePoint instances are equal
        /// </summary>
        /// <param name="input">Instance of WqOnlinePoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WqOnlinePoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductLine == input.ProductLine ||
                    (this.ProductLine != null &&
                    this.ProductLine.Equals(input.ProductLine))
                ) && 
                (
                    this.Codes == input.Codes ||
                    this.Codes != null &&
                    input.Codes != null &&
                    this.Codes.SequenceEqual(input.Codes)
                ) && 
                (
                    this.Units == input.Units ||
                    this.Units != null &&
                    input.Units != null &&
                    this.Units.SequenceEqual(input.Units)
                ) && 
                (
                    this.PointCodes == input.PointCodes ||
                    this.PointCodes != null &&
                    input.PointCodes != null &&
                    this.PointCodes.SequenceEqual(input.PointCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductLine != null)
                    hashCode = hashCode * 59 + this.ProductLine.GetHashCode();
                if (this.Codes != null)
                    hashCode = hashCode * 59 + this.Codes.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.PointCodes != null)
                    hashCode = hashCode * 59 + this.PointCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
