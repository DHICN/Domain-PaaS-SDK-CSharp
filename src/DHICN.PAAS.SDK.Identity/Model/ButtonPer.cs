/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Identity.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Identity.Model
{
    /// <summary>
    /// ButtonPer
    /// </summary>
    [DataContract]
    public partial class ButtonPer :  IEquatable<ButtonPer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ButtonPer" /> class.
        /// </summary>
        /// <param name="id">按钮Id button id.</param>
        /// <param name="label">按钮名称 button label.</param>
        /// <param name="regular">前端按钮路由.</param>
        /// <param name="apiRegular">后端API权限规则.</param>
        /// <param name="isCheck">是否选中状态 if it is checked.</param>
        /// <param name="menuId">菜单Id.</param>
        /// <param name="menuName">菜单名称.</param>
        public ButtonPer(Guid id = default(Guid), string label = default(string), string regular = default(string), string apiRegular = default(string), bool isCheck = default(bool), string menuId = default(string), string menuName = default(string))
        {
            this.Id = id;
            this.Label = label;
            this.Regular = regular;
            this.ApiRegular = apiRegular;
            this.IsCheck = isCheck;
            this.MenuId = menuId;
            this.MenuName = menuName;
        }
        
        /// <summary>
        /// 按钮Id button id
        /// </summary>
        /// <value>按钮Id button id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// 按钮名称 button label
        /// </summary>
        /// <value>按钮名称 button label</value>
        [DataMember(Name="label", EmitDefaultValue=true)]
        public string Label { get; set; }

        /// <summary>
        /// 前端按钮路由
        /// </summary>
        /// <value>前端按钮路由</value>
        [DataMember(Name="regular", EmitDefaultValue=true)]
        public string Regular { get; set; }

        /// <summary>
        /// 后端API权限规则
        /// </summary>
        /// <value>后端API权限规则</value>
        [DataMember(Name="apiRegular", EmitDefaultValue=true)]
        public string ApiRegular { get; set; }

        /// <summary>
        /// 是否选中状态 if it is checked
        /// </summary>
        /// <value>是否选中状态 if it is checked</value>
        [DataMember(Name="isCheck", EmitDefaultValue=false)]
        public bool IsCheck { get; set; }

        /// <summary>
        /// 菜单Id
        /// </summary>
        /// <value>菜单Id</value>
        [DataMember(Name="menuId", EmitDefaultValue=true)]
        public string MenuId { get; set; }

        /// <summary>
        /// 菜单名称
        /// </summary>
        /// <value>菜单名称</value>
        [DataMember(Name="menuName", EmitDefaultValue=true)]
        public string MenuName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ButtonPer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Regular: ").Append(Regular).Append("\n");
            sb.Append("  ApiRegular: ").Append(ApiRegular).Append("\n");
            sb.Append("  IsCheck: ").Append(IsCheck).Append("\n");
            sb.Append("  MenuId: ").Append(MenuId).Append("\n");
            sb.Append("  MenuName: ").Append(MenuName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ButtonPer);
        }

        /// <summary>
        /// Returns true if ButtonPer instances are equal
        /// </summary>
        /// <param name="input">Instance of ButtonPer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ButtonPer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Regular == input.Regular ||
                    (this.Regular != null &&
                    this.Regular.Equals(input.Regular))
                ) && 
                (
                    this.ApiRegular == input.ApiRegular ||
                    (this.ApiRegular != null &&
                    this.ApiRegular.Equals(input.ApiRegular))
                ) && 
                (
                    this.IsCheck == input.IsCheck ||
                    this.IsCheck.Equals(input.IsCheck)
                ) && 
                (
                    this.MenuId == input.MenuId ||
                    (this.MenuId != null &&
                    this.MenuId.Equals(input.MenuId))
                ) && 
                (
                    this.MenuName == input.MenuName ||
                    (this.MenuName != null &&
                    this.MenuName.Equals(input.MenuName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Regular != null)
                    hashCode = hashCode * 59 + this.Regular.GetHashCode();
                if (this.ApiRegular != null)
                    hashCode = hashCode * 59 + this.ApiRegular.GetHashCode();
                hashCode = hashCode * 59 + this.IsCheck.GetHashCode();
                if (this.MenuId != null)
                    hashCode = hashCode * 59 + this.MenuId.GetHashCode();
                if (this.MenuName != null)
                    hashCode = hashCode * 59 + this.MenuName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
