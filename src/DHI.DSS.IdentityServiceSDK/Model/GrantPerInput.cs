/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// GrantPerInput
    /// </summary>
    [DataContract]
    public partial class GrantPerInput :  IEquatable<GrantPerInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GrantPerInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GrantPerInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GrantPerInput" /> class.
        /// </summary>
        /// <param name="roleId">当前操作的角色ID role id (required).</param>
        /// <param name="perIds">要为角色赋予的菜单/按钮权限 menu/button permissions granted for the role.</param>
        public GrantPerInput(Guid roleId = default(Guid), List<Guid> perIds = default(List<Guid>))
        {
            this.RoleId = roleId;
            this.PerIds = perIds;
        }
        
        /// <summary>
        /// 当前操作的角色ID role id
        /// </summary>
        /// <value>当前操作的角色ID role id</value>
        [DataMember(Name="roleId", EmitDefaultValue=false)]
        public Guid RoleId { get; set; }

        /// <summary>
        /// 要为角色赋予的菜单/按钮权限 menu/button permissions granted for the role
        /// </summary>
        /// <value>要为角色赋予的菜单/按钮权限 menu/button permissions granted for the role</value>
        [DataMember(Name="perIds", EmitDefaultValue=true)]
        public List<Guid> PerIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GrantPerInput {\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  PerIds: ").Append(PerIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GrantPerInput);
        }

        /// <summary>
        /// Returns true if GrantPerInput instances are equal
        /// </summary>
        /// <param name="input">Instance of GrantPerInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GrantPerInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RoleId == input.RoleId ||
                    (this.RoleId != null &&
                    this.RoleId.Equals(input.RoleId))
                ) && 
                (
                    this.PerIds == input.PerIds ||
                    this.PerIds != null &&
                    input.PerIds != null &&
                    this.PerIds.SequenceEqual(input.PerIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoleId != null)
                    hashCode = hashCode * 59 + this.RoleId.GetHashCode();
                if (this.PerIds != null)
                    hashCode = hashCode * 59 + this.PerIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
