/* 
 * model-configuration-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelConfiguration.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelConfiguration.Model
{
    /// <summary>
    /// QueryStatusOutput
    /// </summary>
    [DataContract]
    public partial class QueryStatusOutput :  IEquatable<QueryStatusOutput>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ProjectInitializeStatusEnum? Status { get; set; }
        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step", EmitDefaultValue=false)]
        public ProjectInitializeStepEnum? Step { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryStatusOutput" /> class.
        /// </summary>
        /// <param name="stepCode">初始化步骤的代码 project initialization step code.</param>
        /// <param name="description">初始化步骤的描述 initialization step description.</param>
        /// <param name="status">status.</param>
        /// <param name="executeTime">初始化步骤的执行时间 initialization step execution time.</param>
        /// <param name="param">初始化步骤涉及的参数 the parameters of the step.</param>
        /// <param name="projectName">项目名称 project name.</param>
        /// <param name="step">step.</param>
        public QueryStatusOutput(string stepCode = default(string), string description = default(string), ProjectInitializeStatusEnum? status = default(ProjectInitializeStatusEnum?), DateTime executeTime = default(DateTime), string param = default(string), string projectName = default(string), ProjectInitializeStepEnum? step = default(ProjectInitializeStepEnum?))
        {
            this.StepCode = stepCode;
            this.Description = description;
            this.Status = status;
            this.ExecuteTime = executeTime;
            this.Param = param;
            this.ProjectName = projectName;
            this.Step = step;
        }
        
        /// <summary>
        /// 初始化步骤的代码 project initialization step code
        /// </summary>
        /// <value>初始化步骤的代码 project initialization step code</value>
        [DataMember(Name="stepCode", EmitDefaultValue=true)]
        public string StepCode { get; set; }

        /// <summary>
        /// 初始化步骤的描述 initialization step description
        /// </summary>
        /// <value>初始化步骤的描述 initialization step description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 初始化步骤的执行时间 initialization step execution time
        /// </summary>
        /// <value>初始化步骤的执行时间 initialization step execution time</value>
        [DataMember(Name="executeTime", EmitDefaultValue=false)]
        public DateTime ExecuteTime { get; set; }

        /// <summary>
        /// 初始化步骤涉及的参数 the parameters of the step
        /// </summary>
        /// <value>初始化步骤涉及的参数 the parameters of the step</value>
        [DataMember(Name="param", EmitDefaultValue=true)]
        public string Param { get; set; }

        /// <summary>
        /// 项目名称 project name
        /// </summary>
        /// <value>项目名称 project name</value>
        [DataMember(Name="projectName", EmitDefaultValue=true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryStatusOutput {\n");
            sb.Append("  StepCode: ").Append(StepCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ExecuteTime: ").Append(ExecuteTime).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryStatusOutput);
        }

        /// <summary>
        /// Returns true if QueryStatusOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryStatusOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryStatusOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StepCode == input.StepCode ||
                    (this.StepCode != null &&
                    this.StepCode.Equals(input.StepCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ExecuteTime == input.ExecuteTime ||
                    (this.ExecuteTime != null &&
                    this.ExecuteTime.Equals(input.ExecuteTime))
                ) && 
                (
                    this.Param == input.Param ||
                    (this.Param != null &&
                    this.Param.Equals(input.Param))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.Step == input.Step ||
                    this.Step.Equals(input.Step)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StepCode != null)
                    hashCode = hashCode * 59 + this.StepCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ExecuteTime != null)
                    hashCode = hashCode * 59 + this.ExecuteTime.GetHashCode();
                if (this.Param != null)
                    hashCode = hashCode * 59 + this.Param.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                hashCode = hashCode * 59 + this.Step.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
