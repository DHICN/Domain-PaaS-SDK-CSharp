/* 
 * scenario-manager-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ScenarioManager.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ScenarioManager.Model
{
    /// <summary>
    /// RenameScenarioPara
    /// </summary>
    [DataContract]
    public partial class RenameScenarioPara :  IEquatable<RenameScenarioPara>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenameScenarioPara" /> class.
        /// </summary>
        /// <param name="oldScenarioCode">方案代码 the scenaio&#39;s code.</param>
        /// <param name="newName">新的方案名称 new scenario name.</param>
        public RenameScenarioPara(string oldScenarioCode = default(string), string newName = default(string))
        {
            this.OldScenarioCode = oldScenarioCode;
            this.NewName = newName;
        }
        
        /// <summary>
        /// 方案代码 the scenaio&#39;s code
        /// </summary>
        /// <value>方案代码 the scenaio&#39;s code</value>
        [DataMember(Name="oldScenarioCode", EmitDefaultValue=true)]
        public string OldScenarioCode { get; set; }

        /// <summary>
        /// 新的方案名称 new scenario name
        /// </summary>
        /// <value>新的方案名称 new scenario name</value>
        [DataMember(Name="newName", EmitDefaultValue=true)]
        public string NewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RenameScenarioPara {\n");
            sb.Append("  OldScenarioCode: ").Append(OldScenarioCode).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RenameScenarioPara);
        }

        /// <summary>
        /// Returns true if RenameScenarioPara instances are equal
        /// </summary>
        /// <param name="input">Instance of RenameScenarioPara to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RenameScenarioPara input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OldScenarioCode == input.OldScenarioCode ||
                    (this.OldScenarioCode != null &&
                    this.OldScenarioCode.Equals(input.OldScenarioCode))
                ) && 
                (
                    this.NewName == input.NewName ||
                    (this.NewName != null &&
                    this.NewName.Equals(input.NewName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldScenarioCode != null)
                    hashCode = hashCode * 59 + this.OldScenarioCode.GetHashCode();
                if (this.NewName != null)
                    hashCode = hashCode * 59 + this.NewName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
