/* 
 * message-center-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Message.Center.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Message.Center.Model
{
    /// <summary>
    /// UnreadCountQueryInput
    /// </summary>
    [DataContract]
    public partial class UnreadCountQueryInput :  IEquatable<UnreadCountQueryInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnreadCountQueryInput" /> class.
        /// </summary>
        /// <param name="receiverUserId">接收人ID    必传.</param>
        /// <param name="msgType">消息类型    非必传,若为null,默认获取所有的消息类型,若为指定的类型,就查指定的类型.</param>
        /// <param name="isQueryLatestMsg">是否查询最新一条消息 默认为false.</param>
        public UnreadCountQueryInput(Guid receiverUserId = default(Guid), string msgType = default(string), bool isQueryLatestMsg = default(bool))
        {
            this.ReceiverUserId = receiverUserId;
            this.MsgType = msgType;
            this.IsQueryLatestMsg = isQueryLatestMsg;
        }
        
        /// <summary>
        /// 接收人ID    必传
        /// </summary>
        /// <value>接收人ID    必传</value>
        [DataMember(Name="receiverUserId", EmitDefaultValue=false)]
        public Guid ReceiverUserId { get; set; }

        /// <summary>
        /// 消息类型    非必传,若为null,默认获取所有的消息类型,若为指定的类型,就查指定的类型
        /// </summary>
        /// <value>消息类型    非必传,若为null,默认获取所有的消息类型,若为指定的类型,就查指定的类型</value>
        [DataMember(Name="msgType", EmitDefaultValue=true)]
        public string MsgType { get; set; }

        /// <summary>
        /// 是否查询最新一条消息 默认为false
        /// </summary>
        /// <value>是否查询最新一条消息 默认为false</value>
        [DataMember(Name="isQueryLatestMsg", EmitDefaultValue=false)]
        public bool IsQueryLatestMsg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnreadCountQueryInput {\n");
            sb.Append("  ReceiverUserId: ").Append(ReceiverUserId).Append("\n");
            sb.Append("  MsgType: ").Append(MsgType).Append("\n");
            sb.Append("  IsQueryLatestMsg: ").Append(IsQueryLatestMsg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnreadCountQueryInput);
        }

        /// <summary>
        /// Returns true if UnreadCountQueryInput instances are equal
        /// </summary>
        /// <param name="input">Instance of UnreadCountQueryInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnreadCountQueryInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReceiverUserId == input.ReceiverUserId ||
                    (this.ReceiverUserId != null &&
                    this.ReceiverUserId.Equals(input.ReceiverUserId))
                ) && 
                (
                    this.MsgType == input.MsgType ||
                    (this.MsgType != null &&
                    this.MsgType.Equals(input.MsgType))
                ) && 
                (
                    this.IsQueryLatestMsg == input.IsQueryLatestMsg ||
                    this.IsQueryLatestMsg.Equals(input.IsQueryLatestMsg)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReceiverUserId != null)
                    hashCode = hashCode * 59 + this.ReceiverUserId.GetHashCode();
                if (this.MsgType != null)
                    hashCode = hashCode * 59 + this.MsgType.GetHashCode();
                hashCode = hashCode * 59 + this.IsQueryLatestMsg.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
