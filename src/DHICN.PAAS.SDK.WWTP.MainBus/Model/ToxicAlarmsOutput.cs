/* 
 * wwtp-paas-main-bus-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.WWTP.MainBus.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.WWTP.MainBus.Model
{
    /// <summary>
    /// ToxicAlarmsOutput
    /// </summary>
    [DataContract]
    public partial class ToxicAlarmsOutput :  IEquatable<ToxicAlarmsOutput>, IValidatableObject
    {
        /// <summary>
        /// 毒性程度 toxicity level
        /// </summary>
        /// <value>毒性程度 toxicity level</value>
        public enum ToxicLevelEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2

        }

        /// <summary>
        /// 毒性程度 toxicity level
        /// </summary>
        /// <value>毒性程度 toxicity level</value>
        [DataMember(Name="toxicLevel", EmitDefaultValue=false)]
        public ToxicLevelEnum? ToxicLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToxicAlarmsOutput" /> class.
        /// </summary>
        /// <param name="location">毒性仪位置 toxicity meter location.</param>
        /// <param name="time">预警时刻 alarm time.</param>
        /// <param name="toxicLevel">毒性程度 toxicity level.</param>
        public ToxicAlarmsOutput(string location = default(string), DateTime time = default(DateTime), ToxicLevelEnum? toxicLevel = default(ToxicLevelEnum?))
        {
            this.Location = location;
            this.Time = time;
            this.ToxicLevel = toxicLevel;
        }
        
        /// <summary>
        /// 毒性仪位置 toxicity meter location
        /// </summary>
        /// <value>毒性仪位置 toxicity meter location</value>
        [DataMember(Name="location", EmitDefaultValue=true)]
        public string Location { get; set; }

        /// <summary>
        /// 预警时刻 alarm time
        /// </summary>
        /// <value>预警时刻 alarm time</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// 毒性程度描述 toxicity level description
        /// </summary>
        /// <value>毒性程度描述 toxicity level description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToxicAlarmsOutput {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ToxicLevel: ").Append(ToxicLevel).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ToxicAlarmsOutput);
        }

        /// <summary>
        /// Returns true if ToxicAlarmsOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ToxicAlarmsOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ToxicAlarmsOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.ToxicLevel == input.ToxicLevel ||
                    this.ToxicLevel.Equals(input.ToxicLevel)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.ToxicLevel.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
