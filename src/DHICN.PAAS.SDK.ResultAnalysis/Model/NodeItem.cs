/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// PipeNode
    /// </summary>
    [DataContract]
    public partial class NodeItem :  IEquatable<NodeItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeItem" /> class.
        /// </summary>
        /// <param name="nodeID">node ID.</param>
        /// <param name="invertLevel">pipe invert level.</param>
        public NodeItem(string nodeID = default(string), double invertLevel = default(double))
        {
            this.NodeID = nodeID;
            this.InvertLevel = invertLevel;
        }
        
        /// <summary>
        /// node ID
        /// </summary>
        /// <value>node ID</value>
        [DataMember(Name="nodeID", EmitDefaultValue=true)]
        public string NodeID { get; set; }

        /// <summary>
        /// pipe invert level
        /// </summary>
        /// <value>pipe invert level</value>
        [DataMember(Name="invertLevel", EmitDefaultValue=false)]
        public double InvertLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeItem {\n");
            sb.Append("  NodeID: ").Append(NodeID).Append("\n");
            sb.Append("  InvertLevel: ").Append(InvertLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeItem);
        }

        /// <summary>
        /// Returns true if NodeItem instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeID == input.NodeID ||
                    (this.NodeID != null &&
                    this.NodeID.Equals(input.NodeID))
                ) && 
                (
                    this.InvertLevel == input.InvertLevel ||
                    this.InvertLevel.Equals(input.InvertLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeID != null)
                    hashCode = hashCode * 59 + this.NodeID.GetHashCode();
                hashCode = hashCode * 59 + this.InvertLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
