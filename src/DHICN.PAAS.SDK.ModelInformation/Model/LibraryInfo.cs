/* 
 * model-configuration-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelInformation.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelInformation.Model
{
    /// <summary>
    /// LibraryInfo
    /// </summary>
    [DataContract]
    public partial class LibraryInfo :  IEquatable<LibraryInfo>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public LibraryTypeEnum? Type { get; set; }
        /// <summary>
        /// Gets or Sets BusinessType
        /// </summary>
        [DataMember(Name="businessType", EmitDefaultValue=false)]
        public BusinessTypeEnum? BusinessType { get; set; }
        /// <summary>
        /// Gets or Sets BindLibrary
        /// </summary>
        [DataMember(Name="bindLibrary", EmitDefaultValue=false)]
        public LibraryTypeEnum? BindLibrary { get; set; }
        /// <summary>
        /// Gets or Sets BindBusiness
        /// </summary>
        [DataMember(Name="bindBusiness", EmitDefaultValue=false)]
        public BusinessTypeEnum? BindBusiness { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryInfo" /> class.
        /// </summary>
        /// <param name="id">库的ID library Id.</param>
        /// <param name="tenantId">租户ID tenant Id.</param>
        /// <param name="scenarioGroup">对应的方案组ID scenario group Id.</param>
        /// <param name="name">库的名称 library name.</param>
        /// <param name="type">type.</param>
        /// <param name="businessType">businessType.</param>
        /// <param name="_readonly">0代表可读写，1代表只读 0 for not readonly, 1 for readonly.</param>
        /// <param name="bindTemplate">1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not.</param>
        /// <param name="bindLibrary">bindLibrary.</param>
        /// <param name="bindBusiness">bindBusiness.</param>
        /// <param name="description">库的描述 description.</param>
        /// <param name="enableMultiTemplate">0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates.</param>
        public LibraryInfo(Guid? id = default(Guid?), Guid? tenantId = default(Guid?), Guid? scenarioGroup = default(Guid?), string name = default(string), LibraryTypeEnum? type = default(LibraryTypeEnum?), BusinessTypeEnum? businessType = default(BusinessTypeEnum?), int _readonly = default(int), int bindTemplate = default(int), LibraryTypeEnum? bindLibrary = default(LibraryTypeEnum?), BusinessTypeEnum? bindBusiness = default(BusinessTypeEnum?), string description = default(string), int? enableMultiTemplate = default(int?))
        {
            this.Id = id;
            this.TenantId = tenantId;
            this.ScenarioGroup = scenarioGroup;
            this.Name = name;
            this.Type = type;
            this.BusinessType = businessType;
            this.Readonly = _readonly;
            this.BindTemplate = bindTemplate;
            this.BindLibrary = bindLibrary;
            this.BindBusiness = bindBusiness;
            this.Description = description;
            this.EnableMultiTemplate = enableMultiTemplate;
        }
        
        /// <summary>
        /// 库的ID library Id
        /// </summary>
        /// <value>库的ID library Id</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Guid? Id { get; set; }

        /// <summary>
        /// 租户ID tenant Id
        /// </summary>
        /// <value>租户ID tenant Id</value>
        [DataMember(Name="tenantId", EmitDefaultValue=true)]
        public Guid? TenantId { get; set; }

        /// <summary>
        /// 对应的方案组ID scenario group Id
        /// </summary>
        /// <value>对应的方案组ID scenario group Id</value>
        [DataMember(Name="scenarioGroup", EmitDefaultValue=true)]
        public Guid? ScenarioGroup { get; set; }

        /// <summary>
        /// 库的名称 library name
        /// </summary>
        /// <value>库的名称 library name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// 0代表可读写，1代表只读 0 for not readonly, 1 for readonly
        /// </summary>
        /// <value>0代表可读写，1代表只读 0 for not readonly, 1 for readonly</value>
        [DataMember(Name="readonly", EmitDefaultValue=false)]
        public int Readonly { get; set; }

        /// <summary>
        /// 1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not
        /// </summary>
        /// <value>1表示库直接绑定一个模板方案，0表示不绑定 1 for bind a template directly, 0 for not</value>
        [DataMember(Name="bindTemplate", EmitDefaultValue=false)]
        public int BindTemplate { get; set; }

        /// <summary>
        /// 库的描述 description
        /// </summary>
        /// <value>库的描述 description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates
        /// </summary>
        /// <value>0表示只能绑定单个模板方案，1表示可以绑定多个模板方案 0 for single template which is the default option, 1 for multiple templates</value>
        [DataMember(Name="enableMultiTemplate", EmitDefaultValue=true)]
        public int? EnableMultiTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LibraryInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  ScenarioGroup: ").Append(ScenarioGroup).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  Readonly: ").Append(Readonly).Append("\n");
            sb.Append("  BindTemplate: ").Append(BindTemplate).Append("\n");
            sb.Append("  BindLibrary: ").Append(BindLibrary).Append("\n");
            sb.Append("  BindBusiness: ").Append(BindBusiness).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnableMultiTemplate: ").Append(EnableMultiTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LibraryInfo);
        }

        /// <summary>
        /// Returns true if LibraryInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of LibraryInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LibraryInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.ScenarioGroup == input.ScenarioGroup ||
                    (this.ScenarioGroup != null &&
                    this.ScenarioGroup.Equals(input.ScenarioGroup))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    this.BusinessType.Equals(input.BusinessType)
                ) && 
                (
                    this.Readonly == input.Readonly ||
                    this.Readonly.Equals(input.Readonly)
                ) && 
                (
                    this.BindTemplate == input.BindTemplate ||
                    this.BindTemplate.Equals(input.BindTemplate)
                ) && 
                (
                    this.BindLibrary == input.BindLibrary ||
                    this.BindLibrary.Equals(input.BindLibrary)
                ) && 
                (
                    this.BindBusiness == input.BindBusiness ||
                    this.BindBusiness.Equals(input.BindBusiness)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EnableMultiTemplate == input.EnableMultiTemplate ||
                    (this.EnableMultiTemplate != null &&
                    this.EnableMultiTemplate.Equals(input.EnableMultiTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.ScenarioGroup != null)
                    hashCode = hashCode * 59 + this.ScenarioGroup.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.BusinessType.GetHashCode();
                hashCode = hashCode * 59 + this.Readonly.GetHashCode();
                hashCode = hashCode * 59 + this.BindTemplate.GetHashCode();
                hashCode = hashCode * 59 + this.BindLibrary.GetHashCode();
                hashCode = hashCode * 59 + this.BindBusiness.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EnableMultiTemplate != null)
                    hashCode = hashCode * 59 + this.EnableMultiTemplate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
