/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DHICN.PAAS.SDK.ResultAnalysis.Client;
using DHICN.PAAS.SDK.ResultAnalysis.Model;

namespace DHICN.PAAS.SDK.ResultAnalysis.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        Result<List<string>> ApiV1ResultNetworkDynamicChainageGet (string scenarioId = default(string));

        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<Result<List<string>>> ApiV1ResultNetworkDynamicChainageGetWithHttpInfo (string scenarioId = default(string));
        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>BaseDynamicOutput</returns>
        Result<BaseDynamicOutput> ApiV1ResultNetworkDynamicGet (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>ApiResponse of BaseDynamicOutput</returns>
        ApiResponse<Result<BaseDynamicOutput>> ApiV1ResultNetworkDynamicGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        Result<BaseTimeseriesOutput> ApiV1ResultNetworkMultipointTimeseriesGet (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));

        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        ApiResponse<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkMultipointTimeseriesGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));
        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>BaseDynamicOutput</returns>
        Result<BaseDynamicOutput> ApiV1ResultNetworkNodeDynamicGet (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>ApiResponse of BaseDynamicOutput</returns>
        ApiResponse<Result<BaseDynamicOutput>> ApiV1ResultNetworkNodeDynamicGetWithHttpInfo (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>BaseStaticOutput</returns>
        Result<BaseStaticOutput> ApiV1ResultNetworkNodeStaticGet (string staticType, string overflowNodeType, string scenarioId);

        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of BaseStaticOutput</returns>
        ApiResponse<Result<BaseStaticOutput>> ApiV1ResultNetworkNodeStaticGetWithHttpInfo (string staticType, string overflowNodeType, string scenarioId);
        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
        /// </summary>
        /// <remarks>
        /// 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        Result<BaseTimeseriesOutput> ApiV1ResultNetworkNodeTimeseriesGet (string scenarioId, string nodeDataType = default(string), string nodeId = default(string));

        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
        /// </summary>
        /// <remarks>
        /// 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        ApiResponse<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkNodeTimeseriesGetWithHttpInfo (string scenarioId, string nodeDataType = default(string), string nodeId = default(string));
        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data
        /// </summary>
        /// <remarks>
        /// 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>NetworkProfile</returns>
        Result<NetworkProfile> ApiV1ResultNetworkProfileTimeseriesGet (string scenarioId, List<string> nodeIDs = default(List<string>));

        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data
        /// </summary>
        /// <remarks>
        /// 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>ApiResponse of NetworkProfile</returns>
        ApiResponse<Result<NetworkProfile>> ApiV1ResultNetworkProfileTimeseriesGetWithHttpInfo (string scenarioId, List<string> nodeIDs = default(List<string>));
        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps
        /// </summary>
        /// <remarks>
        /// 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;PumpStatisticsOutput&gt;</returns>
        Result<List<PumpStatisticsOutput>> ApiV1ResultNetworkPumpStatisticsGet (string scenarioId);

        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps
        /// </summary>
        /// <remarks>
        /// 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;PumpStatisticsOutput&gt;</returns>
        ApiResponse<Result<List<PumpStatisticsOutput>>> ApiV1ResultNetworkPumpStatisticsGetWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump
        /// </summary>
        /// <remarks>
        /// 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        Result<BaseTimeseriesOutput> ApiV1ResultNetworkPumpTimeseriesGet (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));

        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump
        /// </summary>
        /// <remarks>
        /// 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        ApiResponse<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkPumpTimeseriesGetWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));
        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>BaseStaticOutput</returns>
        Result<BaseStaticOutput> ApiV1ResultNetworkStaticGet (string scenarioId, string pipeDataType = default(string), string statisticType = default(string));

        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>ApiResponse of BaseStaticOutput</returns>
        ApiResponse<Result<BaseStaticOutput>> ApiV1ResultNetworkStaticGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), string statisticType = default(string));
        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network
        /// </summary>
        /// <remarks>
        /// 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>NetworkStatisticsOutput</returns>
        Result<NetworkStatisticsOutput> ApiV1ResultNetworkStatisticsGet (string scenarioId);

        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network
        /// </summary>
        /// <remarks>
        /// 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of NetworkStatisticsOutput</returns>
        ApiResponse<Result<NetworkStatisticsOutput>> ApiV1ResultNetworkStatisticsGetWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        Result<BaseTimeseriesOutput> ApiV1ResultNetworkTimeseriesGet (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));

        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        ApiResponse<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkTimeseriesGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));
        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves
        /// </summary>
        /// <remarks>
        /// 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;ValveStatisticsOutput&gt;</returns>
        Result<List<ValveStatisticsOutput>> ApiV1ResultNetworkValveStatisticsGet (string scenarioId);

        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves
        /// </summary>
        /// <remarks>
        /// 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;ValveStatisticsOutput&gt;</returns>
        ApiResponse<Result<List<ValveStatisticsOutput>>> ApiV1ResultNetworkValveStatisticsGetWithHttpInfo (string scenarioId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<Result<List<string>>> ApiV1ResultNetworkDynamicChainageGetAsync (string scenarioId = default(string));

        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<string>>>> ApiV1ResultNetworkDynamicChainageGetAsyncWithHttpInfo (string scenarioId = default(string));
        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of BaseDynamicOutput</returns>
        System.Threading.Tasks.Task<Result<BaseDynamicOutput>> ApiV1ResultNetworkDynamicGetAsync (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of ApiResponse (BaseDynamicOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseDynamicOutput>>> ApiV1ResultNetworkDynamicGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkMultipointTimeseriesGetAsync (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));

        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkMultipointTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));
        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of BaseDynamicOutput</returns>
        System.Threading.Tasks.Task<Result<BaseDynamicOutput>> ApiV1ResultNetworkNodeDynamicGetAsync (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));

        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of ApiResponse (BaseDynamicOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseDynamicOutput>>> ApiV1ResultNetworkNodeDynamicGetAsyncWithHttpInfo (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string));
        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of BaseStaticOutput</returns>
        System.Threading.Tasks.Task<Result<BaseStaticOutput>> ApiV1ResultNetworkNodeStaticGetAsync (string staticType, string overflowNodeType, string scenarioId);

        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node)
        /// </summary>
        /// <remarks>
        /// 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (BaseStaticOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseStaticOutput>>> ApiV1ResultNetworkNodeStaticGetAsyncWithHttpInfo (string staticType, string overflowNodeType, string scenarioId);
        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
        /// </summary>
        /// <remarks>
        /// 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkNodeTimeseriesGetAsync (string scenarioId, string nodeDataType = default(string), string nodeId = default(string));

        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node)
        /// </summary>
        /// <remarks>
        /// 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkNodeTimeseriesGetAsyncWithHttpInfo (string scenarioId, string nodeDataType = default(string), string nodeId = default(string));
        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data
        /// </summary>
        /// <remarks>
        /// 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>Task of NetworkProfile</returns>
        System.Threading.Tasks.Task<Result<NetworkProfile>> ApiV1ResultNetworkProfileTimeseriesGetAsync (string scenarioId, List<string> nodeIDs = default(List<string>));

        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data
        /// </summary>
        /// <remarks>
        /// 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>Task of ApiResponse (NetworkProfile)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<NetworkProfile>>> ApiV1ResultNetworkProfileTimeseriesGetAsyncWithHttpInfo (string scenarioId, List<string> nodeIDs = default(List<string>));
        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps
        /// </summary>
        /// <remarks>
        /// 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;PumpStatisticsOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<PumpStatisticsOutput>>> ApiV1ResultNetworkPumpStatisticsGetAsync (string scenarioId);

        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps
        /// </summary>
        /// <remarks>
        /// 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;PumpStatisticsOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<PumpStatisticsOutput>>>> ApiV1ResultNetworkPumpStatisticsGetAsyncWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump
        /// </summary>
        /// <remarks>
        /// 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkPumpTimeseriesGetAsync (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));

        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump
        /// </summary>
        /// <remarks>
        /// 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkPumpTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string));
        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>Task of BaseStaticOutput</returns>
        System.Threading.Tasks.Task<Result<BaseStaticOutput>> ApiV1ResultNetworkStaticGetAsync (string scenarioId, string pipeDataType = default(string), string statisticType = default(string));

        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe)
        /// </summary>
        /// <remarks>
        /// 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>Task of ApiResponse (BaseStaticOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseStaticOutput>>> ApiV1ResultNetworkStaticGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), string statisticType = default(string));
        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network
        /// </summary>
        /// <remarks>
        /// 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of NetworkStatisticsOutput</returns>
        System.Threading.Tasks.Task<Result<NetworkStatisticsOutput>> ApiV1ResultNetworkStatisticsGetAsync (string scenarioId);

        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network
        /// </summary>
        /// <remarks>
        /// 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (NetworkStatisticsOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<NetworkStatisticsOutput>>> ApiV1ResultNetworkStatisticsGetAsyncWithHttpInfo (string scenarioId);
        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkTimeseriesGetAsync (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));

        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results
        /// </summary>
        /// <remarks>
        /// 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string));
        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves
        /// </summary>
        /// <remarks>
        /// 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;ValveStatisticsOutput&gt;</returns>
        System.Threading.Tasks.Task<Result<List<ValveStatisticsOutput>>> ApiV1ResultNetworkValveStatisticsGetAsync (string scenarioId);

        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves
        /// </summary>
        /// <remarks>
        /// 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </remarks>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;ValveStatisticsOutput&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result<List<ValveStatisticsOutput>>>> ApiV1ResultNetworkValveStatisticsGetAsyncWithHttpInfo (string scenarioId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INetworkApi : INetworkApiSync, INetworkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NetworkApi : INetworkApi
    {
        private DHICN.PAAS.SDK.ResultAnalysis.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NetworkApi(String basePath)
        {
            this.Configuration = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.ResultAnalysis.Client.GlobalConfiguration.Instance,
                new DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NetworkApi(DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.MergeConfigurations(
                DHICN.PAAS.SDK.ResultAnalysis.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NetworkApi(DHICN.PAAS.SDK.ResultAnalysis.Client.ISynchronousClient client,DHICN.PAAS.SDK.ResultAnalysis.Client.IAsynchronousClient asyncClient, DHICN.PAAS.SDK.ResultAnalysis.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DHICN.PAAS.SDK.ResultAnalysis.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe) 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>List&lt;string&gt;</returns>
        public Result<List<string>> ApiV1ResultNetworkDynamicChainageGet (string scenarioId = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<string>>> localVarResponse = ApiV1ResultNetworkDynamicChainageGetWithHttpInfo(scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe) 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<string> >> ApiV1ResultNetworkDynamicChainageGetWithHttpInfo (string scenarioId = default(string))
        {
            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scenarioId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<string> >>("/api/v1/result/network/dynamicChainage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkDynamicChainageGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe) 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<string>>> ApiV1ResultNetworkDynamicChainageGetAsync (string scenarioId = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<string>>> localVarResponse = await ApiV1ResultNetworkDynamicChainageGetAsyncWithHttpInfo(scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get 1D dynamic chainage results of pipe network (pipe) 
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<string>>>> ApiV1ResultNetworkDynamicChainageGetAsyncWithHttpInfo (string scenarioId = default(string))
        {

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (scenarioId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<string>>>("/api/v1/result/network/dynamicChainage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkDynamicChainageGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe) 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>BaseDynamicOutput</returns>
        public Result<BaseDynamicOutput> ApiV1ResultNetworkDynamicGet (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>> localVarResponse = ApiV1ResultNetworkDynamicGetWithHttpInfo(scenarioId, pipeDataType, frequency, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe) 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>ApiResponse of BaseDynamicOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseDynamicOutput >> ApiV1ResultNetworkDynamicGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkDynamicGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Frequency", frequency));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseDynamicOutput >>("/api/v1/result/network/dynamic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkDynamicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe) 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of BaseDynamicOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseDynamicOutput>> ApiV1ResultNetworkDynamicGetAsync (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>> localVarResponse = await ApiV1ResultNetworkDynamicGetAsyncWithHttpInfo(scenarioId, pipeDataType, frequency, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道动态结果 Get 1D dynamic results of pipe network (pipe) 获取一维管道上的动态结果，包括流量、流速、充满度、水位等 Get pipe dynamic results including flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of ApiResponse (BaseDynamicOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>>> ApiV1ResultNetworkDynamicGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkDynamicGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Frequency", frequency));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseDynamicOutput>>("/api/v1/result/network/dynamic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkDynamicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        public Result<BaseTimeseriesOutput> ApiV1ResultNetworkMultipointTimeseriesGet (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = ApiV1ResultNetworkMultipointTimeseriesGetWithHttpInfo(scenarioId, pipeDataType, pipeID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseTimeseriesOutput >> ApiV1ResultNetworkMultipointTimeseriesGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkMultipointTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (pipeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeID", pipeID));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseTimeseriesOutput >>("/api/v1/result/network/multipoint_timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkMultipointTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkMultipointTimeseriesGetAsync (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = await ApiV1ResultNetworkMultipointTimeseriesGetAsyncWithHttpInfo(scenarioId, pipeDataType, pipeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道多点时间序列结果 Get pipe network multi-point time series results 获取管道多个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on multiple points of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkMultipointTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkMultipointTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (pipeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeID", pipeID));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseTimeseriesOutput>>("/api/v1/result/network/multipoint_timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkMultipointTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node) 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>BaseDynamicOutput</returns>
        public Result<BaseDynamicOutput> ApiV1ResultNetworkNodeDynamicGet (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>> localVarResponse = ApiV1ResultNetworkNodeDynamicGetWithHttpInfo(scenarioId, overflowNodeType, frequency, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node) 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>ApiResponse of BaseDynamicOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseDynamicOutput >> ApiV1ResultNetworkNodeDynamicGetWithHttpInfo (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkNodeDynamicGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (overflowNodeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "OverflowNodeType", overflowNodeType));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Frequency", frequency));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseDynamicOutput >>("/api/v1/result/network/node-dynamic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkNodeDynamicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node) 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of BaseDynamicOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseDynamicOutput>> ApiV1ResultNetworkNodeDynamicGetAsync (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>> localVarResponse = await ApiV1ResultNetworkNodeDynamicGetAsyncWithHttpInfo(scenarioId, overflowNodeType, frequency, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道节点上的动态结果 Get 1D dynamic results of pipe network (node) 获取一维管道排口或检查井的溢流动态结果 Get outlet or manhole overflow dynamic results of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet; (optional)</param>
        /// <param name="frequency">查询结果的时间频率 time frequency used to get result (optional)</param>
        /// <param name="startTime">查询结果的开始时间 start time used to get result (optional)</param>
        /// <param name="endTime">查询结果的结束时间 end time used to get result (optional)</param>
        /// <returns>Task of ApiResponse (BaseDynamicOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseDynamicOutput>>> ApiV1ResultNetworkNodeDynamicGetAsyncWithHttpInfo (string scenarioId, string overflowNodeType = default(string), int? frequency = default(int?), string startTime = default(string), string endTime = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkNodeDynamicGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (overflowNodeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "OverflowNodeType", overflowNodeType));
            }
            if (frequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "Frequency", frequency));
            }
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StartTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "EndTime", endTime));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseDynamicOutput>>("/api/v1/result/network/node-dynamic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkNodeDynamicGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node) 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>BaseStaticOutput</returns>
        public Result<BaseStaticOutput> ApiV1ResultNetworkNodeStaticGet (string staticType, string overflowNodeType, string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>> localVarResponse = ApiV1ResultNetworkNodeStaticGetWithHttpInfo(staticType, overflowNodeType, scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node) 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of BaseStaticOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseStaticOutput >> ApiV1ResultNetworkNodeStaticGetWithHttpInfo (string staticType, string overflowNodeType, string scenarioId)
        {
            // verify the required parameter 'staticType' is set
            if (staticType == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'staticType' when calling NetworkApi->ApiV1ResultNetworkNodeStaticGet");

            // verify the required parameter 'overflowNodeType' is set
            if (overflowNodeType == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'overflowNodeType' when calling NetworkApi->ApiV1ResultNetworkNodeStaticGet");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkNodeStaticGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StaticType", staticType));
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "OverflowNodeType", overflowNodeType));
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseStaticOutput >>("/api/v1/result/network/node-static", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkNodeStaticGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node) 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of BaseStaticOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseStaticOutput>> ApiV1ResultNetworkNodeStaticGetAsync (string staticType, string overflowNodeType, string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>> localVarResponse = await ApiV1ResultNetworkNodeStaticGetAsyncWithHttpInfo(staticType, overflowNodeType, scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道节点统计结果 Get 1D statistic results for networks (node) 获取一维管道排口或检查井的总溢流量、最大瞬时溢流量等统计信息 Get total overflow (m^3)、maximum instantaneous overflow(m^3/s) of each outlet( or each manhole )of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staticType">节点统计数据类型 node statistic data type</param>
        /// <param name="overflowNodeType">节点类型 node type:  1-Manhole;  3-Outlet;</param>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (BaseStaticOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>>> ApiV1ResultNetworkNodeStaticGetAsyncWithHttpInfo (string staticType, string overflowNodeType, string scenarioId)
        {
            // verify the required parameter 'staticType' is set
            if (staticType == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'staticType' when calling NetworkApi->ApiV1ResultNetworkNodeStaticGet");

            // verify the required parameter 'overflowNodeType' is set
            if (overflowNodeType == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'overflowNodeType' when calling NetworkApi->ApiV1ResultNetworkNodeStaticGet");

            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkNodeStaticGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StaticType", staticType));
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "OverflowNodeType", overflowNodeType));
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseStaticOutput>>("/api/v1/result/network/node-static", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkNodeStaticGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node) 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        public Result<BaseTimeseriesOutput> ApiV1ResultNetworkNodeTimeseriesGet (string scenarioId, string nodeDataType = default(string), string nodeId = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = ApiV1ResultNetworkNodeTimeseriesGetWithHttpInfo(scenarioId, nodeDataType, nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node) 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseTimeseriesOutput >> ApiV1ResultNetworkNodeTimeseriesGetWithHttpInfo (string scenarioId, string nodeDataType = default(string), string nodeId = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkNodeTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nodeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "NodeDataType", nodeDataType));
            }
            if (nodeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "NodeId", nodeId));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseTimeseriesOutput >>("/api/v1/result/network/node-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkNodeTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node) 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkNodeTimeseriesGetAsync (string scenarioId, string nodeDataType = default(string), string nodeId = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = await ApiV1ResultNetworkNodeTimeseriesGetAsyncWithHttpInfo(scenarioId, nodeDataType, nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道节点单点时间序列结果 Get pipe network single point time series results (node) 获取管道单个节点上的水位、溢流时间序列结果 Get node water level or overflow time series result on a single node of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeDataType">节点结果类型 node result type:  0-WaterLevel;  1-Overflow; (optional)</param>
        /// <param name="nodeId">节点ID node ID (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkNodeTimeseriesGetAsyncWithHttpInfo (string scenarioId, string nodeDataType = default(string), string nodeId = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkNodeTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nodeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "NodeDataType", nodeDataType));
            }
            if (nodeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "NodeId", nodeId));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseTimeseriesOutput>>("/api/v1/result/network/node-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkNodeTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>NetworkProfile</returns>
        public Result<NetworkProfile> ApiV1ResultNetworkProfileTimeseriesGet (string scenarioId, List<string> nodeIDs = default(List<string>))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<NetworkProfile>> localVarResponse = ApiV1ResultNetworkProfileTimeseriesGetWithHttpInfo(scenarioId, nodeIDs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>ApiResponse of NetworkProfile</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< NetworkProfile >> ApiV1ResultNetworkProfileTimeseriesGetWithHttpInfo (string scenarioId, List<string> nodeIDs = default(List<string>))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkProfileTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nodeIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("multi", "NodeIDs", nodeIDs));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< NetworkProfile >>("/api/v1/result/network/profile-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkProfileTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>Task of NetworkProfile</returns>
        public async System.Threading.Tasks.Task<Result<NetworkProfile>> ApiV1ResultNetworkProfileTimeseriesGetAsync (string scenarioId, List<string> nodeIDs = default(List<string>))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<NetworkProfile>> localVarResponse = await ApiV1ResultNetworkProfileTimeseriesGetAsyncWithHttpInfo(scenarioId, nodeIDs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道剖面图数据 Get network profile plot data 获取一段或若干段相连管道的剖面图数据 Get profile plot data of one or several connected pipes of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="nodeIDs">沿着管段的节点ID列表 node IDs along the pipes (optional)</param>
        /// <returns>Task of ApiResponse (NetworkProfile)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<NetworkProfile>>> ApiV1ResultNetworkProfileTimeseriesGetAsyncWithHttpInfo (string scenarioId, List<string> nodeIDs = default(List<string>))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkProfileTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nodeIDs != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("multi", "NodeIDs", nodeIDs));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<NetworkProfile>>("/api/v1/result/network/profile-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkProfileTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;PumpStatisticsOutput&gt;</returns>
        public Result<List<PumpStatisticsOutput>> ApiV1ResultNetworkPumpStatisticsGet (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<PumpStatisticsOutput>>> localVarResponse = ApiV1ResultNetworkPumpStatisticsGetWithHttpInfo(scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;PumpStatisticsOutput&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<PumpStatisticsOutput> >> ApiV1ResultNetworkPumpStatisticsGetWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkPumpStatisticsGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<PumpStatisticsOutput> >>("/api/v1/result/network/pump-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkPumpStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;PumpStatisticsOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<PumpStatisticsOutput>>> ApiV1ResultNetworkPumpStatisticsGetAsync (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<PumpStatisticsOutput>>> localVarResponse = await ApiV1ResultNetworkPumpStatisticsGetAsyncWithHttpInfo(scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道泵站的统计结果 Get statistic results of network pumps 获取管道泵站的统计结果，包括累计流量、累计开启时长等 Get pipe structure pumps statistic results, including pump accumulated discharge, pump accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;PumpStatisticsOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<PumpStatisticsOutput>>>> ApiV1ResultNetworkPumpStatisticsGetAsyncWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkPumpStatisticsGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<PumpStatisticsOutput>>>("/api/v1/result/network/pump-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkPumpStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        public Result<BaseTimeseriesOutput> ApiV1ResultNetworkPumpTimeseriesGet (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = ApiV1ResultNetworkPumpTimeseriesGetWithHttpInfo(scenarioId, pumpID, pumpDataType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseTimeseriesOutput >> ApiV1ResultNetworkPumpTimeseriesGetWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkPumpTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pumpID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpID", pumpID));
            }
            if (pumpDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpDataType", pumpDataType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseTimeseriesOutput >>("/api/v1/result/network/pump-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkPumpTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkPumpTimeseriesGetAsync (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = await ApiV1ResultNetworkPumpTimeseriesGetAsyncWithHttpInfo(scenarioId, pumpID, pumpDataType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道泵站的时间序列结果 Get time-series results of a network pump 获取单个管道泵站的水位、流量时间序列结果数据 Get water level or discharge time series result of a single pump of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pumpID">泵的ID pump ID (optional)</param>
        /// <param name="pumpDataType">泵的数据类型 pump data type:  0-WaterLevel;  1-Discharge; (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkPumpTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pumpID = default(string), string pumpDataType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkPumpTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pumpID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpID", pumpID));
            }
            if (pumpDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PumpDataType", pumpDataType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseTimeseriesOutput>>("/api/v1/result/network/pump-timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkPumpTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe) 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>BaseStaticOutput</returns>
        public Result<BaseStaticOutput> ApiV1ResultNetworkStaticGet (string scenarioId, string pipeDataType = default(string), string statisticType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>> localVarResponse = ApiV1ResultNetworkStaticGetWithHttpInfo(scenarioId, pipeDataType, statisticType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe) 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>ApiResponse of BaseStaticOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseStaticOutput >> ApiV1ResultNetworkStaticGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), string statisticType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkStaticGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (statisticType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StatisticType", statisticType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseStaticOutput >>("/api/v1/result/network/static", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkStaticGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe) 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>Task of BaseStaticOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseStaticOutput>> ApiV1ResultNetworkStaticGetAsync (string scenarioId, string pipeDataType = default(string), string statisticType = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>> localVarResponse = await ApiV1ResultNetworkStaticGetAsyncWithHttpInfo(scenarioId, pipeDataType, statisticType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道统计结果 Get 1D statistic results for networks (pipe) 获取一维管道统计结果，包括流量、流速、充满度、水位等的最大值、最小值 Get pipe statistic results including maximum and minimum of flow, velocity, filling, water level, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="statisticType">统计类型 statistic type:  0-Min;  1-Max; (optional)</param>
        /// <returns>Task of ApiResponse (BaseStaticOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseStaticOutput>>> ApiV1ResultNetworkStaticGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), string statisticType = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkStaticGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (statisticType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "StatisticType", statisticType));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseStaticOutput>>("/api/v1/result/network/static", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkStaticGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>NetworkStatisticsOutput</returns>
        public Result<NetworkStatisticsOutput> ApiV1ResultNetworkStatisticsGet (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<NetworkStatisticsOutput>> localVarResponse = ApiV1ResultNetworkStatisticsGetWithHttpInfo(scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of NetworkStatisticsOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< NetworkStatisticsOutput >> ApiV1ResultNetworkStatisticsGetWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkStatisticsGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< NetworkStatisticsOutput >>("/api/v1/result/network/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of NetworkStatisticsOutput</returns>
        public async System.Threading.Tasks.Task<Result<NetworkStatisticsOutput>> ApiV1ResultNetworkStatisticsGetAsync (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<NetworkStatisticsOutput>> localVarResponse = await ApiV1ResultNetworkStatisticsGetAsyncWithHttpInfo(scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 查询管道溢流的统计结果 Get overflow statistic result of the network 查询雨水管道和污水管道的溢流结果，包括总溢流量，溢流点个数等 Get rain pipe and sewage pipe overflow statistic results, including accumulated overflow amount, number of overflow points, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (NetworkStatisticsOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<NetworkStatisticsOutput>>> ApiV1ResultNetworkStatisticsGetAsyncWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkStatisticsGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<NetworkStatisticsOutput>>("/api/v1/result/network/statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>BaseTimeseriesOutput</returns>
        public Result<BaseTimeseriesOutput> ApiV1ResultNetworkTimeseriesGet (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = ApiV1ResultNetworkTimeseriesGetWithHttpInfo(scenarioId, pipeDataType, pipeID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>ApiResponse of BaseTimeseriesOutput</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< BaseTimeseriesOutput >> ApiV1ResultNetworkTimeseriesGetWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkTimeseriesGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (pipeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeID", pipeID));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< BaseTimeseriesOutput >>("/api/v1/result/network/timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of BaseTimeseriesOutput</returns>
        public async System.Threading.Tasks.Task<Result<BaseTimeseriesOutput>> ApiV1ResultNetworkTimeseriesGetAsync (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>> localVarResponse = await ApiV1ResultNetworkTimeseriesGetAsyncWithHttpInfo(scenarioId, pipeDataType, pipeID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道单点时间序列结果 Get pipe network single point time series results 获取管道单个计算点上的流量、流速、充满度、水位等时间序列结果 Get pipe flow, velocity, filling, water level, etc. time series result on a single pipe of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <param name="pipeDataType">管道结果类型 pipe result type:  0-PipeFlow;  1-PipeVelocity;  2-PipeFilling;  3-PipeWaterLevel (optional)</param>
        /// <param name="pipeID">管道ID pipe ID (optional)</param>
        /// <returns>Task of ApiResponse (BaseTimeseriesOutput)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<BaseTimeseriesOutput>>> ApiV1ResultNetworkTimeseriesGetAsyncWithHttpInfo (string scenarioId, string pipeDataType = default(string), string pipeID = default(string))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkTimeseriesGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pipeDataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeDataType", pipeDataType));
            }
            if (pipeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "PipeID", pipeID));
            }
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<BaseTimeseriesOutput>>("/api/v1/result/network/timeseries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkTimeseriesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>List&lt;ValveStatisticsOutput&gt;</returns>
        public Result<List<ValveStatisticsOutput>> ApiV1ResultNetworkValveStatisticsGet (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<ValveStatisticsOutput>>> localVarResponse = ApiV1ResultNetworkValveStatisticsGetWithHttpInfo(scenarioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>ApiResponse of List&lt;ValveStatisticsOutput&gt;</returns>
        public DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result< List<ValveStatisticsOutput> >> ApiV1ResultNetworkValveStatisticsGetWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkValveStatisticsGet");

            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Result< List<ValveStatisticsOutput> >>("/api/v1/result/network/valve-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkValveStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of List&lt;ValveStatisticsOutput&gt;</returns>
        public async System.Threading.Tasks.Task<Result<List<ValveStatisticsOutput>>> ApiV1ResultNetworkValveStatisticsGetAsync (string scenarioId)
        {
             DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<ValveStatisticsOutput>>> localVarResponse = await ApiV1ResultNetworkValveStatisticsGetAsyncWithHttpInfo(scenarioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// 获取管道阀门的统计结果 Get statistic results of network valves 获取管道阀门的统计结果，包括累计开启时长等 Get pipe structure valves statistic results, including valve accumulated open time, etc. of a scenario.
        /// </summary>
        /// <exception cref="DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">方案的ID scenario’s ID</param>
        /// <returns>Task of ApiResponse (List&lt;ValveStatisticsOutput&gt;)</returns>
        public async System.Threading.Tasks.Task<DHICN.PAAS.SDK.ResultAnalysis.Client.ApiResponse<Result<List<ValveStatisticsOutput>>>> ApiV1ResultNetworkValveStatisticsGetAsyncWithHttpInfo (string scenarioId)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
                throw new DHICN.PAAS.SDK.ResultAnalysis.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling NetworkApi->ApiV1ResultNetworkValveStatisticsGet");


            DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions localVarRequestOptions = new DHICN.PAAS.SDK.ResultAnalysis.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.QueryParameters.Add(DHICN.PAAS.SDK.ResultAnalysis.Client.ClientUtils.ParameterToMultiMap("", "ScenarioId", scenarioId));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Result<List<ValveStatisticsOutput>>>("/api/v1/result/network/valve-statistics", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1ResultNetworkValveStatisticsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
