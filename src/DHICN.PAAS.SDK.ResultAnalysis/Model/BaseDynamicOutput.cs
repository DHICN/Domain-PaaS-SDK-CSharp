/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// BaseDynamicOutput
    /// </summary>
    [DataContract]
    public partial class BaseDynamicOutput :  IEquatable<BaseDynamicOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseDynamicOutput" /> class.
        /// </summary>
        /// <param name="time">时刻列表 time steps, in string.</param>
        /// <param name="iDs">模型ID列表/网格编号列表 model feature IDs or element IDs.</param>
        /// <param name="data">二维结构结果数据，第一维度是时间，第二维度是模型ID 2D array result data, in format data[element[time]].</param>
        public BaseDynamicOutput(List<string> time = default(List<string>), List<string> iDs = default(List<string>), List<List<double>> data = default(List<List<double>>))
        {
            this.Time = time;
            this.IDs = iDs;
            this.Data = data;
        }
        
        /// <summary>
        /// 时刻列表 time steps, in string
        /// </summary>
        /// <value>时刻列表 time steps, in string</value>
        [DataMember(Name="time", EmitDefaultValue=true)]
        public List<string> Time { get; set; }

        /// <summary>
        /// 模型ID列表/网格编号列表 model feature IDs or element IDs
        /// </summary>
        /// <value>模型ID列表/网格编号列表 model feature IDs or element IDs</value>
        [DataMember(Name="iDs", EmitDefaultValue=true)]
        public List<string> IDs { get; set; }

        /// <summary>
        /// 二维结构结果数据，第一维度是时间，第二维度是模型ID 2D array result data, in format data[element[time]]
        /// </summary>
        /// <value>二维结构结果数据，第一维度是时间，第二维度是模型ID 2D array result data, in format data[element[time]]</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public List<List<double>> Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseDynamicOutput {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  IDs: ").Append(IDs).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaseDynamicOutput);
        }

        /// <summary>
        /// Returns true if BaseDynamicOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of BaseDynamicOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseDynamicOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Time == input.Time ||
                    this.Time != null &&
                    input.Time != null &&
                    this.Time.SequenceEqual(input.Time)
                ) && 
                (
                    this.IDs == input.IDs ||
                    this.IDs != null &&
                    input.IDs != null &&
                    this.IDs.SequenceEqual(input.IDs)
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.IDs != null)
                    hashCode = hashCode * 59 + this.IDs.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
