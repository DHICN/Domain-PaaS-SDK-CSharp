/* 
 * model-driver-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelDriver.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelDriver.Model
{
    /// <summary>
    /// 获取方案的计算状态
    /// </summary>
    [DataContract]
    public partial class CalculateStatusOutput :  IEquatable<CalculateStatusOutput>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public EnumStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateStatusOutput" /> class.
        /// </summary>
        /// <param name="queueId">排队ID.</param>
        /// <param name="scenarioId">方案ID.</param>
        /// <param name="status">status.</param>
        /// <param name="progress">计算进度.</param>
        /// <param name="waitingNo">排队序号.</param>
        public CalculateStatusOutput(Guid? queueId = default(Guid?), Guid scenarioId = default(Guid), EnumStatus? status = default(EnumStatus?), float? progress = default(float?), int? waitingNo = default(int?))
        {
            this.QueueId = queueId;
            this.ScenarioId = scenarioId;
            this.Status = status;
            this.Progress = progress;
            this.WaitingNo = waitingNo;
        }
        
        /// <summary>
        /// 排队ID
        /// </summary>
        /// <value>排队ID</value>
        [DataMember(Name="queueId", EmitDefaultValue=true)]
        public Guid? QueueId { get; set; }

        /// <summary>
        /// 方案ID
        /// </summary>
        /// <value>方案ID</value>
        [DataMember(Name="scenarioId", EmitDefaultValue=false)]
        public Guid ScenarioId { get; set; }

        /// <summary>
        /// 计算状态描述
        /// </summary>
        /// <value>计算状态描述</value>
        [DataMember(Name="statusDesc", EmitDefaultValue=true)]
        public string StatusDesc { get; private set; }

        /// <summary>
        /// 计算进度
        /// </summary>
        /// <value>计算进度</value>
        [DataMember(Name="progress", EmitDefaultValue=true)]
        public float? Progress { get; set; }

        /// <summary>
        /// 排队序号
        /// </summary>
        /// <value>排队序号</value>
        [DataMember(Name="waitingNo", EmitDefaultValue=true)]
        public int? WaitingNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculateStatusOutput {\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDesc: ").Append(StatusDesc).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  WaitingNo: ").Append(WaitingNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculateStatusOutput);
        }

        /// <summary>
        /// Returns true if CalculateStatusOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculateStatusOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculateStatusOutput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueId == input.QueueId ||
                    (this.QueueId != null &&
                    this.QueueId.Equals(input.QueueId))
                ) && 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusDesc == input.StatusDesc ||
                    (this.StatusDesc != null &&
                    this.StatusDesc.Equals(input.StatusDesc))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.WaitingNo == input.WaitingNo ||
                    (this.WaitingNo != null &&
                    this.WaitingNo.Equals(input.WaitingNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueId != null)
                    hashCode = hashCode * 59 + this.QueueId.GetHashCode();
                if (this.ScenarioId != null)
                    hashCode = hashCode * 59 + this.ScenarioId.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDesc != null)
                    hashCode = hashCode * 59 + this.StatusDesc.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.WaitingNo != null)
                    hashCode = hashCode * 59 + this.WaitingNo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
