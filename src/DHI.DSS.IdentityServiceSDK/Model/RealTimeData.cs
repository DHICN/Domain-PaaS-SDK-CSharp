/* 
 * identity-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHI.DSS.IdentityServiceSDK.Client.OpenAPIDateConverter;

namespace DHI.DSS.IdentityServiceSDK.Model
{
    /// <summary>
    /// RealTimeData
    /// </summary>
    [DataContract]
    public partial class RealTimeData :  IEquatable<RealTimeData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimeData" /> class.
        /// </summary>
        /// <param name="code">毒性指标 toxicity indicator.</param>
        /// <param name="name">指标名称 indicator name.</param>
        /// <param name="latestValue">最新值 latest value.</param>
        /// <param name="description">毒性描述 toxicity description.</param>
        /// <param name="tsDatas">时间序列数据 time-series data.</param>
        public RealTimeData(string code = default(string), string name = default(string), double latestValue = default(double), string description = default(string), List<TsData> tsDatas = default(List<TsData>))
        {
            this.Code = code;
            this.Name = name;
            this.LatestValue = latestValue;
            this.Description = description;
            this.TsDatas = tsDatas;
        }
        
        /// <summary>
        /// 毒性指标 toxicity indicator
        /// </summary>
        /// <value>毒性指标 toxicity indicator</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// 指标名称 indicator name
        /// </summary>
        /// <value>指标名称 indicator name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// 最新值 latest value
        /// </summary>
        /// <value>最新值 latest value</value>
        [DataMember(Name="latestValue", EmitDefaultValue=false)]
        public double LatestValue { get; set; }

        /// <summary>
        /// 毒性描述 toxicity description
        /// </summary>
        /// <value>毒性描述 toxicity description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// 时间序列数据 time-series data
        /// </summary>
        /// <value>时间序列数据 time-series data</value>
        [DataMember(Name="tsDatas", EmitDefaultValue=true)]
        public List<TsData> TsDatas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealTimeData {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LatestValue: ").Append(LatestValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TsDatas: ").Append(TsDatas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealTimeData);
        }

        /// <summary>
        /// Returns true if RealTimeData instances are equal
        /// </summary>
        /// <param name="input">Instance of RealTimeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealTimeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LatestValue == input.LatestValue ||
                    this.LatestValue.Equals(input.LatestValue)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TsDatas == input.TsDatas ||
                    this.TsDatas != null &&
                    input.TsDatas != null &&
                    this.TsDatas.SequenceEqual(input.TsDatas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.LatestValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TsDatas != null)
                    hashCode = hashCode * 59 + this.TsDatas.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
