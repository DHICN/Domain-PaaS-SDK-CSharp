/* 
 * message-center-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.Message.Center.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.Message.Center.Model
{
    /// <summary>
    /// 添加消息类型输入参数  &lt;br&gt;query message type parameter
    /// </summary>
    [DataContract]
    public partial class AddMsgTypeTempLocalInput :  IEquatable<AddMsgTypeTempLocalInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMsgTypeTempLocalInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddMsgTypeTempLocalInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMsgTypeTempLocalInput" /> class.
        /// </summary>
        /// <param name="msgType">消息类型  &lt;br&gt; message&#39;s type  (required).</param>
        /// <param name="language">模板语言  &lt;br&gt; tempalte&#39;s language  (required).</param>
        /// <param name="msgTemplate">msgTemplate (required).</param>
        public AddMsgTypeTempLocalInput(string msgType = default(string), string language = default(string), MsgTemplateObj msgTemplate = default(MsgTemplateObj))
        {
            // to ensure "msgType" is required (not null)
            this.MsgType = msgType ?? throw new ArgumentNullException("msgType is a required property for AddMsgTypeTempLocalInput and cannot be null");
            // to ensure "language" is required (not null)
            this.Language = language ?? throw new ArgumentNullException("language is a required property for AddMsgTypeTempLocalInput and cannot be null");
            // to ensure "msgTemplate" is required (not null)
            this.MsgTemplate = msgTemplate ?? throw new ArgumentNullException("msgTemplate is a required property for AddMsgTypeTempLocalInput and cannot be null");
        }
        
        /// <summary>
        /// 消息类型  &lt;br&gt; message&#39;s type 
        /// </summary>
        /// <value>消息类型  &lt;br&gt; message&#39;s type </value>
        [DataMember(Name="msgType", EmitDefaultValue=false)]
        public string MsgType { get; set; }

        /// <summary>
        /// 模板语言  &lt;br&gt; tempalte&#39;s language 
        /// </summary>
        /// <value>模板语言  &lt;br&gt; tempalte&#39;s language </value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets MsgTemplate
        /// </summary>
        [DataMember(Name="msgTemplate", EmitDefaultValue=false)]
        public MsgTemplateObj MsgTemplate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddMsgTypeTempLocalInput {\n");
            sb.Append("  MsgType: ").Append(MsgType).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MsgTemplate: ").Append(MsgTemplate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddMsgTypeTempLocalInput);
        }

        /// <summary>
        /// Returns true if AddMsgTypeTempLocalInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AddMsgTypeTempLocalInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddMsgTypeTempLocalInput input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MsgType == input.MsgType ||
                    (this.MsgType != null &&
                    this.MsgType.Equals(input.MsgType))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.MsgTemplate == input.MsgTemplate ||
                    (this.MsgTemplate != null &&
                    this.MsgTemplate.Equals(input.MsgTemplate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MsgType != null)
                    hashCode = hashCode * 59 + this.MsgType.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.MsgTemplate != null)
                    hashCode = hashCode * 59 + this.MsgTemplate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
