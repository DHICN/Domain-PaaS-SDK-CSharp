/* 
 * model-information-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ModelInformation.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ModelInformation.Model
{
    /// <summary>
    /// ControlRuleInfo
    /// </summary>
    [DataContract]
    public partial class ControlRuleInfo :  IEquatable<ControlRuleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ControlRuleInfo" /> class.
        /// </summary>
        /// <param name="csPumps">管网泵站调度规则数据.</param>
        /// <param name="csValves">管网阀门调度规则数据.</param>
        /// <param name="riverPumps">河道泵站调度规则数据.</param>
        /// <param name="riverGates">河道闸门调度规则数据.</param>
        public ControlRuleInfo(List<CsPump> csPumps = default(List<CsPump>), List<CsValve> csValves = default(List<CsValve>), List<RiverPump> riverPumps = default(List<RiverPump>), List<RiverGate> riverGates = default(List<RiverGate>))
        {
            this.CsPumps = csPumps;
            this.CsValves = csValves;
            this.RiverPumps = riverPumps;
            this.RiverGates = riverGates;
        }
        
        /// <summary>
        /// 管网泵站调度规则数据
        /// </summary>
        /// <value>管网泵站调度规则数据</value>
        [DataMember(Name="csPumps", EmitDefaultValue=true)]
        public List<CsPump> CsPumps { get; set; }

        /// <summary>
        /// 管网阀门调度规则数据
        /// </summary>
        /// <value>管网阀门调度规则数据</value>
        [DataMember(Name="csValves", EmitDefaultValue=true)]
        public List<CsValve> CsValves { get; set; }

        /// <summary>
        /// 河道泵站调度规则数据
        /// </summary>
        /// <value>河道泵站调度规则数据</value>
        [DataMember(Name="riverPumps", EmitDefaultValue=true)]
        public List<RiverPump> RiverPumps { get; set; }

        /// <summary>
        /// 河道闸门调度规则数据
        /// </summary>
        /// <value>河道闸门调度规则数据</value>
        [DataMember(Name="riverGates", EmitDefaultValue=true)]
        public List<RiverGate> RiverGates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ControlRuleInfo {\n");
            sb.Append("  CsPumps: ").Append(CsPumps).Append("\n");
            sb.Append("  CsValves: ").Append(CsValves).Append("\n");
            sb.Append("  RiverPumps: ").Append(RiverPumps).Append("\n");
            sb.Append("  RiverGates: ").Append(RiverGates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ControlRuleInfo);
        }

        /// <summary>
        /// Returns true if ControlRuleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ControlRuleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ControlRuleInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CsPumps == input.CsPumps ||
                    this.CsPumps != null &&
                    input.CsPumps != null &&
                    this.CsPumps.SequenceEqual(input.CsPumps)
                ) && 
                (
                    this.CsValves == input.CsValves ||
                    this.CsValves != null &&
                    input.CsValves != null &&
                    this.CsValves.SequenceEqual(input.CsValves)
                ) && 
                (
                    this.RiverPumps == input.RiverPumps ||
                    this.RiverPumps != null &&
                    input.RiverPumps != null &&
                    this.RiverPumps.SequenceEqual(input.RiverPumps)
                ) && 
                (
                    this.RiverGates == input.RiverGates ||
                    this.RiverGates != null &&
                    input.RiverGates != null &&
                    this.RiverGates.SequenceEqual(input.RiverGates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CsPumps != null)
                    hashCode = hashCode * 59 + this.CsPumps.GetHashCode();
                if (this.CsValves != null)
                    hashCode = hashCode * 59 + this.CsValves.GetHashCode();
                if (this.RiverPumps != null)
                    hashCode = hashCode * 59 + this.RiverPumps.GetHashCode();
                if (this.RiverGates != null)
                    hashCode = hashCode * 59 + this.RiverGates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
