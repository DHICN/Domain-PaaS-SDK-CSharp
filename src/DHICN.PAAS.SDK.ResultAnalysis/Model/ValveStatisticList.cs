/* 
 * result-analysis-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DHICN.PAAS.SDK.ResultAnalysis.Client.OpenAPIDateConverter;

namespace DHICN.PAAS.SDK.ResultAnalysis.Model
{
    /// <summary>
    /// ValveStatisticList
    /// </summary>
    [DataContract]
    public partial class ValveStatisticList :  IEquatable<ValveStatisticList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValveStatisticList" /> class.
        /// </summary>
        /// <param name="assetID">阀门Id valve id.</param>
        /// <param name="assetName">阀门名称 valve name.</param>
        /// <param name="modelFeatureId">模型中阀门的ID modelfeature id.</param>
        /// <param name="valveType">阀门类型： valve type 0-WasteWater,1-RainWater  0-WasteWater  1-RainWater.</param>
        /// <param name="state">开关状态(0:关,1:开) switch status (0: off, 1: on).</param>
        /// <param name="totalMinutes">排河闸累计开启时间(min) total opening time (unit:minute).</param>
        public ValveStatisticList(string assetID = default(string), string assetName = default(string), string modelFeatureId = default(string), int valveType = default(int), int state = default(int), double totalMinutes = default(double))
        {
            this.AssetID = assetID;
            this.AssetName = assetName;
            this.ModelFeatureId = modelFeatureId;
            this.ValveType = valveType;
            this.State = state;
            this.TotalMinutes = totalMinutes;
        }
        
        /// <summary>
        /// 阀门Id valve id
        /// </summary>
        /// <value>阀门Id valve id</value>
        [DataMember(Name="assetID", EmitDefaultValue=true)]
        public string AssetID { get; set; }

        /// <summary>
        /// 阀门名称 valve name
        /// </summary>
        /// <value>阀门名称 valve name</value>
        [DataMember(Name="assetName", EmitDefaultValue=true)]
        public string AssetName { get; set; }

        /// <summary>
        /// 模型中阀门的ID modelfeature id
        /// </summary>
        /// <value>模型中阀门的ID modelfeature id</value>
        [DataMember(Name="modelFeatureId", EmitDefaultValue=true)]
        public string ModelFeatureId { get; set; }

        /// <summary>
        /// 阀门类型： valve type 0-WasteWater,1-RainWater  0-WasteWater  1-RainWater
        /// </summary>
        /// <value>阀门类型： valve type 0-WasteWater,1-RainWater  0-WasteWater  1-RainWater</value>
        [DataMember(Name="valveType", EmitDefaultValue=false)]
        public int ValveType { get; set; }

        /// <summary>
        /// 开关状态(0:关,1:开) switch status (0: off, 1: on)
        /// </summary>
        /// <value>开关状态(0:关,1:开) switch status (0: off, 1: on)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int State { get; set; }

        /// <summary>
        /// 排河闸累计开启时间(min) total opening time (unit:minute)
        /// </summary>
        /// <value>排河闸累计开启时间(min) total opening time (unit:minute)</value>
        [DataMember(Name="totalMinutes", EmitDefaultValue=false)]
        public double TotalMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValveStatisticList {\n");
            sb.Append("  AssetID: ").Append(AssetID).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  ModelFeatureId: ").Append(ModelFeatureId).Append("\n");
            sb.Append("  ValveType: ").Append(ValveType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValveStatisticList);
        }

        /// <summary>
        /// Returns true if ValveStatisticList instances are equal
        /// </summary>
        /// <param name="input">Instance of ValveStatisticList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValveStatisticList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetID == input.AssetID ||
                    (this.AssetID != null &&
                    this.AssetID.Equals(input.AssetID))
                ) && 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.ModelFeatureId == input.ModelFeatureId ||
                    (this.ModelFeatureId != null &&
                    this.ModelFeatureId.Equals(input.ModelFeatureId))
                ) && 
                (
                    this.ValveType == input.ValveType ||
                    this.ValveType.Equals(input.ValveType)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.TotalMinutes == input.TotalMinutes ||
                    this.TotalMinutes.Equals(input.TotalMinutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetID != null)
                    hashCode = hashCode * 59 + this.AssetID.GetHashCode();
                if (this.AssetName != null)
                    hashCode = hashCode * 59 + this.AssetName.GetHashCode();
                if (this.ModelFeatureId != null)
                    hashCode = hashCode * 59 + this.ModelFeatureId.GetHashCode();
                hashCode = hashCode * 59 + this.ValveType.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.TotalMinutes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
